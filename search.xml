<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Flask-Cache为页面增加缓存</title>
      <link href="/2018/11/19/Use-Flash-Cache-To-Quickly-Increase-The-Cache/"/>
      <url>/2018/11/19/Use-Flash-Cache-To-Quickly-Increase-The-Cache/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Flash-Cache快速增加缓存"><a href="#使用Flash-Cache快速增加缓存" class="headerlink" title="使用Flash-Cache快速增加缓存"></a>使用Flash-Cache快速增加缓存</h1><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="速度慢"><a href="#速度慢" class="headerlink" title="速度慢"></a>速度慢</h4><h4 id="数据库压力大"><a href="#数据库压力大" class="headerlink" title="数据库压力大"></a>数据库压力大</h4><h4 id="场景不需要展示实时数据"><a href="#场景不需要展示实时数据" class="headerlink" title="场景不需要展示实时数据"></a>场景不需要展示实时数据</h4><h3 id="快速配置"><a href="#快速配置" class="headerlink" title="快速配置"></a>快速配置</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>pip install Flask-Cache</code></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>官方给出两种方式：</p><p>第一种：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> flask_cache <span class="keyword">import</span> Cache</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">cache = Cache(app,config=&#123;<span class="string">'CACHE_TYPE'</span>: <span class="string">'simple'</span>&#125;)</div></pre></td></tr></table></figure></p><p>第二种：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> flask_cache <span class="keyword">import</span> Cache</div><div class="line"></div><div class="line">cache = Cache(config=&#123;<span class="string">'CACHE_TYPE'</span>: <span class="string">'simple'</span>&#125;)</div><div class="line">app = Flask(__name__)</div><div class="line">cache.init_app(app)</div></pre></td></tr></table></figure></p><h4 id="Cached"><a href="#Cached" class="headerlink" title="Cached()"></a>Cached()</h4><ol><li>只缓存path</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/report', methods=['GET'])</span></div><div class="line"><span class="meta">@cache.cached(timeout=300)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">report</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span></div></pre></td></tr></table></figure><ol><li>缓存path及参数（需要自建方法）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cache_key</span><span class="params">()</span>:</span></div><div class="line">    args = request.args</div><div class="line">    key = request.path + <span class="string">'?'</span> + parse.urlencode([</div><div class="line">        (k, v) <span class="keyword">for</span> k <span class="keyword">in</span> sorted(args) <span class="keyword">for</span> v <span class="keyword">in</span> sorted(args.getlist(k))</div><div class="line">    ])</div><div class="line">    <span class="keyword">return</span> key</div><div class="line">    </div><div class="line"><span class="meta">@app.route('/report', methods=['GET'])</span></div><div class="line"><span class="meta">@cache.cached(timeout=300, key_prefix=cache_key)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">report</span><span class="params">()</span>:</span></div><div class="line">    b = request.values.get(<span class="string">"b"</span>)</div><div class="line">    v = request.values.get(<span class="string">"v"</span>)</div><div class="line">    p = request.values.get(<span class="string">"p"</span>)</div><div class="line">    pc = request.values.get(<span class="string">"pc"</span>)</div><div class="line">    result = &#123;<span class="string">"b"</span>:b, <span class="string">"v"</span>:v, <span class="string">"p"</span>:p, <span class="string">"pc"</span>:pc&#125;</div><div class="line">    <span class="keyword">return</span> jsonify(result)</div></pre></td></tr></table></figure><h4 id="memoize"><a href="#memoize" class="headerlink" title="memoize()"></a>memoize()</h4><p>自动按参数进行缓存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@cache.memoize(timeout=50)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">big_foo</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span> a + b + random.randrange(<span class="number">0</span>, <span class="number">1000</span>)</div></pre></td></tr></table></figure><h3 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h3><h4 id="报引用错"><a href="#报引用错" class="headerlink" title="报引用错"></a>报引用错</h4><ol><li>官方API中引用报错：</li></ol><p>将：<code>from flask.ext.cache import Cache</code></p><p>修改为：</p><p><code>from flask_cache import Cache</code></p><ol><li>执行过程中报错</li></ol><p><code>from flask.ext.cache import make_template_fragment_key</code></p><p>此报错原因是新版本flask不支持引用flask.ext了，所以简单修改即可正常使用：</p><p>文件位置：</p><p><code>/your-python-forder/site-packages/flask_cache/jinja2ext.py</code></p><p>第33行修改为：</p><p><code>from flask_cache import make_template_fragment_key</code></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>刷新接口后，可以看到增加缓存后响应时间减少还是很明显的。</p><blockquote><p><a href="http://www.pythondoc.com/flask-cache/" target="_blank" rel="external">官方API</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask-cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用PyPI发布自己的轮子</title>
      <link href="/2018/11/16/%E4%BD%BF%E7%94%A8PyPI%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AE%E5%AD%90/"/>
      <url>/2018/11/16/%E4%BD%BF%E7%94%A8PyPI%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AE%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="PyPI打包上传全教程"><a href="#PyPI打包上传全教程" class="headerlink" title="PyPI打包上传全教程"></a>PyPI打包上传全教程</h1><blockquote><p><a href="https://packaging.python.org/tutorials/packaging-projects/" target="_blank" rel="external">官方文档</a></p></blockquote><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/example_pkg</div><div class="line">  /example_pkg</div><div class="line">    __init__.py</div><div class="line">  setup.py</div><div class="line">  LICENSE</div><div class="line">  README.md</div></pre></td></tr></table></figure><h4 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> setuptools</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">"README.md"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> fh:</div><div class="line">    long_description = fh.read()</div><div class="line"></div><div class="line">setuptools.setup(</div><div class="line">    name=<span class="string">"example_pkg"</span>,</div><div class="line">    version=<span class="string">"0.0.1"</span>,</div><div class="line">    author=<span class="string">"Example Author"</span>,</div><div class="line">    author_email=<span class="string">"author@example.com"</span>,</div><div class="line">    description=<span class="string">"A small example package"</span>,</div><div class="line">    long_description=long_description,</div><div class="line">    long_description_content_type=<span class="string">"text/markdown"</span>,</div><div class="line">    url=<span class="string">"https://github.com/pypa/sampleproject"</span>,</div><div class="line">    packages=setuptools.find_packages(),</div><div class="line">    classifiers=[</div><div class="line">        <span class="string">"Programming Language :: Python :: 3"</span>,</div><div class="line">        <span class="string">"License :: OSI Approved :: MIT License"</span>,</div><div class="line">        <span class="string">"Operating System :: OS Independent"</span>,</div><div class="line">    ],</div><div class="line">)</div></pre></td></tr></table></figure><h4 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section"># Example Package</span></div><div class="line"></div><div class="line">This is a simple example package. You can use</div><div class="line">[<span class="string">Github-flavored Markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>)</div><div class="line">to write your content.</div></pre></td></tr></table></figure><h4 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Copyright (c) 2018 The Python Packaging Authority</div><div class="line"></div><div class="line">Permission is hereby granted, free of charge, to any person obtaining a copy</div><div class="line">of this software and associated documentation files (the "Software"), to deal</div><div class="line">in the Software without restriction, including without limitation the rights</div><div class="line">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</div><div class="line">copies of the Software, and to permit persons to whom the Software is</div><div class="line">furnished to do so, subject to the following conditions:</div><div class="line"></div><div class="line">The above copyright notice and this permission notice shall be included in all</div><div class="line">copies or substantial portions of the Software.</div><div class="line"></div><div class="line">THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</div><div class="line">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</div><div class="line">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</div><div class="line">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</div><div class="line">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</div><div class="line">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</div><div class="line">SOFTWARE.</div></pre></td></tr></table></figure><h4 id="PyPI帐号注册"><a href="#PyPI帐号注册" class="headerlink" title="PyPI帐号注册"></a>PyPI帐号注册</h4><p><a href="https://pypi.org/account/register/" target="_blank" rel="external">点击这里</a></p><h3 id="打包-amp-上传"><a href="#打包-amp-上传" class="headerlink" title="打包&amp;上传"></a>打包&amp;上传</h3><h4 id="安装打包依赖"><a href="#安装打包依赖" class="headerlink" title="安装打包依赖"></a>安装打包依赖</h4><p><code>python -m pip install --user --upgrade setuptools wheel twine</code></p><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p><code>python setup.py sdist bdist_wheel</code></p><p>此时会生成如下目录及文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dist/</div><div class="line">  example_pkg-0.0.1-py3-none-any.whl</div><div class="line">  example_pkg-0.0.1.tar.gz</div></pre></td></tr></table></figure></p><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p><code>twine upload --repository-url https://test.pypi.org/legacy/ dist/*</code></p><p>会提示你输入用户名密码，即最上方你注册的PyPI的帐户</p><h4 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h4><p>会提示上传成功，这时去帐户里查看就可以看到你上传的轮子了。</p><h3 id="可能碰到的异常"><a href="#可能碰到的异常" class="headerlink" title="可能碰到的异常"></a>可能碰到的异常</h3><h4 id="403"><a href="#403" class="headerlink" title="403"></a>403</h4><p>Upload failed (403): Invalid or non-existent authentication information.</p><p>错误的用户验证信息，你需要创建一个用户验证文件 ~/.pypirc。请参阅上文。</p><p>Upload failed (403): You are not allowed to edit ‘xxx’ package information</p><p>你需要先注册你的包才可以开始上传，运行注册命令：python setup.py register</p><h4 id="401"><a href="#401" class="headerlink" title="401"></a>401</h4><p>Server response (401): Incomplete registration; check your email</p><p>你的PyPI账户还没完成邮箱验证，你需要去注册邮箱找到一封验证邮件完成验证后再重试失败的步骤。</p><h4 id="400"><a href="#400" class="headerlink" title="400"></a>400</h4><p>Server response (400): Invalid classifier “Topic :: Software Development :: Utilities”</p><p>你的setup.py文件中的classifier信息有误，请按官网的正确分类书写classifier.</p><p>Upload failed (400): File already exists</p><p>文件已经存在了，你每一次上次都应该更新版本号。</p><h4 id="410"><a href="#410" class="headerlink" title="410"></a>410</h4><p>HTTPError: 410 Client Error: Project pre-registration is no longer required or supported, so continue directly to uploading files. for url: <a href="https://upload.pypi.org/legacy/" target="_blank" rel="external">https://upload.pypi.org/legacy/</a></p><p>以前的时候需要注册后再上传，现在不再需要或不支持项目预注册，因此请继续直接上传文件。 </p><h4 id="No-dist"><a href="#No-dist" class="headerlink" title="No dist"></a>No dist</h4><p>error: No dist file created in earlier command</p><p>你还没打包就开始了上传命令，建议打包和上传的操作放在一起做，比如：</p><h4 id="499"><a href="#499" class="headerlink" title="499"></a>499</h4><p>python setup sdist upload</p><p>error: Upload failed (499): Client Disconnected</p><p>这应该是网络问题，多重试几次。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用jacoco测试代码覆盖率</title>
      <link href="/2018/09/30/Test-Coverage-Of-Web-Project-Code-Using-Jacoco/"/>
      <url>/2018/09/30/Test-Coverage-Of-Web-Project-Code-Using-Jacoco/</url>
      
        <content type="html"><![CDATA[<h1 id="使用jacoco测试web项目代码的覆盖率"><a href="#使用jacoco测试web项目代码的覆盖率" class="headerlink" title="使用jacoco测试web项目代码的覆盖率"></a>使用jacoco测试web项目代码的覆盖率</h1><h3 id="远程执行配置篇"><a href="#远程执行配置篇" class="headerlink" title="远程执行配置篇"></a>远程执行配置篇</h3><h4 id="下载JACOCO"><a href="#下载JACOCO" class="headerlink" title="下载JACOCO"></a>下载JACOCO</h4><p>官网：<a href="https://www.eclemma.org/jacoco/" target="_blank" rel="external">EclEmma</a><br>下载地址，V0.8.2：<a href="http://search.maven.org/remotecontent?filepath=org/jacoco/jacoco/0.8.2/jacoco-0.8.2.zip" target="_blank" rel="external">jacoco-0.8.2.zip</a></p><p>下载完成后，解压缩就可以，配置时，我们需要lib文件夹下的jacocoagent.jar和jacococli.jar文件。</p><h4 id="增加tomcat配置"><a href="#增加tomcat配置" class="headerlink" title="增加tomcat配置"></a>增加tomcat配置</h4><ul><li><p>关闭现在的tomcat服务 <code>./shutdown.sh</code></p></li><li><p>在<code>catalina.sh</code>中第二行增加内容：</p></li></ul><p>linux: <code>JAVA_OPTS=&quot;-javaagent:/home/hanz/jacocotest/jacoco/lib/jacocoagent.jar=includes=com.*,output=tcpserver,port=9527,address=10.168.136.46,append=true -Xverify:none&quot;</code></p><p>windows: <code>set JAVA_OPTS=&quot;-javaagent:/home/hanz/jacocotest/jacoco/lib/jacocoagent.jar=includes=com.*,output=tcpserver,port=9527,address=10.168.136.46,append=true -Xverify:none&quot;</code></p><p>参数说明：</p><ol><li>yourPath 是放 jacocoagent.jar 文件的目录路径；那么 <code>jacocoagent.jar</code> 这个 <code>jar</code> 包的路径就是在准备工作里下载下来的 <code>zip</code> 包，解压之后的 <code>lib</code> 目录下。</li><li>includes 是指要收集哪些类（注意不要光写包名，最后要写.<em>)，不写的话默认是</em>，会收集应用服务上所有的类，包括服务器和其他中间件的类，一般要过滤（当然如果你愿意写<em>也完全没有问题，如：`includes=com.</em><code>or</code>includes=*`）；</li><li>output 有 4 个值，分别是 file、tcpserver、tcpclient、mbean，默认是 file。使用 file 的方式只有在停掉应用服务的时候才能产生覆盖率文件，而使用 tcpserver 的方式可以在不停止应用服务的情况下下载覆盖率文件，后面会介绍如何使用 dump 方法来得到覆盖率文件。</li><li>address 是 IP 地址，IP 就是 Tomcat 服务器的机器的 IP，至于是写 <code>服务器本机的 IP</code> 还是写 <code>127.0.0.1</code> 要看情况 1) 如果是在 Tomcat 服务器上执行 <code>ant dump</code> 的话，就直接写 <code>address=127.0.0.1</code> 2) 如果执行 <code>ant dump</code> 不是在 Tomcat 服务器上执行的，就得写服务器本机的IP（切记）</li><li>port 是端口（端口比较随便，找个能用的端口就行，直接我为什么将端口写成 <code>8044</code>，我的想法是 <code>BUG 死死</code> 与 <code>8044</code> 挺配的，所以就用它作为端口号了） （<code>address</code> 和 <code>port</code> 是使用 tcpserver 方式需要的 2 个参数，也是执行 ant dump 方法必须要用到的。）</li><li><code>-Xverify:none</code>：这个参数是防止启动主程序异常才加的（非强制，可以不加）<br>更多jacocoagent.jar的参数详见官网：<a href="http://www.eclemma.org/jacoco/trunk/doc/agent.html" target="_blank" rel="external">jacocoagent.jar参数</a></li></ol><ul><li><p>重新启动tomcat，<code>./startup.sh</code></p></li><li><p>验证JAVA_OPTS是否加载：</p></li></ul><p>Linux下载终端窗口中输入<code>ps -ef | grep tomcat</code></p><p>Windows下在cmd窗口使用WMIC命令，回车<br>回显：<code>wmic:root\cli&gt;</code><br>在&gt;后面输入：<code>process where name=&quot;java.exe&quot;</code>命令<br>查看回显信息</p><h4 id="编写jacocoAnt-xml文件"><a href="#编写jacocoAnt-xml文件" class="headerlink" title="编写jacocoAnt.xml文件"></a>编写jacocoAnt.xml文件</h4><p>有现成的模板来参考：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"Lengyu"</span> <span class="attr">xmlns:jacoco</span>=<span class="string">"antlib:org.jacoco.ant"</span> <span class="attr">default</span>=<span class="string">"jacoco"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--Jacoco的安装路径--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jacocoantPath"</span> <span class="attr">value</span>=<span class="string">"/home/work/software/jacoco_0.6.4/lib/jacocoant.jar"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--最终生成.exec文件的路径，Jacoco就是根据这个文件生成最终的报告的--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jacocoexecPath"</span> <span class="attr">value</span>=<span class="string">"/home/work/local/hudson_home/workspace/wg_merchant_oc_regression/jacoco.exec"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--生成覆盖率报告的路径--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reportfolderPath"</span> <span class="attr">value</span>=<span class="string">"E:/Libs/coverage_ant_task/report/"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--远程tomcat服务的ip地址--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"server_ip"</span> <span class="attr">value</span>=<span class="string">"10.81.14.77"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--前面配置的远程tomcat服务打开的端口，要跟上面配置的一样--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"server_port"</span> <span class="attr">value</span>=<span class="string">"8893"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--源代码路径--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkOrderSrcpath"</span> <span class="attr">value</span>=<span class="string">"E:/Src/ordercenter/ordercenter-biz/src/main/java/"</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!--.class文件路径--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkOrderClasspath"</span> <span class="attr">value</span>=<span class="string">"E:/Src/ordercenter/ordercenter-biz/target/classes/com/baidu/ordercenter/service/Impl"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--让ant知道去哪儿找Jacoco--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">taskdef</span> <span class="attr">uri</span>=<span class="string">"antlib:org.jacoco.ant"</span> <span class="attr">resource</span>=<span class="string">"org/jacoco/ant/antlib.xml"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">classpath</span> <span class="attr">path</span>=<span class="string">"$&#123;jacocoantPath&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">taskdef</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--dump任务:</span></div><div class="line"><span class="comment">      根据前面配置的ip地址，和端口号，</span></div><div class="line"><span class="comment">      访问目标tomcat服务，并生成.exec文件。--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"dump"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">jacoco:dump</span> <span class="attr">address</span>=<span class="string">"$&#123;server_ip&#125;"</span> <span class="attr">reset</span>=<span class="string">"false"</span> <span class="attr">destfile</span>=<span class="string">"$&#123;jacocoexecPath&#125;"</span> <span class="attr">port</span>=<span class="string">"$&#123;server_port&#125;"</span> <span class="attr">append</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!--jacoco任务:</span></div><div class="line"><span class="comment">      根据前面配置的源代码路径和.class文件路径，</span></div><div class="line"><span class="comment">      根据dump后，生成的.exec文件，生成最终的html覆盖率报告。--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"report"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">delete</span> <span class="attr">dir</span>=<span class="string">"$&#123;reportfolderPath&#125;"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">"$&#123;reportfolderPath&#125;"</span> /&gt;</span></div><div class="line">      </div><div class="line">      <span class="tag">&lt;<span class="name">jacoco:report</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">executiondata</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">file</span> <span class="attr">file</span>=<span class="string">"$&#123;jacocoexecPath&#125;"</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">executiondata</span>&gt;</span></div><div class="line">              </div><div class="line">          <span class="tag">&lt;<span class="name">structure</span> <span class="attr">name</span>=<span class="string">"JaCoCo Report"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"Check Order related"</span>&gt;</span>           </div><div class="line">                  <span class="tag">&lt;<span class="name">classfiles</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$&#123;checkOrderClasspath&#125;"</span> /&gt;</span></div><div class="line">                  <span class="tag">&lt;/<span class="name">classfiles</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">sourcefiles</span> <span class="attr">encoding</span>=<span class="string">"gbk"</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$&#123;checkOrderSrcpath&#125;"</span> /&gt;</span></div><div class="line">                  <span class="tag">&lt;/<span class="name">sourcefiles</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">structure</span>&gt;</span></div><div class="line"></div><div class="line">          <span class="tag">&lt;<span class="name">html</span> <span class="attr">destdir</span>=<span class="string">"$&#123;reportfolderPath&#125;"</span> <span class="attr">encoding</span>=<span class="string">"utf-8"</span> /&gt;</span>         </div><div class="line">      <span class="tag">&lt;/<span class="name">jacoco:report</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="执行并查看报告"><a href="#执行并查看报告" class="headerlink" title="执行并查看报告"></a>执行并查看报告</h4><p>执行编写好的jacocoAnt.xml</p><p><code>ant -f jacocoAnt.xml</code></p><p>生成报告的路径在配置的xml文件里标明。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>后期可配合Jenkins做可视化图表，在这里不表。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.cnblogs.com/dingtian/p/7754079.html" target="_blank" rel="external">jacoco + ant远程统计（tomcat/spring boot）服务的代码覆盖率</a><br><a href="https://www.cnblogs.com/wozijisun/p/9667849.html" target="_blank" rel="external">JaCoCo在Tomcat服务器上监控代码覆盖率的使用方法</a><br><a href="https://www.cnblogs.com/Ming8006/p/7569231.html" target="_blank" rel="external">Jacoco远程统计tomcat服务（Windows系统）的代码覆盖率</a><br><a href="https://blog.163yun.com/blog/article/173245675491745792" target="_blank" rel="external">代码覆盖率在手工测试上的实践</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jacoco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python沙盒环境</title>
      <link href="/2018/08/13/Python-Virtualenv-Environment/"/>
      <url>/2018/08/13/Python-Virtualenv-Environment/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Python的沙盒环境"><a href="#使用Python的沙盒环境" class="headerlink" title="使用Python的沙盒环境"></a>使用Python的沙盒环境</h2><h3 id="用途-amp-安装"><a href="#用途-amp-安装" class="headerlink" title="用途 &amp; 安装"></a>用途 &amp; 安装</h3><blockquote><p>virtualenv用于在一台机器上创建多个独立的python运行环境</p></blockquote><h4 id="多环境隔离的好处"><a href="#多环境隔离的好处" class="headerlink" title="多环境隔离的好处"></a>多环境隔离的好处</h4><ul><li>解决库之间的版本依赖，如同一系统不同应用依赖库的版本不同</li><li>解决权限限制，不需要root权限</li><li>尝试新的工具，而不用担心污染系统环境</li><li>部署应用方便，直接把开发环境的沙盒打包到生产环境即可</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>使用pip全局安装<br><code>[sudo] pip install virtualenv</code></p></li><li><p>更新<br><code>pip install virtualenv --upgrade</code></p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="创建新沙盒"><a href="#创建新沙盒" class="headerlink" title="创建新沙盒"></a>创建新沙盒</h4><ul><li><p>创建名为ENV的沙盒环境<br><code>virtualenv ENV</code></p></li><li><p>在默认创建过程中会依赖全局的site package，可直接参数不依赖<br><code>virtualenv ENV --no-site-packages</code></p></li><li><p>指定python版本（电脑中有python2.7 &amp; python3.6两个版本）<br><code>virtualenv ENV --python=python3.6</code></p></li></ul><h4 id="进入沙盒"><a href="#进入沙盒" class="headerlink" title="进入沙盒"></a>进入沙盒</h4><ul><li><p>linux &amp; mac</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ENV</div><div class="line"><span class="built_in">source</span> bin/activate</div></pre></td></tr></table></figure></li><li><p>windows</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\<span class="built_in">path</span>\to\env\Scripts\activate.bat</div></pre></td></tr></table></figure></li></ul><h4 id="验证是否进入沙盒"><a href="#验证是否进入沙盒" class="headerlink" title="验证是否进入沙盒"></a>验证是否进入沙盒</h4><p>通过命令符前即可判断，进入沙盒后，在提示符前多了虚拟环境的名称提示，如：</p><p><code>(ENV)....$</code></p><h4 id="退出沙盒环境"><a href="#退出沙盒环境" class="headerlink" title="退出沙盒环境"></a>退出沙盒环境</h4><ul><li><p>linux &amp; mac </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deactivate</div></pre></td></tr></table></figure></li><li><p>windows</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\<span class="built_in">path</span>\to\env\Scripts\deactivate.bat</div></pre></td></tr></table></figure></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="删除沙盒"><a href="#删除沙盒" class="headerlink" title="删除沙盒"></a>删除沙盒</h4><ul><li>只需要停用沙盒，并删除创建的沙盒文件夹即可<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">deactivate</div><div class="line">rm -r /path/to/ENV</div></pre></td></tr></table></figure></li></ul><h3 id="更多API请参照"><a href="#更多API请参照" class="headerlink" title="更多API请参照"></a>更多API请参照</h3><p><a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="external">Virtualenv API</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> virtualenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu下定时任务的使用</title>
      <link href="/2018/08/10/How-To-Use-Crontab-in-Ubuntu/"/>
      <url>/2018/08/10/How-To-Use-Crontab-in-Ubuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="Crontab"><a href="#Crontab" class="headerlink" title="Crontab"></a>Crontab</h2><p>cron最适合安排重复性任务。使用相关的实用程序通常可以更轻松地完成一次性任务的调度。</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="external">crontab wiki</a></p></blockquote><h3 id="crontab服务"><a href="#crontab服务" class="headerlink" title="crontab服务"></a>crontab服务</h3><h4 id="服务状态"><a href="#服务状态" class="headerlink" title="服务状态"></a>服务状态</h4><ul><li>查看 <code>/etc/init.d/cron status</code></li><li>启动 <code>/etc/init.d/cron start</code></li><li>停止 <code>/etc/init.d/cron stop</code></li><li>重启 <code>/etc/init.d/cron restart</code></li></ul><h4 id="开启日志服务"><a href="#开启日志服务" class="headerlink" title="开启日志服务"></a>开启日志服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/rsyslog.d/50-default.conf</div></pre></td></tr></table></figure><p>其中有一行 <code>#cron.*  /var/log/cron.log</code> ，把#号删除掉</p><p>重启日志服务 <code>sudo service rsyslog restart</code></p><h3 id="crontab编辑-amp-执行"><a href="#crontab编辑-amp-执行" class="headerlink" title="crontab编辑&amp;执行"></a>crontab编辑&amp;执行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">usage:crontab [-u user] file</div><div class="line">crontab [ -u user ] [ -i ] &#123; -e | -l | -r &#125;</div><div class="line">(default operation is replace, per 1003.2)</div><div class="line">-e(edit user<span class="string">'s crontab)</span></div><div class="line"><span class="string">-l(list user'</span>s crontab)</div><div class="line">-r(delete user<span class="string">'s crontab)</span></div><div class="line"><span class="string">-i(prompt before deleting user'</span>s crontab)</div></pre></td></tr></table></figure><h4 id="crontab-e"><a href="#crontab-e" class="headerlink" title="crontab -e"></a>crontab -e</h4><p><code>crontab -e</code>进入编辑模式，自行增加删除即可</p><p>默认使用的为当前用户权限</p><h4 id="条件用法"><a href="#条件用法" class="headerlink" title="条件用法"></a>条件用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># For example, you can run a backup of all your user accounts</span></div><div class="line"><span class="comment"># at 5 a.m every week with:</span></div><div class="line"><span class="comment"># 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/</span></div></pre></td></tr></table></figure><p>如图：</p><p><img src="http://image.candymami.com/18-8-10/62327893.jpg" alt="crontab简化示意"></p><blockquote><p>具体示例</p></blockquote><p><code>m h  dom mon dow   command</code></p><p><code>分　时　日　月　周　命令</code></p><p><code>* * * * * echo &#39;one minute execute&#39;</code> 表示每一分钟执行一次</p><p><code>/3 * * * *</code> 表示每隔3分钟执行一次</p><p><code>1 */3 * * *</code> 表示每隔3小时的执行一次的第1分钟执行</p><p><code>1 1 */3 * *</code> 表示每隔3天，当天的1点1分执行一次</p><p><code>1 10 * * 2,3,4</code> 表示每周2到周4的每天10点1分执行一次</p><p>转图，侵删</p><p><img src="http://image.candymami.com/18-8-10/48469475.jpg" alt="crontab示例"></p><h4 id="不发mail"><a href="#不发mail" class="headerlink" title="不发mail"></a>不发mail</h4><p>默认情况下，定时任务在执行完毕都是会发邮件的，如果没有配置，则会出现：</p><p><code>CRON[30536]: (CRON) info (No MTA installed, discarding output)</code></p><p>我们只执行单独脚本，不想让它发邮件，在命令后跟加 <code>&gt;/dev/null 2&gt;&amp;1</code></p><p>例如：<br><code>python3 /home/hanz/GitHubCom/Automated-Test-With-Python/lesson2/mathsuite.py &gt;/dev/null 2&gt;&amp;1</code></p><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><ul><li><p>未执行过定时任务，日志文件是不会生成的</p></li><li><p>crontab日志文件路径<code>/var/log/cron.log</code></p></li><li><p>查看滚动日志<code>tail -f /var/log/cron.log</code></p></li></ul><h3 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h3><h4 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h4><ul><li><p>crontab是区分用户权限的，比如你在用户<code>hanz</code>下，创建了定时任务，如果注销掉此用户，使用<code>root</code>这个用户登陆<br>那定时任务是不会执行的； </p></li><li><p>简单的查看：使用<code>hanz</code>用户<code>crontab -l</code>去查看，和<code>root</code>用户<code>crontab -l</code>去查看，看到的结果是不同的</p></li><li><p>在使用crontab执行脚本时，如果没有执行任务，请查看crontab和脚本是否开启执行权限</p></li></ul><h4 id="执行命令路径问题"><a href="#执行命令路径问题" class="headerlink" title="执行命令路径问题"></a>执行命令路径问题</h4><p>写执行命令时，尽量使用完整路径，原因是，如果你配置的环境变量不同，或者更换运行环境后，会出现问题。</p><p>命令本身和执行脚本同样适用，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/python3 /home/hanz/GitHubCom/Automated-Test-With-Python/lesson2/mathsuite.py</div></pre></td></tr></table></figure><p>而不是使用这种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python3 ~/GitHubCom/Automated-Test-With-Python/lesson2/mathsuite.py</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Puppeteer尝试</title>
      <link href="/2018/07/11/Getting-Started-With-Puppeteer-And-Chrome-Handless-For-Web-Scraping/"/>
      <url>/2018/07/11/Getting-Started-With-Puppeteer-And-Chrome-Handless-For-Web-Scraping/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB自动化之Puppeteer尝试"><a href="#WEB自动化之Puppeteer尝试" class="headerlink" title="WEB自动化之Puppeteer尝试"></a>WEB自动化之Puppeteer尝试</h2><h3 id="Chrome-and-Puppeteer"><a href="#Chrome-and-Puppeteer" class="headerlink" title="Chrome and Puppeteer"></a>Chrome and Puppeteer</h3><h4 id="教程文档"><a href="#教程文档" class="headerlink" title="教程文档"></a>教程文档</h4><p>网上已经有很成熟的文档，直接粘上来</p><p>文档写的很棒，非常容易上手</p><p><a href="https://medium.com/@e_mad_ehsan/getting-started-with-puppeteer-and-chrome-headless-for-web-scrapping-6bf5979dee3e" target="_blank" rel="external">medium版</a></p><p><a href="https://github.com/emadehsan/thal" target="_blank" rel="external">github版</a></p><p>另外把Puppeteer的API也放上</p><p><a href="https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md" target="_blank" rel="external">puppeteer api</a></p><h4 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h4><p>自己也动手撸了个DEMO，也放上来</p><p><a href="https://github.com/yangeren/puppeteer_demo" target="_blank" rel="external">Puppeteer DEMO</a></p><h4 id="使用后感受"><a href="#使用后感受" class="headerlink" title="使用后感受"></a>使用后感受</h4><p>平时web的自动化一般使用selenium+webdriver这种解决方案，适配的平台和浏览器各类比较多，算是一个大而全的方案</p><p>而Puppeteer只能运行于Chrome浏览器<br>不过都这个年代了，除非做浏览器兼容，不然还真用不到IE，Chrome已能占到半壁江山。</p><p>优点很明显</p><ul><li>速度非常快，对比selenium快了不少</li><li>环境容易搭建，好上手</li></ul><p>其他后续等用用再补充</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fiddler无法抓取iphone中https协议的接口</title>
      <link href="/2018/06/05/Fiddler-Unable-To-Crawl-Iphone-Packet/"/>
      <url>/2018/06/05/Fiddler-Unable-To-Crawl-Iphone-Packet/</url>
      
        <content type="html"><![CDATA[<h3 id="无法抓取iphone手机中HTTPS部分的接口"><a href="#无法抓取iphone手机中HTTPS部分的接口" class="headerlink" title="无法抓取iphone手机中HTTPS部分的接口"></a>无法抓取iphone手机中HTTPS部分的接口</h3><h4 id="常规设置"><a href="#常规设置" class="headerlink" title="常规设置"></a>常规设置</h4><h4 id="IOS-10-3版本后增加了设置"><a href="#IOS-10-3版本后增加了设置" class="headerlink" title="IOS 10.3版本后增加了设置"></a>IOS 10.3版本后增加了设置</h4><p>iOS 10.3升级之后，安装的证书默认是不启用的，需要手动去开启。</p><p>设置 –&gt; 通用 –&gt; 关于本机 –&gt; 证书信息设置; 将Fiddler的证书开关打开就行了</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再见！2017！</title>
      <link href="/2018/02/14/%E5%86%8D%E8%A7%81%EF%BC%812017%EF%BC%81/"/>
      <url>/2018/02/14/%E5%86%8D%E8%A7%81%EF%BC%812017%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="2017-有开心，有难过，有痛苦，有坚持，没有虚度，就此别过！"><a href="#2017-有开心，有难过，有痛苦，有坚持，没有虚度，就此别过！" class="headerlink" title="2017,有开心，有难过，有痛苦，有坚持，没有虚度，就此别过！"></a>2017,有开心，有难过，有痛苦，有坚持，没有虚度，就此别过！</h1><h3 id="大记事："><a href="#大记事：" class="headerlink" title="大记事："></a>大记事：</h3><ul><li>房屋装修完毕，可以住在自己的小家；</li><li>糖子跟着自己上幼儿园了，不用老人看，自己有些辛苦，但一家三口在一起，还是很幸福的！</li><li>买了车，因为要接送孩子，没买之前觉得没用，买了才知道，真方便；</li><li><p>老婆由家庭主妇到公司白领的转变，有了社会认同感；</p></li><li><p>比我大两轮的大伯伯过世，我对生命的脆弱感叹，同时对自己的抗风险能力感到焦虑；</p></li><li>我所在的项目《QCBJ》被移交其他部门了，好坏难辩，继续努力；</li></ul><blockquote><p>上面的每一项，对我们来说，都很艰难，但依旧撑过来了！我相信，未来会越来越好的！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2017 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Unable to find setter method for attribute: commandName报错问题</title>
      <link href="/2018/02/13/%E8%A7%A3%E5%86%B3Unable-to-find-setter-method-for-attribute-commandName%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
      <url>/2018/02/13/%E8%A7%A3%E5%86%B3Unable-to-find-setter-method-for-attribute-commandName%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Unable-to-find-setter-method-for-attribute-commandName"><a href="#Unable-to-find-setter-method-for-attribute-commandName" class="headerlink" title="Unable to find setter method for attribute: commandName"></a>Unable to find setter method for attribute: commandName</h1><h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><h4 id="发生原因"><a href="#发生原因" class="headerlink" title="发生原因"></a>发生原因</h4><p>根据Spring + MVC学习指南（第2版）第5章的例子进行跑项目，发现始终报一个错误：<br><code>Unable to find setter method for attribute: commandName</code><br>根据报错提示，为BookAddForm.jsp中的form标签出错了，从网上找各种方法不得解</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>想本着解决的态度看一下标签文件是怎么写的，于是点进<code>spring-form.tld</code>文件，<br>搜索了下<code>commandName</code>，于是看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;attribute&gt;</div><div class="line">&lt;description&gt;DEPRECATED: Use &quot;modelAttribute&quot; instead.&lt;/description&gt;</div><div class="line">&lt;name&gt;commandName&lt;/name&gt;</div><div class="line">&lt;required&gt;false&lt;/required&gt;</div><div class="line">&lt;rtexprvalue&gt;true&lt;/rtexprvalue&gt;</div><div class="line">&lt;/attribute&gt;</div></pre></td></tr></table></figure></p><p>原来<code>commandName</code>过旧，已经被<code>modelAttribute</code>替代了，于是更改jsp文件中的标签，解决。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django系统迁移</title>
      <link href="/2018/01/30/Django-System-Migration/"/>
      <url>/2018/01/30/Django-System-Migration/</url>
      
        <content type="html"><![CDATA[<h2 id="BJ自动化测试平台交接"><a href="#BJ自动化测试平台交接" class="headerlink" title="BJ自动化测试平台交接"></a>BJ自动化测试平台交接</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="部署系统版本"><a href="#部署系统版本" class="headerlink" title="部署系统版本"></a>部署系统版本</h4><p><code>ubuntu x86_64 GNU/Linux</code></p><h4 id="安装python依赖包"><a href="#安装python依赖包" class="headerlink" title="安装python依赖包"></a>安装python依赖包</h4><p><code>pip install -r requirements.txt</code></p><h4 id="安装Celery中间人：redis"><a href="#安装Celery中间人：redis" class="headerlink" title="安装Celery中间人：redis"></a>安装Celery中间人：redis</h4><ul><li>下载安装</li></ul><p><a href="https://redis.io/download" target="_blank" rel="external">https://redis.io/download</a></p><ul><li>配置可参考</li></ul><p><a href="http://docs.jinkan.org/docs/celery/getting-started/brokers/redis.html#broker-redis" target="_blank" rel="external">使用 Redis</a></p><ul><li>settings中对应的配置(都可在autohome_data_site/settings.py中找到)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">djcelery.setup_loader()</div><div class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></div><div class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379/8'</span></div><div class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/9'</span></div><div class="line">CELERY_IMPORTS = (<span class="string">"apps.app1.tasks"</span>, <span class="string">"apps.app2.tasks"</span>, <span class="string">"apps.app3.tasks"</span>,)</div></pre></td></tr></table></figure><h4 id="数据库编码更改UTF8"><a href="#数据库编码更改UTF8" class="headerlink" title="数据库编码更改UTF8"></a>数据库编码更改UTF8</h4><ul><li><p>进入数据库 <code>mysql -u root -p</code></p></li><li><p>使用命令<code>show variables like &#39;collation_%&#39;;</code> 和 <code>show variables like &#39;character_%&#39;;</code> 查看Mysql的字符集和排序方式</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. vim /etc/mysql/my.cnf</div><div class="line">2. character-set-server=utf8</div><div class="line">3. default-character-set=utf8</div><div class="line">4. service mysql restart</div></pre></td></tr></table></figure><ul><li>当修改完之后，可以再查看数据库当前字符集配置，你会发现server端的character变成utf-8了，这就说明大工告成了。</li></ul><h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ul><li><p>nginx的配置文件nginx.conf ()</p></li><li><p>uWSGI的配置文件wsgi.py (autohome_data_site/autohome_data_site/wsgi.py)</p></li><li><p>gunicorn启动文件 (autohome_data_site/bin/gunicorn_start.sh)</p></li></ul><h4 id="数据库内容迁移"><a href="#数据库内容迁移" class="headerlink" title="数据库内容迁移"></a>数据库内容迁移</h4><ul><li>导出数据库内容</li></ul><p><code>python manage.py dumpdata &gt; all.json # 指定导出的json名字</code></p><ul><li>执行数据导入前，我们还需要先将项目对应的数据库建立起来。</li></ul><blockquote><p>新创建的数据库名字最好和Django项目的settings文件中配置的数据库名字保持一致，不然将无法找到数据库。</p><p>settings中数据库配置为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">'baojia'</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'1'</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p></blockquote><ul><li>创建数据库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div><div class="line">create database; [数据库名称]</div><div class="line">show databases;</div></pre></td></tr></table></figure><ul><li>执行Django中的创建数据模型</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py migrate</div></pre></td></tr></table></figure><ul><li>将之前导出的数据库JSON文件导入即可(all.json在项目根目录下)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py loaddata all.json</div></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><ul><li>启动Django服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">～/autohome_data_site/bin/./gunicorn_start.sh</div></pre></td></tr></table></figure><ul><li>启动Celery服务</li></ul><blockquote><p>在项目目录下执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py celery worker -c 6 -l debug</div></pre></td></tr></table></figure><ul><li>启动Celery心跳</li></ul><blockquote><p>在项目目录下执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py celery beat</div></pre></td></tr></table></figure><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><table><thead><tr><th>主目录</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td>apps</td><td style="text-align:center">celery beat 定时队列任务</td></tr><tr><td>autohome</td><td style="text-align:center">对应后台autohome项目，主要为基础数据查询</td></tr><tr><td>autohome_data_site</td><td style="text-align:center">系统目录</td></tr><tr><td>&#124;–settings.py</td><td style="text-align:center">django系统配置文件</td></tr><tr><td>BaseFunc</td><td style="text-align:center">一些公共方法</td></tr><tr><td>bin</td><td style="text-align:center">执行脚本</td></tr><tr><td>CheckUrl</td><td style="text-align:center">早期检查url的小脚本</td></tr><tr><td>document</td><td style="text-align:center">作废</td></tr><tr><td>interface</td><td style="text-align:center">接口测试功能都在此项目中</td></tr><tr><td>logs</td><td style="text-align:center">日志目录，可迁移</td></tr><tr><td>media</td><td style="text-align:center">nginx映射静态目录</td></tr><tr><td>moco</td><td style="text-align:center">mock数据项目</td></tr><tr><td>pvtest</td><td style="text-align:center">与客户端配合自动测试pv签的项目</td></tr><tr><td>run</td><td style="text-align:center">gunicorn启动文件</td></tr><tr><td>static</td><td style="text-align:center">静态文件,js,css</td></tr><tr><td>templates</td><td style="text-align:center">html模板文件</td></tr><tr><td>TestCase</td><td style="text-align:center">业务类测试用例</td></tr><tr><td>&#124;–case</td><td style="text-align:center">业务脚本</td></tr><tr><td>&#124;–gen_script</td><td style="text-align:center">生成多数据测试用例脚本</td></tr><tr><td>&#124;–priceapiactivities</td><td style="text-align:center">报价活动测试脚本</td></tr><tr><td>&#124;–report</td><td style="text-align:center">业务测试报告</td></tr></tbody></table><h3 id="需要的服务"><a href="#需要的服务" class="headerlink" title="需要的服务"></a>需要的服务</h3><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">功能</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">django</td><td style="text-align:left">站点</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">gunicorn</td><td style="text-align:left">内部分发服务</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">nginx</td><td style="text-align:left">静态外部服务器</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">supervisor</td><td style="text-align:left">任务监控</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">celery</td><td style="text-align:left">定时任务</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">redis</td><td style="text-align:left">nosql快速缓存</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交接 </tag>
            
            <tag> priceapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何获取python脚本所在目录位置</title>
      <link href="/2017/12/27/How-To-Get-The-Real-Path-Of-Python-Script/"/>
      <url>/2017/12/27/How-To-Get-The-Real-Path-Of-Python-Script/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="comment"># 获取文件路径</span></div><div class="line">a = os.path.realpath(__file__)</div><div class="line"><span class="comment"># 将路径split开</span></div><div class="line">b = os.path.split(a)</div><div class="line"><span class="comment"># 取第一个位置，即路径，第二个位置为文件名</span></div><div class="line">c = b[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment"># 一行即</span></div><div class="line">os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看&amp;修改ssh的端口号</title>
      <link href="/2017/12/18/%E6%9F%A5%E7%9C%8B-%E4%BF%AE%E6%94%B9ssh%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7/"/>
      <url>/2017/12/18/%E6%9F%A5%E7%9C%8B-%E4%BF%AE%E6%94%B9ssh%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>1、本机查看开启的端口及进程<br>netstat -ntlp<br>2、远程扫描<br>nmap -sS 192.168.1.2 -p22<br>3、远程telnet<br>telnet ip 22</p><p><a href="http://jackxiang.com/post/2938/" target="_blank" rel="external">http://jackxiang.com/post/2938/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>生活从来不是那么简单</title>
      <link href="/2017/12/05/Life-Is-Hard/"/>
      <url>/2017/12/05/Life-Is-Hard/</url>
      
        <content type="html"><![CDATA[<h1 id="生活，从来不是那么简单"><a href="#生活，从来不是那么简单" class="headerlink" title="生活，从来不是那么简单"></a>生活，从来不是那么简单</h1><h3 id="拼在北上"><a href="#拼在北上" class="headerlink" title="拼在北上"></a>拼在北上</h3><h4 id="早"><a href="#早" class="headerlink" title="早"></a>早</h4><p>习惯了闹铃从6：40就开始一遍遍的响，而我又熟练的一遍遍的关掉；<br>糖妈照例比我醒的早，早早起来收拾着自己，然后又温柔的叫着小糖子：该起床啦～小糖子！～<br>糖子睁开眼，咧着嘴，复着每天早上的第一句话：今天还上幼儿园吗？</p><p>真是让我又想笑又想哭，孩子太辛苦了。</p><p>我们夫妻俩北上工作，怕孩子成了留守儿童，坚决带着孩子一起来闯荡，这样做的家庭并不在少数。<br>但由于双方家庭原因，我们双方的父母并不能来照顾孩子，这就导致了一个问题，如何平衡自己的时间？！</p><h4 id="争分夺秒"><a href="#争分夺秒" class="headerlink" title="争分夺秒"></a>争分夺秒</h4><p>为了能自己带糖子，而且不耽误上班，我们制定了一系列计划，包括：幼儿园选址、买车、工作的时间等，<br>特别是在时间上，更是每天早上争分夺秒，几点起床，几点出门，送到园里后几点返程，几点到地铁口，都有准确<br>的时间点，如果晚于这个时间点，那么结果就是上班迟到。</p><p>而下班呢，糖子妈比我早下班，而且回家时间也比我短，所以她去接；<br>但是幼儿园的正常下园时间是5点整，而糖妈最早也只能5：30出公司，到幼儿园就六点十几分了；<br>虽然幼儿园是有托管服务的，但一个班的小朋友，大家都早早的放学回家了，只留下糖子自己，有时候还会有一两个<br>小朋友，糖子是会感觉到孤独的，久儿久之不知会不会有其他的问题；<br>而糖妈这边，也不是每次都能正点下班，如果因为工作晚一些，那么就导致接孩子的时间更加晚，路上的车也更堵。</p><h4 id="无解"><a href="#无解" class="headerlink" title="无解"></a>无解</h4><p>对于这些现实，目前我是无解的。<br>考虑过找保姆，但频繁出现的保姆虐童事件，就够够的了；家里亲人也没人能帮上忙，这事儿，只能靠自己。<br>而对于糖子，从小就经历一些事件，希望她可以看到她想要的那个世界。</p><h4 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h4><p>不管多难，把糖子带在自己身边。<br>教会孩子如何做人，再留给孩子生存的资本。</p><p>所以我们说，现在的吃苦，是为了将来。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下dig nslookup 的简单使用</title>
      <link href="/2017/12/01/linux%E4%B8%8Bdig-nslookup-%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/12/01/linux%E4%B8%8Bdig-nslookup-%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使GitHub Pages 自定义域名支持SSL</title>
      <link href="/2017/12/01/%E4%BD%BFGitHub-Pages-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E6%94%AF%E6%8C%81SSL/"/>
      <url>/2017/12/01/%E4%BD%BFGitHub-Pages-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E6%94%AF%E6%8C%81SSL/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>互联网与我的生活</title>
      <link href="/2017/11/29/Internet-And-My-Life/"/>
      <url>/2017/11/29/Internet-And-My-Life/</url>
      
        <content type="html"><![CDATA[<h2 id="互联网与我的生活-Internet-And-My-Life"><a href="#互联网与我的生活-Internet-And-My-Life" class="headerlink" title="互联网与我的生活/Internet And My Life"></a>互联网与我的生活/Internet And My Life</h2><h3 id="我们都驰骋在信息高速公路上"><a href="#我们都驰骋在信息高速公路上" class="headerlink" title="我们都驰骋在信息高速公路上"></a>我们都驰骋在信息高速公路上</h3><p>从二十一世纪初期(2000年-2001年)互联网泡沫消退开始，互联网以及互联网周边呈现出爆发式的发展与增长并覆盖到了各行各业，我们所有人也都被挂在了<br>“网”上，我们通过网络肆意的驰骋，驰骋在这连接你我的互联网高速公路上。</p><h4 id="手机，我身体的一部分"><a href="#手机，我身体的一部分" class="headerlink" title="手机，我身体的一部分"></a>手机，我身体的一部分</h4><p>每天早上，被手机闹钟叫醒；出门后买个早餐，用手机扫码付款；吃着早餐，刷着朋友圈，看着新闻资讯，顺便在评论区留下自己的想法，让其与其他人的思想<br>进行碰撞；到了单位，用手机钉钉打卡，看一下自己这一个月共迟到了几次，算计着会不会被扣工资。。。。。。 手机，在我们生活中扮演着重要的角色，但<br>仅靠它无法完成，而互联网做为载体，实现了这一切看似不可能实现的情景。</p><h4 id="微信的崛起"><a href="#微信的崛起" class="headerlink" title="微信的崛起"></a>微信的崛起</h4><h4 id="街边的煎饼摊儿与移动支付"><a href="#街边的煎饼摊儿与移动支付" class="headerlink" title="街边的煎饼摊儿与移动支付"></a>街边的煎饼摊儿与移动支付</h4><h4 id="云-CLUD"><a href="#云-CLUD" class="headerlink" title="云 CLUD"></a>云 CLUD</h4><h4 id="自动充值的手机费与自动支付的停车费"><a href="#自动充值的手机费与自动支付的停车费" class="headerlink" title="自动充值的手机费与自动支付的停车费"></a>自动充值的手机费与自动支付的停车费</h4><h4 id="双11的背后"><a href="#双11的背后" class="headerlink" title="双11的背后"></a>双11的背后</h4><h4 id="社区服务与物流的兴起"><a href="#社区服务与物流的兴起" class="headerlink" title="社区服务与物流的兴起"></a>社区服务与物流的兴起</h4><h4 id="共享经济的崛起"><a href="#共享经济的崛起" class="headerlink" title="共享经济的崛起"></a>共享经济的崛起</h4><p>共享单车，如小黄车、摩拜单车<br>共享汽车，如分时共享汽车<br>共享充电宝，如 街电、Hi电</p><h4 id="大数据与数据分析"><a href="#大数据与数据分析" class="headerlink" title="大数据与数据分析"></a>大数据与数据分析</h4><p>新闻类的智能推荐，如今日头条，网易新闻<br>TO C类的猜你想要，如淘宝、京东</p><h4 id="智能家居-amp-物联网-Internet-of-Things"><a href="#智能家居-amp-物联网-Internet-of-Things" class="headerlink" title="智能家居 &amp; 物联网 Internet of Things"></a>智能家居 &amp; 物联网 Internet of Things</h4><p>智能路由，小水滴监控摄像头，智能电视， 盒马生鲜， 多点自助结帐<br>电锁门禁， 对讲系统， 家庭网络， 运动健康监测<br>花草自动浇灌，宠物照看与管制 无人超市 </p><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E8%81%94%E7%BD%91" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E7%89%A9%E8%81%94%E7%BD%91</a></p></blockquote><h4 id="网络募捐、公益平台、热点新闻与网络暴力"><a href="#网络募捐、公益平台、热点新闻与网络暴力" class="headerlink" title="网络募捐、公益平台、热点新闻与网络暴力"></a>网络募捐、公益平台、热点新闻与网络暴力</h4><p>互联网的便利，使得以前很难做到的事情，也变得容易起来。<br>例如网络募捐在移动支付的基础上，拥有比现场募捐更便利的条件与更广泛的人群，可以在短时间内快速传播，并募捐到大量善款，必然会挽救更多的困难人群；<br>而公益平台，也因为有了互联网，才能让我们了解到大山里的孩子、留守儿童的日常，让我们可以方便快捷的尽自己的一份力，让这个世界变的更加美好。<br>而且互联网不仅承载着便利，也让全民监督成为了现实。<br>最近不得不说的大事件，虐童丑闻。受害者家长将相关事件经过与视频上传至网络，短时间内受到了全社会的关注和讨论，家长们都对自己的孩<br>子询问并做这方面的再教育，使孩子在面临此类情况时知道如何处理。互联网及时的传播，使得丑恶在最短时间得到曝光，让我们有更多的时间进行预防和解决。</p><p>我庆幸自己生在了互联网的时代，见证了以互联网为基础的各行各业的发展，而我也将在互联网社会中做出自己的贡献。<br>互联网，连接你我。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网与我的生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高分电影之蓝色星球</title>
      <link href="/2017/11/28/BBC-The-Blue-Planet/"/>
      <url>/2017/11/28/BBC-The-Blue-Planet/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝色星球-BBC-The-Blue-Planet"><a href="#蓝色星球-BBC-The-Blue-Planet" class="headerlink" title="蓝色星球 / BBC- The Blue Planet"></a>蓝色星球 / BBC- The Blue Planet</h2><p><img src="http://image.candymami.com/17-11-28/30567720.jpg" alt="蓝色星球"></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> 高分电影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高分电影 </tag>
            
            <tag> 蓝色星球 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring In Action 4</title>
      <link href="/2017/11/28/Spring-In-Action-4/"/>
      <url>/2017/11/28/Spring-In-Action-4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络与应用-结课报告</title>
      <link href="/2017/11/27/Computer-Networks-and-Applications%20-%20Closing-Report/"/>
      <url>/2017/11/27/Computer-Networks-and-Applications%20-%20Closing-Report/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络与应用-结课报告"><a href="#计算机网络与应用-结课报告" class="headerlink" title="计算机网络与应用-结课报告"></a>计算机网络与应用-结课报告</h2><h3 id="具体要求"><a href="#具体要求" class="headerlink" title="具体要求"></a>具体要求</h3><h4 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h4><ol><li>提交的结课报告需附封面（封面格式见附件2）。报告上交时需装订整齐（角订），如未装订，造成内容缺失影响成绩后果自负。</li><li>报告字数要求不少于2000字，必须A4纸手写。</li></ol><h4 id="提交时间及方式-："><a href="#提交时间及方式-：" class="headerlink" title="提交时间及方式 ："></a>提交时间及方式 ：</h4><ol><li>2017年12月3日16:00-17:00之间</li></ol><h4 id="重点提示："><a href="#重点提示：" class="headerlink" title="重点提示："></a>重点提示：</h4><ol><li>报告内容如打印、抄袭或者雷同者以零分处理。</li><li>报告晚交或者不交本门课程成绩以零分登记。</li></ol><h3 id="附件1："><a href="#附件1：" class="headerlink" title="附件1："></a>附件1：</h3><p>列举计算机网络与自己生活密切联系的具体方面，要详细列举其中用到的计算机网络具体技术，其概念是什么，功能是什么，以及此技术是如何满足了自己生活的需要。<br>比如通过网络进行QQ聊天，用的传输层协议是UDP，每台终端有自己的IP地址等。</p><h3 id="附件2"><a href="#附件2" class="headerlink" title="附件2"></a>附件2</h3><p>北京航空航天大学继续教育学院<br>《计算机网络与应用》结课报告<br>专 业：<br>学 号：<br>姓 名：</p><h4 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h4><ol><li>题目：计算机网络与我生活的切身联系</li><li>要求至少列举10个方面，总字数不少于2000字。</li><li>每个方面总字数不少于200字，至少提到两种涉及到的计算机网络技术。</li><li>A4纸手写。</li></ol><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="计算机网络与我生活的切身联系"><a href="#计算机网络与我生活的切身联系" class="headerlink" title="计算机网络与我生活的切身联系"></a>计算机网络与我生活的切身联系</h3><h4 id="计算机网络是什么"><a href="#计算机网络是什么" class="headerlink" title="计算机网络是什么"></a>计算机网络是什么</h4><p>计算机网络通常人们说的网路就是指电脑网路，也就是讯息网路，是利用通信设备和线路将地理位置不同的、功能独立的多个计算机系统连接起来，以功能完善的网络软件实现网络的硬件、软件及资源共享和信息传递的系统。简单的说即连接两台或多台计算机进行通信的系统。<br>如今每个人基本都拥有一台或多台计算机，每天都在网络上进行交流，工作，学习，可以说，计算机网络与我们的生活密切相关。</p><h4 id="工作单位的网络与服务器"><a href="#工作单位的网络与服务器" class="headerlink" title="工作单位的网络与服务器"></a>工作单位的网络与服务器</h4><p>计算机网络的发展和应用改变了传统企业的管理模式和经营模式。在现代企业中企业信息网络得到了广泛的应用。它是一种专门用于企业内部信息管理的计算机网络，覆盖企业生产经营管理的各个部门，在整个企业范围内提供硬件、软件和信息资源共享。<br>企业信息网络已经成为现代企业的重要特征，通过企业信息网络，现代企业摆脱了地理位置带来的不便，对广泛分布在各地的业务进行及时、统一的管理和控制，并实现在全企业内部的信息资源共享，从而大大提高了企业在市场中的竞争能力。<br>比如我们公司自己搭建的内部网络，同时连接了北京地区和上海地区的办公区域，使不同地域的同事在数据传输、信息交互时做到了便捷的沟通，大大的提升了效率。</p><h4 id="物联网的发展"><a href="#物联网的发展" class="headerlink" title="物联网的发展"></a>物联网的发展</h4><p>物联网在计算机网络的应用上的发展也突飞猛进，近期，小米科技董事长兼CEO雷军表示小米初步完成了当初的目标，现在要开启小米IoT战略第二阶段。<br>2015年初小米首次披露了以手机为核心连接所有设备的消息IoT战略，3年时间过去了，小米IoT平台联网设备已经超过了8500万，接入设备超越800种，合作伙伴超过400家，雷军认为小米已经成为全球最大智能硬件IoT平台。<br>物联网的快速发展，使人们的生活更加便捷和丰富多彩。</p><h4 id="远程教育的兴起"><a href="#远程教育的兴起" class="headerlink" title="远程教育的兴起"></a>远程教育的兴起</h4><p>随着计算机的应用与普及，计算机网络在教育行业刮起了一阵巨风，几乎每一个教育机构都在应用着。在传统的教学模式中，学生只是被动地接受知识，不仅影响了学生获取知识的效果，也遏制了学生的学习兴趣。<br>计算机网络的发展，使其在教育领域中的运用也极其广泛，从教育管理、后勤服务再到教师教学、学生自主学习，都能够在计算机网络上进行。</p><p>远程教育是计算机网络在教育领域应用的集中体现。通过网络共享教育资源，把优秀的教学资源传播出去，可以帮助一些资源较匮乏，教育比较落后的学校，一定程度的缓解目前教育发展不均衡的现状。<br>学生可以根据自己的需要从网上找到自己所需要的内容，也可以在线向老师提出问题，在网上提交作业和完成考试，提高了学习效率。<br>通过网络与教育的结合，学生的受教育的过程变得更加自主。<br>网络打破了传统教育的单一模式，实现了教育资源的共享，促进学习的个性化，增加了个人受教育的机会。<br>相信今后计算机网络在教育中的应用会更加广泛，为实现教育公平贡献力量。</p><h4 id="现代医疗领域"><a href="#现代医疗领域" class="headerlink" title="现代医疗领域"></a>现代医疗领域</h4><p>计算机网络技术发展也给医疗领域带来了巨大的变革。建设信息化医院，能使得医疗信息高度共享、减轻医务人员的劳动强度、优化患者诊疗流程和提高对患者的治疗速度。<br>计算机网络在医学多媒体教学上得到广泛的应用，多媒体教学具有自然直观的特点和优点，能按照教学思路以方便、灵活、图文并茂的方式传授给学生知识。<br>在远程医学上，利用远程通讯技术，以及双向传送资料（包括病例、心电图、脑电图等）、声音（包括心音、呼吸音等）、图像（包括X线片、CT片、超声图像等）的方式，开展远程医疗会诊活动，让病人在节约大量的时间和费用的同时可以得到专家的远程会诊咨询服务，改善医疗资源的配置，降低成本。<br>我国已在上海、苏州等医院利用计算机网络进行手术图像信息在万给共享，解放军医学图书馆与第四军医大学合作，1995年就成功地为第四军医大学传送了医学资料，进行了病人远程会诊等。 </p><h4 id="个人电脑中的杀毒软件和防火墙"><a href="#个人电脑中的杀毒软件和防火墙" class="headerlink" title="个人电脑中的杀毒软件和防火墙"></a>个人电脑中的杀毒软件和防火墙</h4><h4 id="网络分析与抓包技术"><a href="#网络分析与抓包技术" class="headerlink" title="网络分析与抓包技术"></a>网络分析与抓包技术</h4><p>计算机网络的传输，在大多数人眼里，都是宏观和模糊不清的，并不能像一个物品那样直观的理解。而我在工作中接触到一些网络抓包与分析技术，则让我对计算机网络有更清晰的认识。<br>通过一些抓包工具如：wireshark，在服务端与终端之前做一层代理服务，则可将终端发出的请求和收到的请求都记录下来，可以清楚的看到TCP协议的三次握手，请求接口指向的IP地址和端口号，TCP协议的四层结构即可展示出来。<br>抓包技术对于更清楚的认识计算机网络有很大的帮助。</p><h4 id="即时通讯与直播平台"><a href="#即时通讯与直播平台" class="headerlink" title="即时通讯与直播平台"></a>即时通讯与直播平台</h4><p>各行各业都借助着计算机网络飞速发展，通讯类产品也不例外。之前我们互相交流大量的使用电话和短信沟通，想同时说着话并且看着图片简直是不可能的事情，而即时通讯则帮助我们实现了。<br>例如QQ聊天，它也应用了计算机网络，通过UDP协议进行数据传输，因为UDP不是面向连接的，所以才能在网络状态差的情况支持众多用户群体。<br>而随着宽带的发展，现在网速都得到了很大的提升，可以在短时间内传输更多的数据，而且随着人们对网络社交的渴望，直播平台则应运面生。<br>运用计算机网络，直播平台上的每一个终端节点都是一个IP，而主播在满足是IP的前提下，更像是一个中继器，因为大量的独立用户都在观看主播的视频。<br>计算机网络给我们的社交带来了翻天覆地的变化。</p><h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>总之，计算机网络技术已经渗透到生活中的各个领域，给我们的生活带来了极大的便利，未来计算机网络将更加人性化，更加适应人们的生活。网络技术的高<br>速发展为各行业的生命注入了新的血液，同时对各行业的发展也是一个考验，人们将更加离不开网络，而计算机也将更好地服务于人类，使人们的生活更加丰富。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络与应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之单例模式</title>
      <link href="/2017/11/24/Single-mode-Java-Design-Pattern/"/>
      <url>/2017/11/24/Single-mode-Java-Design-Pattern/</url>
      
        <content type="html"><![CDATA[<h2 id="JAVA设计模式-–-单例"><a href="#JAVA设计模式-–-单例" class="headerlink" title="JAVA设计模式 – 单例"></a>JAVA设计模式 – 单例</h2><h3 id="单例的实现"><a href="#单例的实现" class="headerlink" title="单例的实现"></a>单例的实现</h3><h4 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h4><h4 id="延迟加载实现"><a href="#延迟加载实现" class="headerlink" title="延迟加载实现"></a>延迟加载实现</h4><h4 id="多线程支持"><a href="#多线程支持" class="headerlink" title="多线程支持"></a>多线程支持</h4><h4 id="解决性能问题"><a href="#解决性能问题" class="headerlink" title="解决性能问题"></a>解决性能问题</h4><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Head First Spring Boot</title>
      <link href="/2017/11/21/Hand-First-Spring-Boot/"/>
      <url>/2017/11/21/Hand-First-Spring-Boot/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Boot-And-Hello-World"><a href="#Spring-Boot-And-Hello-World" class="headerlink" title="Spring Boot And Hello World"></a>Spring Boot And Hello World</h2><h3 id="环境与依赖"><a href="#环境与依赖" class="headerlink" title="环境与依赖"></a>环境与依赖</h3><p>### </p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 PyCharm 中设置 Python 代码模板</title>
      <link href="/2017/11/07/How-To-Set-Pycharm-Model/"/>
      <url>/2017/11/07/How-To-Set-Pycharm-Model/</url>
      
        <content type="html"><![CDATA[<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><blockquote><p>设置 File &gt; Settings &gt; File and Code Template &gt; Python Script</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Created by author on $DATE</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure><p>可使用的环境变量： <code>${DATE}</code>, <code>${TIME}</code>等。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pycharm </tag>
            
            <tag> setting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 切换远程仓库地址</title>
      <link href="/2017/11/06/git-switch-the-remote-repository-address/"/>
      <url>/2017/11/06/git-switch-the-remote-repository-address/</url>
      
        <content type="html"><![CDATA[<h1 id="git-切换远程仓库地址"><a href="#git-切换远程仓库地址" class="headerlink" title="git 切换远程仓库地址"></a>git 切换远程仓库地址</h1><h3 id="修改命令"><a href="#修改命令" class="headerlink" title="修改命令"></a>修改命令</h3><p>git remote set-url origin url</p><h3 id="先删后加"><a href="#先删后加" class="headerlink" title="先删后加"></a>先删后加</h3><p>git remote rm origin<br>git remote add origin git@github.com:yours/mysite.git</p><h3 id="修改config文件"><a href="#修改config文件" class="headerlink" title="修改config文件"></a>修改config文件</h3><p>如果你的项目有加入版本控制，那可以到项目根目录下，查看隐藏文件夹，<br>发现.git文件夹，找到其中的config文件，就可以修改其中的git remote origin地址了。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客自动化发布</title>
      <link href="/2017/11/06/hexo-blog-using-travis-CI-automation-release/"/>
      <url>/2017/11/06/hexo-blog-using-travis-CI-automation-release/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo借助travis-ci自动发布博客"><a href="#Hexo借助travis-ci自动发布博客" class="headerlink" title="Hexo借助travis-ci自动发布博客"></a>Hexo借助travis-ci自动发布博客</h1><p><img src="http://image.candymami.com/17-11-6/87226994.jpg" alt="travis ci"></p><p>###认证</p><h4 id="安装travis"><a href="#安装travis" class="headerlink" title="安装travis"></a>安装travis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install travis</div></pre></td></tr></table></figure><h4 id="生成source密钥"><a href="#生成source密钥" class="headerlink" title="生成source密钥"></a>生成source密钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">travis encrypt -r owner/repo GH_Token=Your_Personal_Access_Token</div></pre></td></tr></table></figure><h3 id="使用同一仓库的分支做为源码库"><a href="#使用同一仓库的分支做为源码库" class="headerlink" title="使用同一仓库的分支做为源码库"></a>使用同一仓库的分支做为源码库</h3><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><h4 id="安装hexo-cli后无法使用"><a href="#安装hexo-cli后无法使用" class="headerlink" title="安装hexo-cli后无法使用"></a>安装hexo-cli后无法使用</h4><h4 id="无法push到仓库"><a href="#无法push到仓库" class="headerlink" title="无法push到仓库"></a>无法push到仓库</h4>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> auto deploy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用urlparse修改url</title>
      <link href="/2017/11/06/Use-urlparse-to-change-the-url/"/>
      <url>/2017/11/06/Use-urlparse-to-change-the-url/</url>
      
        <content type="html"><![CDATA[<h1 id="使用urlparse修改url中的各各部分"><a href="#使用urlparse修改url中的各各部分" class="headerlink" title="使用urlparse修改url中的各各部分"></a>使用urlparse修改url中的各各部分</h1><h2 id="举例来说明"><a href="#举例来说明" class="headerlink" title="举例来说明"></a>举例来说明</h2><p><img src="http://image.candymami.com/17-9-26/66144228.jpg" alt=""></p><p><code>url=&quot;https://stackoverflow.com/questions/21628852/changing-hostname-in-a-url&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 引入urlparse包</span></div><div class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> urlparse </div><div class="line"></div><div class="line"><span class="comment"># 实例化url链接，变为urlparse对象</span></div><div class="line">In [<span class="number">3</span>]: u = urlparse.urlparse(url)</div><div class="line"></div><div class="line"><span class="comment"># 查看u中所包含的</span></div><div class="line">In [<span class="number">4</span>]: u</div><div class="line">Out[<span class="number">4</span>]: ParseResult(scheme=<span class="string">'https'</span>, netloc=<span class="string">'stackoverflow.com'</span>, path=<span class="string">'/questions/21628852/changing-hostname-in-a-url'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</div><div class="line"></div><div class="line"><span class="comment"># 将scheme进行替换，并赋值给u_change_scheme</span></div><div class="line">In [<span class="number">5</span>]: u_change_scheme = u._replace(scheme=<span class="string">"ftp"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 查看u_change_scheme对象</span></div><div class="line">In [<span class="number">6</span>]: u_change_scheme</div><div class="line">Out[<span class="number">6</span>]: ParseResult(scheme=<span class="string">'ftp'</span>, netloc=<span class="string">'stackoverflow.com'</span>, path=<span class="string">'/questions/21628852/changing-hostname-in-a-url'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</div><div class="line"></div><div class="line"><span class="comment"># geturl查看，已经变为想更改的scheme</span></div><div class="line">In [<span class="number">7</span>]: u_change_scheme.geturl()</div><div class="line">Out[<span class="number">7</span>]: <span class="string">'ftp://stackoverflow.com/questions/21628852/changing-hostname-in-a-url'</span></div><div class="line"></div><div class="line"><span class="comment"># 可一次更改多个值</span></div><div class="line">In [<span class="number">8</span>]: u_change_scheme_and_netloc = u._replace(scheme=<span class="string">"http"</span>, netloc=<span class="string">"candypapi.com"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 查看geturl</span></div><div class="line">In [<span class="number">9</span>]: u_change_scheme_and_netloc.geturl()</div><div class="line">Out[<span class="number">9</span>]: <span class="string">'http://candypapi.com/questions/21628852/changing-hostname-in-a-url'</span></div></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://stackoverflow.com/questions/21628852/changing-hostname-in-a-url" target="_blank" rel="external">changing-hostname-in-a-url</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> urlparse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python外部脚本调用Django项目的Model</title>
      <link href="/2017/11/02/Python-external-script-calls-the-Django-project-model-table/"/>
      <url>/2017/11/02/Python-external-script-calls-the-Django-project-model-table/</url>
      
        <content type="html"><![CDATA[<h1 id="Python外部脚本调用Django项目的Model"><a href="#Python外部脚本调用Django项目的Model" class="headerlink" title="Python外部脚本调用Django项目的Model"></a>Python外部脚本调用Django项目的Model</h1><p><img src="http://image.candymami.com/17-11-2/41607477.jpg" alt="django cycle"></p><h2 id="在django中，python脚本状态下进行调用models"><a href="#在django中，python脚本状态下进行调用models" class="headerlink" title="在django中，python脚本状态下进行调用models"></a>在django中，python脚本状态下进行调用models</h2><p>我们会有这样的场景，开着项目代码，想执行一个功能简单的脚本，但又想使用django简单的models调用，<br>两种方法，均可使用：</p><h3 id="python-console"><a href="#python-console" class="headerlink" title="python console"></a>python console</h3><blockquote><p>十分简单的脚本，推荐这种调试方式</p></blockquote><p>可以选择在<code>python console</code>下进行调试脚本，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py shell</div></pre></td></tr></table></figure><p>因为在此环境下，自动加载了<code>django</code>的项目路径至环境变量中<br>如果你使用的<code>pycharm</code>，可以看一下他的python console:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys; print(<span class="string">'Python %s on %s'</span> % (sys.version, sys.platform))</div><div class="line"><span class="keyword">import</span> django; print(<span class="string">'Django %s'</span> % django.get_version())</div><div class="line">sys.path.extend([<span class="string">'/home/yours/workspace/PycharmProjects/your_blog'</span>, <span class="string">'/home/hanz/programs/pycharm-2017.1.1/helpers/pycharm'</span>, <span class="string">'/home/yours/programs/pycharm-2017.1.1/helpers/pydev'</span>])</div><div class="line"><span class="keyword">if</span> <span class="string">'setup'</span> <span class="keyword">in</span> dir(django): django.setup()</div><div class="line"><span class="keyword">import</span> django_manage_shell; django_manage_shell.run(<span class="string">"/home/yours/workspace/PycharmProjects/your_blog"</span>)</div><div class="line">Python <span class="number">2.7</span><span class="number">.10</span> (default, Oct <span class="number">14</span> <span class="number">2015</span>, <span class="number">16</span>:<span class="number">09</span>:<span class="number">02</span>) </div><div class="line">[GCC <span class="number">5.2</span><span class="number">.1</span> <span class="number">20151010</span>] on linux2</div><div class="line">Django <span class="number">1.9</span><span class="number">.5</span></div></pre></td></tr></table></figure><h3 id="在python脚本中引入环境变量"><a href="#在python脚本中引入环境变量" class="headerlink" title="在python脚本中引入环境变量"></a>在python脚本中引入环境变量</h3><blockquote><p>如何脚本有一定工作量，建议使用此种方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> django</div><div class="line">sys.path.append(<span class="string">'/home/yous/workspace/PycharmProjects/your_blog'</span>) <span class="comment"># 将项目路径添加到系统搜寻路径当中</span></div><div class="line">os.environ[<span class="string">'DJANGO_SETTINGS_MODULE'</span>] = <span class="string">'your_blog.settings'</span> <span class="comment"># 设置项目的配置文件</span></div><div class="line">django.setup() <span class="comment"># 加载项目配置</span></div></pre></td></tr></table></figure><p>加入以上代码后，脚本可正常引用项目中的model</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> your_proj.models <span class="keyword">import</span> Series</div><div class="line">series_ids = Series.objects.values(<span class="string">"series_id"</span>)</div></pre></td></tr></table></figure><p>完美！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> model </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下一句话Kill进程</title>
      <link href="/2017/06/08/many-way-to-killed-ps-in-linux/"/>
      <url>/2017/06/08/many-way-to-killed-ps-in-linux/</url>
      
        <content type="html"><![CDATA[<h3 id="查询tomcat进程"><a href="#查询tomcat进程" class="headerlink" title="查询tomcat进程"></a>查询tomcat进程</h3><p><img src="http://image.candymami.com/17-9-26/39733243.jpg" alt="Control-Linux-Processes"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep tomcat</div><div class="line">ps -aux | grep tomcat</div></pre></td></tr></table></figure></p><h3 id="只查看进程pid"><a href="#只查看进程pid" class="headerlink" title="只查看进程pid"></a>只查看进程pid</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pgrep -f tomcat</div></pre></td></tr></table></figure><h3 id="tomcat-server-killed"><a href="#tomcat-server-killed" class="headerlink" title="tomcat server killed"></a>tomcat server killed</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">kill</span> -s 9 `pgrep -f tomcat`</div></pre></td></tr></table></figure><blockquote><p>引用自<a href="http://blog.csdn.net/smarxx/article/details/6664219" target="_blank" rel="external">这里</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pgrep </tag>
            
            <tag> kill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sense8 &amp; what&#39;s up~</title>
      <link href="/2017/05/15/sense8-in-our-heart/"/>
      <url>/2017/05/15/sense8-in-our-heart/</url>
      
        <content type="html"><![CDATA[<h1 id="每个人心中，都有自己的sense8"><a href="#每个人心中，都有自己的sense8" class="headerlink" title="每个人心中，都有自己的sense8"></a>每个人心中，都有自己的sense8</h1><p><img src="http://image.candymami.com/17-5-15/76076106-file_1494828659527_1781d.png" alt=""></p><h3 id="观感"><a href="#观感" class="headerlink" title="观感"></a>观感</h3><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p>独立鱼</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> 美剧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sense8 </tag>
            
            <tag> what&#39;s up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看shadowsocks服务器的用户连接数</title>
      <link href="/2017/05/12/show-connect-user-count-on-shadowsocks-server/"/>
      <url>/2017/05/12/show-connect-user-count-on-shadowsocks-server/</url>
      
        <content type="html"><![CDATA[<p><img src="http://i4.buimg.com/588926/d4cece95e36ac2ae.png" alt="图片来自网络"></p><blockquote><p>转自 <a href="https://doub.io/ss-jc33/" target="_blank" rel="external">逗比根据地</a></p></blockquote><h3 id="notice"><a href="#notice" class="headerlink" title="notice"></a>notice</h3><p>本方法仅适用于 Debian/Ubuntu 系统(部分代码支持CentOS)，ShadowsocksR 服务端和Shadowsocks Python 服务端！</p><p>首先，我们是使用netstat命令来查询当前服务器（VPS）的连接数据。</p><blockquote><p>以下方法适用于 ShadowsocksR(Python) 的服务端，因为ShadowsocksR服务端由 Python 编写，并且默认开启ipv6，所以很容易过滤出一些信息。</p></blockquote><h3 id="显示出由Python建立完成的TCP链接列表或连接数"><a href="#显示出由Python建立完成的TCP链接列表或连接数" class="headerlink" title="显示出由Python建立完成的TCP链接列表或连接数"></a>显示出由Python建立完成的TCP链接列表或连接数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示所有进出链接</span></div><div class="line">netstat -anp |grep <span class="string">'ESTABLISHED'</span> |grep <span class="string">'python'</span></div><div class="line"><span class="comment"># 仅显示链接服务器的用户连接</span></div><div class="line">netstat -anp |grep <span class="string">'ESTABLISHED'</span> |grep <span class="string">'python'</span> |grep <span class="string">'tcp6'</span></div><div class="line"><span class="comment"># 仅显示链接服务器的用户连接数量</span></div><div class="line">netstat -anp |grep <span class="string">'ESTABLISHED'</span> |grep <span class="string">'python'</span> |grep <span class="string">'tcp6'</span> |wc -l</div><div class="line"><span class="comment"># 仅显示链接服务器的用户连接并写入到文件</span></div><div class="line">netstat -anp |grep <span class="string">'ESTABLISHED'</span> |grep <span class="string">'python'</span> |grep <span class="string">'tcp6'</span>&gt;&gt;/root/log.txt</div><div class="line"> </div><div class="line"><span class="comment"># 如果你是多用户版(多个端口)的服务端，那么你可以用这个命令</span></div><div class="line"><span class="comment"># 显示当前链接服务器的用户的SS端口</span></div><div class="line">netstat -anp |grep <span class="string">'ESTABLISHED'</span> |grep <span class="string">'python'</span> |grep <span class="string">'tcp6'</span> |awk <span class="string">'&#123;print $4&#125;'</span> |sort -u</div><div class="line"><span class="comment"># CentOS系统用这个</span></div><div class="line">netstat -anp |grep <span class="string">'ESTABLISHED'</span> |grep <span class="string">'python'</span> |grep <span class="string">'tcp'</span> | grep <span class="string">'::ffff:'</span> |awk <span class="string">'&#123;print $4&#125;'</span> |sort -u</div><div class="line"><span class="comment"># 显示当前链接服务器的用户的SS端口数量</span></div><div class="line">netstat -anp |grep <span class="string">'ESTABLISHED'</span> |grep <span class="string">'python'</span> |grep <span class="string">'tcp6'</span> |awk <span class="string">'&#123;print $4&#125;'</span> |sort -u |wc -l</div><div class="line"><span class="comment"># CentOS系统用这个</span></div><div class="line">netstat -anp |grep <span class="string">'ESTABLISHED'</span> |grep <span class="string">'python'</span> |grep <span class="string">'tcp'</span> | grep <span class="string">'::ffff:'</span> |awk <span class="string">'&#123;print $4&#125;'</span> |sort -u |wc -l</div><div class="line"> </div><div class="line"><span class="comment"># 显示当前所有链接SS的用户IP</span></div><div class="line">netstat -anp |grep <span class="string">'ESTABLISHED'</span> |grep <span class="string">'python'</span> |grep <span class="string">'tcp6'</span> |awk <span class="string">'&#123;print $5&#125;'</span> |awk -F <span class="string">":"</span> <span class="string">'&#123;print $1&#125;'</span> |sort -u</div><div class="line"><span class="comment"># 显示当前所有链接SS的用户IP数量</span></div><div class="line">netstat -anp |grep <span class="string">'ESTABLISHED'</span> |grep <span class="string">'python'</span> |grep <span class="string">'tcp6'</span> |awk <span class="string">'&#123;print $5&#125;'</span> |awk -F <span class="string">":"</span> <span class="string">'&#123;print $1&#125;'</span> |sort -u |wc -l</div></pre></td></tr></table></figure><p>第一条 命令是 把所有的进出链接都列出来，Shadowsocks客户端在链接服务器后 本地的IP和端口 是 “进” 的，服务器在接收到Shadowsocks客户端的数据后会去访问指定的网站或IP，而这是 “出”的。这一条命令就是把这 一进一出 的信息都列出来，可以知道 客户端用户连接的是哪个 SS端口，还有客户 自身的IP和端口。</p><p>第二条 命令是 仅显示链接服务器的用户的链接，也就是上面一段话中说的 “进”，这个命令不会吧服务器在访问的网站或IP给列出来，纯粹用来看 Shadowsocks用户的链接信息。</p><p>第三条 命令是 仅显示链接服务器的用户连接数量，有时候链接 当前服务器的 Shadowsocks用户很多，你只想知道有几个人链接，那就用这一条命令（这个链接数量不是准确的，具体看下面的注意说明）。</p><p>第四条 命令是 仅显示链接服务器的用户连接并写入到文件，有时候在ssh上面查看大量文本不是一个好主意，所以保存到某个目录，然后自己去用sftp下载下来看信息是个不错的选择。</p><p>第五条 命令是 显示当前链接服务器的用户的SS端口，这个命令会去除重复的，最后显示的只有 正在链接SS服务器的用户的SS端口。</p><p>第六条 命令是 显示当前链接服务器的用户的SS端口数量，这个就是显示 数量。</p><p>第七条 命令是 显示当前所有链接SS的用户IP，这个命令会去除重复的，最后显示的只有 正在链接SS服务器的用户的IP。</p><p>第八条 命令是 显示当前所有链接SS的用户IP数量，这个就是显示 数量。</p><blockquote><p>注意：你经常会看到 用户IP一样但后面的端口不一样(1.1.1.1:2333、1.1.1.1:6666)，那是因为他的SS客户端开了好几条TCP链接，所以一般情况下还是一个人在使用，但是也不排除路由器局域网情况下多个人同时使用，这时候也是这样显示的。</p></blockquote><hr><p>如果你想单独查看一个SS端口的链接数，那你可以看看下面几条命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">netstat -anp |grep <span class="string">'ESTABLISHED'</span> |grep <span class="string">'python'</span> |grep <span class="string">'tcp6'</span> |grep VPS_IP:SS_Port</div><div class="line"><span class="comment"># 示例 netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep 233.233.233.233:10000</span></div><div class="line"> </div><div class="line">netstat -anp |grep <span class="string">'ESTABLISHED'</span> |grep <span class="string">'python'</span> |grep <span class="string">'tcp6'</span> |grep VPS_IP:SS_Port |wc -l</div><div class="line"><span class="comment"># 示例 netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep 233.233.233.233:10000 |wc -l</span></div></pre></td></tr></table></figure><p>第一条是 列出 当前SS端口连接的链接数。比如：服务器IP是 233.233.233.233 ，然后你想要知道链接数的端口是 10000 ，那命令就是第二行的示例。</p><p>第二条是 显示 当前SS端口连接的链接数，这个只是显示有几个链接数。示例如上。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shadowsocks </tag>
            
            <tag> vpn </tag>
            
            <tag> vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建自己的shadowsocks服务器</title>
      <link href="/2017/05/08/Create-your-own-shadowsocks-server/"/>
      <url>/2017/05/08/Create-your-own-shadowsocks-server/</url>
      
        <content type="html"><![CDATA[<h2 id="链接地址"><a href="#链接地址" class="headerlink" title="链接地址"></a>链接地址</h2><p><a href="https://bandwagonhost.com/aff.php?aff=6060" target="_blank" rel="external">点我进入搬瓦工</a></p><p><a href="https://bwh1.net/aff.php?aff=6060" target="_blank" rel="external">国内请点击这里</a></p><p><img src="http://image.candymami.com/17-5-8/97521733-file_1494232058235_cd04.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shadowsocks </tag>
            
            <tag> vpn </tag>
            
            <tag> vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu创建程序快捷方式</title>
      <link href="/2017/05/08/how-to-create-a-program-shotcut-in-ubuntu/"/>
      <url>/2017/05/08/how-to-create-a-program-shotcut-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="快捷方式的位置"><a href="#快捷方式的位置" class="headerlink" title="快捷方式的位置"></a>快捷方式的位置</h2><p>Ubuntu快捷方式的位置有两个</p><ol><li><code>/usr/share/applications</code></li><li><code>～/.local/share/applications</code></li></ol><h2 id="后缀名"><a href="#后缀名" class="headerlink" title="后缀名"></a>后缀名</h2><p>所有的快捷方式的后缀名都以<code>.desktop</code>结束</p><h2 id="快捷方式内容"><a href="#快捷方式内容" class="headerlink" title="快捷方式内容"></a>快捷方式内容</h2><p>以pycharm为例，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[Desktop Entry]</div><div class="line">Version=1.0 //版本号</div><div class="line">Type=Application //  </div><div class="line">Name=PyCharm2017 // 显示名称</div><div class="line">Icon=/home/yourname/programs/pycharm-2017.1.1/bin/pycharm2017.png // 图标图片路径</div><div class="line">Exec=<span class="string">"/home/yourname/programs/pycharm-2017.1.1/bin/pycharm.sh"</span> %f // 程序执行文件</div><div class="line">Comment=Develop with pleasure!</div><div class="line">Categories=Development;IDE;</div><div class="line">Terminal=<span class="literal">false</span> //是否终端执行</div><div class="line">StartupWMClass=jetbrains-pycharm</div></pre></td></tr></table></figure><h2 id="快捷方式的权限"><a href="#快捷方式的权限" class="headerlink" title="快捷方式的权限"></a>快捷方式的权限</h2><p>权限如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rw-------</div></pre></td></tr></table></figure></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>将文件放入指定位置后，点击ubuntu左上角搜索输入名称，即可显示；<br>如图：<br><img src="http://image.candymami.com/17-5-8/19586603-file_1494231696632_14626.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将一个已经存在的目录转换为GIT项目并托管到github或coding仓库</title>
      <link href="/2017/05/02/how-to-add-exist-project-to-github-or-coding/"/>
      <url>/2017/05/02/how-to-add-exist-project-to-github-or-coding/</url>
      
        <content type="html"><![CDATA[<h1 id="如何将一个已存在的目录转换为一个-GIT-项目并托管到-GITHUB-CODING-仓库"><a href="#如何将一个已存在的目录转换为一个-GIT-项目并托管到-GITHUB-CODING-仓库" class="headerlink" title="如何将一个已存在的目录转换为一个 GIT 项目并托管到 GITHUB/CODING 仓库"></a>如何将一个已存在的目录转换为一个 GIT 项目并托管到 GITHUB/CODING 仓库</h1><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>将一个本地维护的项目，转换成git项目，并托管在github上。</p><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h3 id="初始化本地项目目录"><a href="#初始化本地项目目录" class="headerlink" title="初始化本地项目目录"></a>初始化本地项目目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure><p>此时会在目录中创建一个<code>.git</code>的隐藏目录</p><h3 id="将所有的文件放入新的仓库中"><a href="#将所有的文件放入新的仓库中" class="headerlink" title="将所有的文件放入新的仓库中"></a>将所有的文件放入新的仓库中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure><p>如果你的本地已经有<code>.gitignore</code>目录，则按照此文件的规则进行排除文件；<br>单独添加文件，则把<code>.</code>替换为文件名。</p><h3 id="将添加的文件提交到仓库"><a href="#将添加的文件提交到仓库" class="headerlink" title="将添加的文件提交到仓库"></a>将添加的文件提交到仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"commit init"</span></div></pre></td></tr></table></figure><h3 id="获取远程仓库地址"><a href="#获取远程仓库地址" class="headerlink" title="获取远程仓库地址"></a>获取远程仓库地址</h3><p>登陆<a href="https://github.com" target="_blank" rel="external">github</a>或者<a href="https://coding.net" target="_blank" rel="external">coding.net</a>，获取远程仓库；</p><p>此时尽量先不要初始化README和LICENSE文件，防止文件冲突</p><p>获取<code>https://github.com/your-proj-name.git</code>类似的地址；</p><h3 id="回到本地目录，将本地创建关联到远程仓库"><a href="#回到本地目录，将本地创建关联到远程仓库" class="headerlink" title="回到本地目录，将本地创建关联到远程仓库"></a>回到本地目录，将本地创建关联到远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/your-proj-name.git</div></pre></td></tr></table></figure><p>运行以下命令查看结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote -v</div></pre></td></tr></table></figure></p><h3 id="提交代码到远程创建-push"><a href="#提交代码到远程创建-push" class="headerlink" title="提交代码到远程创建 push"></a>提交代码到远程创建 push</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure><p>此时进入远程页面查看代码是否成功push即可。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>celery小试牛刀</title>
      <link href="/2017/05/02/how-to-use-celery-running-task/"/>
      <url>/2017/05/02/how-to-use-celery-running-task/</url>
      
        <content type="html"><![CDATA[<h2 id="Celery小试牛刀"><a href="#Celery小试牛刀" class="headerlink" title="Celery小试牛刀"></a>Celery小试牛刀</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>参考资料：</p><ul><li><a href="http://www.celeryproject.org/" target="_blank" rel="external">celery 官网</a></li><li><a href="https://blog.csdn.net/freeking101/article/details/74707619" target="_blank" rel="external">Python 并行分布式框架 Celery</a></li></ul><h4 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h4><p>Celery是一个异步任务的调度工具。</p><p>Tasks can execute asynchronously (in the background) or synchronously (wait until ready).</p><p>任务可以异步（在后台）或同步执行（等到准备好）。</p><h4 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h4><p>Celery的架构由三部分组成：</p><ol><li>消息中间件（message broker）</li><li>任务执行单元（worker）</li><li>任务执行结果存储（task result store）</li></ol><p><img src="http://image.candymami.com/18-8-14/62830101.jpg" alt="celery 组成部分"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>根据以上的组成部分，需要安装以下几种：</p><p>初学推荐使用方案一，环境比较好搭</p><p>方案一：</p><ul><li>redis (message broker &amp;&amp; task result store)</li><li>celery (worker)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install redis</div><div class="line">pip install celery</div></pre></td></tr></table></figure><p>方案二：</p><ul><li>RabbitMQ (message broker)</li><li>mysql (task result store)</li><li>celery (worker)</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="单文件应用"><a href="#单文件应用" class="headerlink" title="单文件应用"></a>单文件应用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"></div><div class="line">broker = <span class="string">'redis://127.0.0.1:6378/5'</span></div><div class="line">backend = <span class="string">'redis://127.0.0.1:6379/6'</span></div><div class="line"></div><div class="line">app = Celery(<span class="string">'tasks'</span>, broker=broker, backend=backend)</div><div class="line"></div><div class="line"><span class="meta">@app.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div></pre></td></tr></table></figure><p>目录结构：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tree</div><div class="line">.</div><div class="line">├── __pycache__</div><div class="line">│   └── tasks.cpython-35.pyc</div><div class="line">├── tasks.py  # 单文件</div><div class="line">└── tasks.pyc</div></pre></td></tr></table></figure></p><h4 id="配置文件应用"><a href="#配置文件应用" class="headerlink" title="配置文件应用"></a>配置文件应用</h4><p><a href="http://docs.celeryproject.org/en/latest/userguide/configuration.html" target="_blank" rel="external">celery 配置项</a></p><ul><li><p>建个python包， proj</p></li><li><p>创建celery.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"></div><div class="line">app = Celery(<span class="string">'proj'</span>, include=[<span class="string">'proj.tasks'</span>])</div><div class="line">app.config_from_object(<span class="string">'proj.config'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.start()</div></pre></td></tr></table></figure></li><li><p>创建config.py配置文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/5'</span></div><div class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379/6'</span></div></pre></td></tr></table></figure><ul><li>创建tasks.py 任务文件<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> proj.celery <span class="keyword">import</span> app </div><div class="line"></div><div class="line"><span class="meta">@app.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div></pre></td></tr></table></figure></li></ul><h4 id="结合Django的Celery配置"><a href="#结合Django的Celery配置" class="headerlink" title="结合Django的Celery配置"></a>结合Django的Celery配置</h4><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><h4 id="启动worker"><a href="#启动worker" class="headerlink" title="启动worker"></a>启动worker</h4><h4 id="启动beat"><a href="#启动beat" class="headerlink" title="启动beat"></a>启动beat</h4><h3 id="可执行方式"><a href="#可执行方式" class="headerlink" title="可执行方式"></a>可执行方式</h3><h4 id="task"><a href="#task" class="headerlink" title="task"></a>task</h4><h4 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h4><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><h1 id="如何使用celery执行异步任务"><a href="#如何使用celery执行异步任务" class="headerlink" title="如何使用celery执行异步任务"></a>如何使用celery执行异步任务</h1><h1 id="如何使用celery-beat执行定时任务"><a href="#如何使用celery-beat执行定时任务" class="headerlink" title="如何使用celery beat执行定时任务"></a>如何使用celery beat执行定时任务</h1>]]></content>
      
      
      
        <tags>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片测试</title>
      <link href="/2017/05/02/photo-test/"/>
      <url>/2017/05/02/photo-test/</url>
      
        <content type="html"><![CDATA[<h1 id="this-is-the-photo-test-page"><a href="#this-is-the-photo-test-page" class="headerlink" title="this is the photo test page"></a>this is the photo test page</h1><p><img src="http://image.candymami.com/17-2-8/44364820-file_1486535637317_11f27.png" alt="one"><br><img src="http://image.candymami.com/17-5-2/62310626-file_1493692370185_166d9.jpg" alt="two"><br><img src="http://image.candymami.com/2017-01-03%2011-19-20%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE1.png" alt="three"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pycharm license server</title>
      <link href="/2017/04/09/how-to-get-pycharm-license/"/>
      <url>/2017/04/09/how-to-get-pycharm-license/</url>
      
        <content type="html"><![CDATA[<h2 id="18年8月7日更新-有条件还是自己搭server吧，大多都禁了"><a href="#18年8月7日更新-有条件还是自己搭server吧，大多都禁了" class="headerlink" title="18年8月7日更新 有条件还是自己搭server吧，大多都禁了"></a>18年8月7日更新 有条件还是自己搭server吧，大多都禁了</h2><p>放个地址，教程自行搜索。</p><p>链接：<a href="https://pan.baidu.com/s/1lRU0leSSGl5p3Cv3ubX3rQ" target="_blank" rel="external">https://pan.baidu.com/s/1lRU0leSSGl5p3Cv3ubX3rQ</a> 密码：ui96</p><hr><h1 id="牛人搞的license-server，转一发"><a href="#牛人搞的license-server，转一发" class="headerlink" title="牛人搞的license server，转一发"></a>牛人搞的license server，转一发</h1><blockquote><p>搭了一个支持JetBrains全系列产品的License Server，理论上支持以下所有版本：</p></blockquote><ul><li>IntelliJ IDEA</li><li>PhpStorm</li><li>PyCharm</li><li>RubyMine</li><li>WebStorm<a id="more"></a></li><li>AppCode</li><li>CLion</li><li>DataGrip</li><li>ReSharper</li><li>ReSharper C++</li><li>dotTrace</li><li>dotMemory</li><li>dotCover</li><li>dotPeek</li></ul><blockquote><p>不过本人仅测试了pycharm。个人搭建教程请参考idea.lanyus.com</p></blockquote><h2 id="域名和端口如下"><a href="#域名和端口如下" class="headerlink" title="域名和端口如下"></a>域名和端口如下</h2><h2 id="JetBrains-License-Server-url-as-follows："><a href="#JetBrains-License-Server-url-as-follows：" class="headerlink" title="JetBrains License Server url as follows："></a>JetBrains License Server url as follows：</h2><p><a href="http://pycharm.tyr.gift:8888" target="_blank" rel="external">http://pycharm.tyr.gift:8888</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pycharm </tag>
            
            <tag> license </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>url的解析方式(包含python2和python3)</title>
      <link href="/2017/02/20/Analysis-of-the-url-python2&amp;python3/"/>
      <url>/2017/02/20/Analysis-of-the-url-python2&amp;python3/</url>
      
        <content type="html"><![CDATA[<h2 id="URL的解析方式，简单有效（包含python2-amp-python3-版本）"><a href="#URL的解析方式，简单有效（包含python2-amp-python3-版本）" class="headerlink" title="URL的解析方式，简单有效（包含python2. &amp; python3.版本）"></a>URL的解析方式，简单有效（包含python2.<em> &amp; python3.</em>版本）</h2><p><img src="http://image.candymami.com/17-9-26/66144228.jpg" alt=""></p><h3 id="URL的组成"><a href="#URL的组成" class="headerlink" title="URL的组成"></a>URL的组成</h3><h4 id="举例url："><a href="#举例url：" class="headerlink" title="举例url："></a>举例url：</h4><a id="more"></a><p><code>https://www.domain.org/this-is-path?username=w&amp;password=p</code></p><ul><li><code>scheme</code> 如：https://</li><li><code>domain</code> 如：www.domain.org</li><li><code>path</code> 如：this-is-path</li><li><code>params</code> 如：username=w&amp;password=p <code>params</code> 数据成对出现</li></ul><h3 id="解析URL（python-2版本-amp-python-3版本"><a href="#解析URL（python-2版本-amp-python-3版本" class="headerlink" title="解析URL（python 2版本 &amp; python 3版本)"></a>解析URL（python 2<em>版本 &amp; python 3</em>版本)</h3><h4 id="引用包urlparse-2-7-urllib-parse-3"><a href="#引用包urlparse-2-7-urllib-parse-3" class="headerlink" title="引用包urlparse(2.7) || urllib.parse(3.*)"></a>引用包urlparse(2.7) || urllib.parse(3.*)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 2.*</span></div><div class="line"><span class="keyword">import</span> urlparse</div><div class="line">url = <span class="string">"https://www.domain.org/this-is-path?username=w&amp;password=p"</span></div><div class="line">pa = urlparse.urlparse(url)</div><div class="line"><span class="keyword">print</span> pa</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.*</span></div><div class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</div><div class="line"></div><div class="line">url = <span class="string">"https://www.domain.org/this-is-path?username=w&amp;password=p"</span></div><div class="line">pa = urlparse(url)</div><div class="line">print(pa)</div></pre></td></tr></table></figure><p>将url解析成了对象，如下：<br><code>Out[28]: ParseResult(scheme=&#39;https&#39;, netloc=&#39;www.domain.org&#39;, path=&#39;/this-is-path&#39;, params=&#39;&#39;, query=&#39;username=w&amp;password=p&#39;, fragment=&#39;&#39;)</code></p><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">In [29]: pa.scheme</div><div class="line">Out[29]: &apos;https&apos;</div><div class="line"></div><div class="line">In [30]: pa.netloc</div><div class="line">Out[30]: &apos;www.domain.org&apos;</div><div class="line"></div><div class="line">In [34]: pa.hostname</div><div class="line">Out[34]: &apos;www.domain.org&apos;</div><div class="line"></div><div class="line">In [37]: pa.path</div><div class="line">Out[37]: &apos;/this-is-path&apos;</div><div class="line"></div><div class="line">In [38]: pa.query</div><div class="line">Out[38]: &apos;username=w&amp;password=p&apos;</div></pre></td></tr></table></figure><h4 id="如何将参数格式化成dict类型？"><a href="#如何将参数格式化成dict类型？" class="headerlink" title="如何将参数格式化成dict类型？"></a>如何将参数格式化成dict类型？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 2.*</span></div><div class="line">In [<span class="number">40</span>]: urlparse.parse_qs(pa.query)</div><div class="line">Out[<span class="number">40</span>]: &#123;<span class="string">'password'</span>: [<span class="string">'p'</span>], <span class="string">'username'</span>: [<span class="string">'w'</span>]&#125;</div><div class="line"></div><div class="line">In [<span class="number">41</span>]: dict(urlparse.parse_qsl(pa.query))</div><div class="line">Out[<span class="number">41</span>]: &#123;<span class="string">'password'</span>: <span class="string">'p'</span>, <span class="string">'username'</span>: <span class="string">'w'</span>&#125;</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.*</span></div><div class="line">In [<span class="number">6</span>]: <span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs, parse_qsl</div><div class="line"></div><div class="line">In [<span class="number">7</span>]: parse_qs(pa.query)</div><div class="line">Out[<span class="number">7</span>]: &#123;<span class="string">'username'</span>: [<span class="string">'w'</span>], <span class="string">'password'</span>: [<span class="string">'p'</span>]&#125;</div><div class="line"></div><div class="line">In [<span class="number">8</span>]: parse_qsl(pa.query)</div><div class="line">Out[<span class="number">8</span>]: [(<span class="string">'username'</span>, <span class="string">'w'</span>), (<span class="string">'password'</span>, <span class="string">'p'</span>)]</div></pre></td></tr></table></figure><h4 id="如何将格式化后的query数据恢复成原来的网址"><a href="#如何将格式化后的query数据恢复成原来的网址" class="headerlink" title="如何将格式化后的query数据恢复成原来的网址?"></a>如何将格式化后的query数据恢复成原来的网址?</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python2.*</span></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line">urllib.urlencode(params, doseq=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.*</span></div><div class="line">In [<span class="number">12</span>]: <span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</div><div class="line"></div><div class="line">In [<span class="number">13</span>]: urlencode(a, doseq=<span class="keyword">True</span>)</div><div class="line">Out[<span class="number">13</span>]: <span class="string">'username=w&amp;password=p'</span></div></pre></td></tr></table></figure><h4 id="带参数据GET请求"><a href="#带参数据GET请求" class="headerlink" title="带参数据GET请求"></a>带参数据GET请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url = <span class="string">"https://www.domain.org/this-is-path"</span></div><div class="line">params = &#123;</div><div class="line"><span class="string">"username"</span>: <span class="string">"w"</span>,</div><div class="line"><span class="string">"password"</span>:<span class="string">"p"</span>,</div><div class="line">&#125;</div><div class="line">res = requests.get(url=url, params=params)</div></pre></td></tr></table></figure><h4 id="如果你有一段raw形式的参数要进行请求，可以使用parse-qs进行格式化后请求"><a href="#如果你有一段raw形式的参数要进行请求，可以使用parse-qs进行格式化后请求" class="headerlink" title="如果你有一段raw形式的参数要进行请求，可以使用parse_qs进行格式化后请求"></a>如果你有一段raw形式的参数要进行请求，可以使用parse_qs进行格式化后请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> urlparse <span class="comment">#python 2.*</span></div><div class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, parse_qs <span class="comment"># python 3.*</span></div><div class="line">url = <span class="string">"https://www.domain.org/this-is-path"</span></div><div class="line">p = <span class="string">"username=w&amp;password=p"</span></div><div class="line">params = urlparse.parse_qs(p) <span class="comment"># python 2.*</span></div><div class="line">params = parse_qs(p) <span class="comment"># python 3.*</span></div><div class="line">res = requests.get(url=url, params=params)</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> urlparse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django 添加联合唯一索引</title>
      <link href="/2017/02/16/Django-add-contact-to-unique-index/"/>
      <url>/2017/02/16/Django-add-contact-to-unique-index/</url>
      
        <content type="html"><![CDATA[<h2 id="Django-添加联系唯一索引方法"><a href="#Django-添加联系唯一索引方法" class="headerlink" title="Django 添加联系唯一索引方法"></a>Django 添加联系唯一索引方法</h2><blockquote><p>联合唯一索引，指的是，多个键值相同时保持唯一，添加方法如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">"name"</span>)</div><div class="line">    version = models.IntegerField(max_length=<span class="number">100</span>, verbose_name=<span class="string">"version"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span><span class="params">()</span>:</span></div><div class="line">        verbose_name = <span class="string">"mymodel"</span></div><div class="line">        verbose_name_plural = <span class="string">"mymodel"</span></div><div class="line">        unique_together = ((<span class="string">"name"</span>, <span class="string">"version"</span>),)</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 联合唯一索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Many-to-many模型的创建、添加、保存 | Django</title>
      <link href="/2017/02/16/ManyToMany-data-types-in-Django-projects/"/>
      <url>/2017/02/16/ManyToMany-data-types-in-Django-projects/</url>
      
        <content type="html"><![CDATA[<h2 id="Django项目中ManyToMany数据类型"><a href="#Django项目中ManyToMany数据类型" class="headerlink" title="Django项目中ManyToMany数据类型"></a>Django项目中ManyToMany数据类型</h2><h1 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h1><h3 id="介绍ManyToMany结构"><a href="#介绍ManyToMany结构" class="headerlink" title="介绍ManyToMany结构"></a>介绍ManyToMany结构</h3><p>ManyToMany即多对多关系</p><p>最简单的例如大学生选课</p><p>一个学生可以选多门课，而一门课也可以被多个学生选休，这就是多对多的关系；</p><h3 id="项目中实践"><a href="#项目中实践" class="headerlink" title="项目中实践"></a>项目中实践</h3><a id="more"></a><h4 id="添加多对多数据模型"><a href="#添加多对多数据模型" class="headerlink" title="添加多对多数据模型"></a>添加多对多数据模型</h4><h4 id="查看数据库中的具体实现"><a href="#查看数据库中的具体实现" class="headerlink" title="查看数据库中的具体实现"></a>查看数据库中的具体实现</h4><h4 id="外部保存多对多关系数据的方法"><a href="#外部保存多对多关系数据的方法" class="headerlink" title="外部保存多对多关系数据的方法"></a>外部保存多对多关系数据的方法</h4><h4 id="官方参考文档"><a href="#官方参考文档" class="headerlink" title="官方参考文档"></a>官方参考文档</h4><p><a href="https://docs.djangoproject.com/en/1.10/ref/models/fields/#django.db.models.ManyToManyField" target="_blank" rel="external">ManyToMany数据类型</a></p><p><a href="https://docs.djangoproject.com/en/1.10/topics/db/examples/many_to_many/" target="_blank" rel="external">ManyToMany示例</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> many-to-many </tag>
            
            <tag> model </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django admin的个性定制与方法覆写</title>
      <link href="/2017/02/13/ModelAdmin-and-action-of-django-admin/"/>
      <url>/2017/02/13/ModelAdmin-and-action-of-django-admin/</url>
      
        <content type="html"><![CDATA[<h2 id="django-modeladmin-个性定制与方法覆写"><a href="#django-modeladmin-个性定制与方法覆写" class="headerlink" title="django modeladmin 个性定制与方法覆写"></a>django modeladmin 个性定制与方法覆写</h2><p>我喜欢django的原因有很多，最直接的一条是，她有一套强大的model系统，特别是有一套管理后台ModelAdmin，<br>让我在做项目时非常方便，但功能做多了，需求也就各式各样了，所以部分功能需要定制化。<br>这里就说一下我在项目过程中所遇到的，这些在官方文档中也都有体现。</p><a id="more"></a><p>最常见的两项无非是modeladmin和actions的覆写和增加</p><p><a href="https://docs.djangoproject.com/en/1.10/ref/contrib/admin/" target="_blank" rel="external">官网ModelAdmin</a></p><p><a href="https://docs.djangoproject.com/en/1.10/ref/contrib/admin/actions/" target="_blank" rel="external">官网Actions</a></p><h3 id="ModelAdmin"><a href="#ModelAdmin" class="headerlink" title="ModelAdmin"></a>ModelAdmin</h3><h4 id="get-queryset"><a href="#get-queryset" class="headerlink" title="get_queryset"></a>get_queryset</h4><p>ModelAdmin上的get_queryset方法会返回管理网站可以编辑的所有模型实例的QuerySet。<br>简单来说就是返回一个从model中查询到的数据对象集合。<br>官网给出的示例，qs是获取到的数据集合，然后通过判断是否为管理员类型，对非管理员数据进行过滤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModelAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self, request)</span>:</span></div><div class="line">        qs = super(MyModelAdmin, self).get_queryset(request)</div><div class="line">        <span class="keyword">if</span> request.user.is_superuser:</div><div class="line">            <span class="keyword">return</span> qs</div><div class="line">        <span class="keyword">return</span> qs.filter(author=request.user)</div></pre></td></tr></table></figure><h5 id="想要在后台显示列表的序号而非数据库中的ID的实现"><a href="#想要在后台显示列表的序号而非数据库中的ID的实现" class="headerlink" title="想要在后台显示列表的序号而非数据库中的ID的实现"></a>想要在后台显示列表的序号而非数据库中的ID的实现</h5><p>要显示ID比较简单，在list_display中加了id项即可，但这个id是数据在数据库中的id，如果有删除，那么就不是列表序列了。<br>我的思路是：通过get_queryset获取到整个列表，从而知道共有多少条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModelAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self, request)</span>:</span></div><div class="line">        qs = super(MyModelAdmin, self).get_queryset(request)</div><div class="line">        self.qs = qs</div><div class="line">        <span class="keyword">return</span> qs</div></pre></td></tr></table></figure><p>然后新建方法获取每次列表循环的obj，判断obj在列表中的位置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ids</span><span class="params">(self, obj)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.qs) - list(self.qs).index(obj)</div></pre></td></tr></table></figure></p><p>别忘了在list_display中增加方法名：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list_display = [<span class="string">'ids'</span>, <span class="string">'eventid'</span>, <span class="string">'refpveventid'</span>, <span class="string">'refclickeventid'</span>, <span class="string">'updatetime'</span>]</div></pre></td></tr></table></figure></p><p>果断妥妥的！<br><img src="http://image.candymami.com/17-2-14/94925874-file_1487041725745_ba58.png" alt="index_id_show"></p><h5 id="在列表中显示图片-参考网络"><a href="#在列表中显示图片-参考网络" class="headerlink" title="在列表中显示图片(参考网络)"></a>在列表中显示图片(参考网络)</h5><p>先拼html代码，然后把显示路径和显示id做为参数传入，bingo! 写法真心灵活。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_show</span><span class="params">(self, obj)</span>:</span></div><div class="line">    <span class="comment"># 扩展显示list_display</span></div><div class="line">    s = <span class="string">u'&lt;img src="&#123;&#125;face/&#123;&#125;.jpg"style="width:2em;height:2em"&gt;'</span></div><div class="line">    <span class="keyword">return</span> format_html(s, django.conf.settings.MEDIA_URL, str(face.id))</div></pre></td></tr></table></figure></p><p>依然别忘了把方法加入list_display<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list_display = [<span class="string">'img_show'</span>]</div></pre></td></tr></table></figure></p><p>更高端的用法，大神们自行研究吧～</p><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><h4 id="增加通用action"><a href="#增加通用action" class="headerlink" title="增加通用action"></a>增加通用action</h4><h5 id="首先增加actions项"><a href="#首先增加actions项" class="headerlink" title="首先增加actions项"></a>首先增加actions项</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">actions = [<span class="string">'make_published'</span>]</div></pre></td></tr></table></figure><h5 id="创建make-published方法"><a href="#创建make-published方法" class="headerlink" title="创建make_published方法"></a>创建make_published方法</h5><p>官方示例： 将获取到的queryset中的status字段统一置为p值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_published</span><span class="params">(modeladmin, request, queryset)</span>:</span></div><div class="line">    queryset.update(status=<span class="string">'p'</span>)</div><div class="line">make_published.short_description = <span class="string">"Mark selected stories as published"</span></div></pre></td></tr></table></figure></p><p>其中modeladmin为当前类的ModelAdmin，request为当前的Httprequest，queryset为包含用户所项对象的集合。</p><p>同时提供了<code>short_description</code>方法，用来自定义名称显示在actions选择的位置。</p><h5 id="想要复制选中的数据，并修改其中的部分字段"><a href="#想要复制选中的数据，并修改其中的部分字段" class="headerlink" title="想要复制选中的数据，并修改其中的部分字段"></a>想要复制选中的数据，并修改其中的部分字段</h5><p>其实通过上面的方法，以经有眉目了；但还差一点，差哪呢，就是在post actions的时候，渲染一个template；<br>类似于delete_action点击后的页面效果。</p><p>这里可以借鉴下delete_selected的实现方式，源码位置：<br><code>/home/hanz/autohome-venv2.7/local/lib/python2.7/site-packages/django/contrib/admin/actions.py</code></p><p>这样就简单了，现在只需要增加一个template，可以把模板增加至admin的模板下，比如：<code>templates/admin/pvtest/db_copy_confirmation.html</code></p><h6 id="修改数据处理部分"><a href="#修改数据处理部分" class="headerlink" title="修改数据处理部分"></a>修改数据处理部分</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_action</span><span class="params">(self, request, queryset)</span>:</span></div><div class="line">    <span class="keyword">if</span> request.POST.get(<span class="string">'post'</span>):</div><div class="line">        <span class="keyword">if</span> perms_needed:</div><div class="line">            <span class="keyword">raise</span> PermissionDenied</div><div class="line">        n = queryset.count()</div><div class="line">        p_v = request.POST.get(<span class="string">"pv-version"</span>)</div><div class="line">        <span class="keyword">if</span> n:</div><div class="line">            <span class="keyword">for</span> obj <span class="keyword">in</span> queryset:</div><div class="line">                obj_display = force_text(obj)</div><div class="line">                obj.pk = <span class="keyword">None</span></div><div class="line">                obj.pvconfig_id = p_v</div><div class="line">                obj.save()</div><div class="line">                self.log_addition(request, obj, obj_display)</div><div class="line">            self.message_user(request, (<span class="string">u"成功复制了 %(count)s 个 %(items)s."</span>) % &#123;</div><div class="line">                <span class="string">"count"</span>: n, <span class="string">"items"</span>: model_ngettext(self.opts, n)</div><div class="line">            &#125;, messages.SUCCESS)</div></pre></td></tr></table></figure><p>复制数据其实还是挺简单的，只需要把pk置空，然后修改指定字段的值，重新保存，就OK了；</p><h6 id="修改渲染模板部分"><a href="#修改渲染模板部分" class="headerlink" title="修改渲染模板部分"></a>修改渲染模板部分</h6><p>默认actions的模板位置<br><code>/home/hanz/python_workspace/flushcount/templates/admin/delete_confirmation.html</code></p><p>修改actions调用的方法，确保调用的是你自己的复制方法；<br><code>&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;copy_action&quot; /&gt;</code></p><p>剩下的再做一点传参，提示语修改，基本也就OK了，如图：</p><p><img src="http://image.candymami.com/17-2-14/98045277-file_1487051259204_2634.png" alt="复制数据"></p><h4 id="delete-action"><a href="#delete-action" class="headerlink" title="delete_action"></a>delete_action</h4><p>覆写删除actions</p><p>数据的删除是比较危险的操作，如果你的系统是多用户的话，就应该避免多用户对数据所有数据都可以操作，所以，<br>你可以自己写delete_actions</p><h5 id="官网没有给出如何覆写delete-actions的方法，但看其他的actions，也应该差不到哪去。"><a href="#官网没有给出如何覆写delete-actions的方法，但看其他的actions，也应该差不到哪去。" class="headerlink" title="官网没有给出如何覆写delete_actions的方法，但看其他的actions，也应该差不到哪去。"></a>官网没有给出如何覆写delete_actions的方法，但看其他的actions，也应该差不到哪去。</h5><h6 id="自己增加delete-action"><a href="#自己增加delete-action" class="headerlink" title="自己增加delete_action"></a>自己增加delete_action</h6><p>相当于自己重写一个，使用delete_model方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_model</span><span class="params">(self, request, obj)</span>:</span></div><div class="line">    <span class="keyword">if</span> request.user.is_superuser:</div><div class="line">        obj.delete()</div></pre></td></tr></table></figure></p><h6 id="修改显示文案"><a href="#修改显示文案" class="headerlink" title="修改显示文案"></a>修改显示文案</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete_model.short_description = <span class="string">"delete selected"</span></div></pre></td></tr></table></figure><h6 id="分权限删除"><a href="#分权限删除" class="headerlink" title="分权限删除"></a>分权限删除</h6><h1 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h1><p>应该在判断数据是谁添加的，删除时只能是谁删除</p><p>目前没找到obj的user方法</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> modeladmin </tag>
            
            <tag> action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpMyAdmin导出excel文件解析时的坑</title>
      <link href="/2017/02/08/phpMyAdmin-export-excel-file-analysis/"/>
      <url>/2017/02/08/phpMyAdmin-export-excel-file-analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="phpMyAdmin导出excel文件，在解析时遇到的问题"><a href="#phpMyAdmin导出excel文件，在解析时遇到的问题" class="headerlink" title="phpMyAdmin导出excel文件，在解析时遇到的问题"></a>phpMyAdmin导出excel文件，在解析时遇到的问题</h2><h3 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h3><p>很多人都喜欢使用的WEB数据库管理系统，前几年非常流行，刚好我要查询对方数据库，<br>他们就用的这个</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>我的要求很简单，从他们库中导出数据文件，excel即可，然后自己解析，再进行处理数据<br><a id="more"></a></p><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>解析excel，当然首选简单好用的包，xlrd就很不错;</p><h4 id="xlrd"><a href="#xlrd" class="headerlink" title="xlrd"></a>xlrd</h4><p>但在读取时，总会报错；错误如下：</p><h5 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xlrd</div><div class="line">workbook = xlrd.open_workbook(<span class="string">"/home/hanz/book1.xls"</span>)</div></pre></td></tr></table></figure><p>结果是，报错如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xlrd.biffh.XLRDError: Unsupported format, or corrupt file: Expected BOF record;</div><div class="line">found &apos;&lt;html r&apos;&quot;</div></pre></td></tr></table></figure></p><h4 id="其他解析excel包"><a href="#其他解析excel包" class="headerlink" title="其他解析excel包"></a>其他解析excel包</h4><p>之后又试了pandas，巨大无比的一个解析数据的包，但同样无法解析。。。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="根据报错分析原因"><a href="#根据报错分析原因" class="headerlink" title="根据报错分析原因"></a>根据报错分析原因</h4><p>根据xlrd报的错，猜了一下原因，有可能导出的excel文件并不是正规的excel保存的那种；<br>里面的&lt;html就能看出来，中间是包含有html代码的，于是，用文本打开了看了一下，果然：</p><p><img src="http://image.candymami.com/17-2-8/44364820-file_1486535637317_11f27.png" alt="phpmyadmin-export-excel-file"></p><p>把后缀改为.html，直接就能浏览器打开了。。。果然是伪excel文件。。。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>知道原因了，解决起来就简单了</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>如果是html文件，那首选html解析的包就可以，不用去做正则匹配，这类解析包也有很多，比如：</p><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="external">beautifulsoup</a></p><p><a href="https://pythonhosted.org/pyquery" target="_blank" rel="external">pyquery</a></p><h4 id="选用"><a href="#选用" class="headerlink" title="选用"></a>选用</h4><p>在这里选用我的宗旨就是方便，人生苦短嘛。<br>所以就用pyquery喽。<br>语法非常方便！～<br>pyquery完全API点击这里：<a href="https://pythonhosted.org/pyquery/api.html" target="_blank" rel="external">PyQuery-API</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery</div><div class="line">f = PyQuery(<span class="string">"/home/hanz/o12_adsf.xls"</span>)</div><div class="line">doo = f(<span class="string">"tr"</span>)</div><div class="line">doo.text()</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在POST请求中，如何获取select的值</title>
      <link href="/2017/02/08/%E5%9C%A8POST%E8%AF%B7%E6%B1%82%E4%B8%AD%EF%BC%8C%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96select%E7%9A%84%E5%80%BC/"/>
      <url>/2017/02/08/%E5%9C%A8POST%E8%AF%B7%E6%B1%82%E4%B8%AD%EF%BC%8C%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96select%E7%9A%84%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="从页面POST请求中，如何获取select中option的值"><a href="#从页面POST请求中，如何获取select中option的值" class="headerlink" title="从页面POST请求中，如何获取select中option的值"></a>从页面POST请求中，如何获取select中option的值</h2><h3 id="GET方法中获取"><a href="#GET方法中获取" class="headerlink" title="GET方法中获取"></a>GET方法中获取</h3><p>通过GET方法传参，在request.GET中，可以获取到相对应的参数的值，<br>但POST方法中只能获取到input框中传的内容<br>如果真是这样的话，那就太恶心了，好在有stackoverflow</p><a id="more"></a><h3 id="stackoverflow中的解决办法"><a href="#stackoverflow中的解决办法" class="headerlink" title="stackoverflow中的解决办法"></a>stackoverflow中的解决办法</h3><p><a href="http://stackoverflow.com/questions/39200802/django-post-get-options-from-select" target="_blank" rel="external">解决方案</a></p><p><code>request.POST.getlist(&quot;name&quot;)[0]</code></p><p>在POST方法中居然还有个getlist，当时我debug时也没有看到有此方法，使用了一下，<br>果然可正常获取。</p><p>如图：</p><p><img src="http://image.candymami.com/django_requsts_post_getlist.png" alt="request.POST.getlist"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高分电影之地球脉动 Planet Earth Season</title>
      <link href="/2017/01/07/Planet-Earth-Season/"/>
      <url>/2017/01/07/Planet-Earth-Season/</url>
      
        <content type="html"><![CDATA[<h1 id="高分电影之地球脉动-Planet-Earth-Season"><a href="#高分电影之地球脉动-Planet-Earth-Season" class="headerlink" title="高分电影之地球脉动 Planet Earth Season"></a>高分电影之地球脉动 Planet Earth Season</h1><h2 id="地球脉动-第二季-Planet-Earth-Season-2-2016"><a href="#地球脉动-第二季-Planet-Earth-Season-2-2016" class="headerlink" title="地球脉动 第二季 Planet Earth Season 2 2016"></a>地球脉动 第二季 Planet Earth Season 2 2016</h2><blockquote><p>这部电影不用多说，通过独立鱼了解到的，看豆瓣评分就知道了：<a href="https://movie.douban.com/subject/26733371/" target="_blank" rel="external">豆瓣评分9.9</a><br>一共六集，每一集都很震撼，每一个镜头都非常精彩，每一个画面都是壁纸，精彩至极，美轮美奂。</p></blockquote><p><img src="http://image.candymami.com/17-11-28/18354933.jpg" alt="地球脉动"><br><a id="more"></a><br>我大电影天堂的资源，记录上；而且貌似腾讯视频把版权买下来了。</p><h3 id="【下载地址】"><a href="#【下载地址】" class="headerlink" title="【下载地址】"></a>【下载地址】</h3><p><a href="ftp://ygdy8:ygdy8@y219.dydytt.net:8201/[阳光电影www.ygdy8.com].地球脉动2.第一集.BD.720p.中英双字幕.mkv" target="_blank" rel="external">第一集</a><br><a href="ftp://ygdy8:ygdy8@y153.dydytt.net:8223/[阳光电影www.ygdy8.com].地球脉动2.第二集.BD.720p.中英双字幕.mkv" target="_blank" rel="external">第二集</a><br><a href="ftp://ygdy8:ygdy8@y219.dydytt.net:9225/[阳光电影www.ygdy8.com].地球脉动2.第三集.BD.720p.中英双字幕.mkv" target="_blank" rel="external">第三集</a><br><a href="ftp://ygdy8:ygdy8@y153.dydytt.net:9170/[阳光电影www.ygdy8.com].地球脉动2.第四集.BD.720p.中英双字幕.mkv" target="_blank" rel="external">第四集</a><br><a href="ftp://ygdy8:ygdy8@y219.dydytt.net:9225/[阳光电影www.ygdy8.com].地球脉动2.第五集.BD.720p.中英双字幕.mkv" target="_blank" rel="external">第五集</a><br><a href="ftp://ygdy8:ygdy8@y153.dydytt.net:9170/[阳光电影www.ygdy8.com].地球脉动2.第六集.BD.720p.中英双字幕.mkv" target="_blank" rel="external">第六集</a></p><h3 id="观影感受"><a href="#观影感受" class="headerlink" title="观影感受"></a>观影感受</h3><h4 id="第一集"><a href="#第一集" class="headerlink" title="第一集"></a>第一集</h4><h4 id="第二集"><a href="#第二集" class="headerlink" title="第二集"></a>第二集</h4><h4 id="第三集-雨林"><a href="#第三集-雨林" class="headerlink" title="第三集 雨林"></a>第三集 雨林</h4><h4 id="第四集"><a href="#第四集" class="headerlink" title="第四集"></a>第四集</h4><h4 id="第五集"><a href="#第五集" class="headerlink" title="第五集"></a>第五集</h4><h4 id="第六集"><a href="#第六集" class="headerlink" title="第六集"></a>第六集</h4><h2 id="地球脉动-第一季-Planet-Earth-Season-1-2006"><a href="#地球脉动-第一季-Planet-Earth-Season-1-2006" class="headerlink" title="地球脉动 第一季 Planet Earth Season 1 (2006)"></a>地球脉动 第一季 Planet Earth Season 1 (2006)</h2><blockquote><p>补上第一季，回头重温一遍：<a href="https://movie.douban.com/subject/1871906/" target="_blank" rel="external">豆瓣评分9.7</a></p></blockquote><p><img src="http://ww2.sinaimg.cn/mw690/af0de422gw1f1fgkdwyqvj207r0b4q3z.jpg" alt="地球脉动1"></p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="[下载地址]"></a>[下载地址]</h3><p><a href="ed2k://|file|%5B%E8%A1%8C%E6%98%9F%E5%9C%B0%E7%90%8301%5D.Planet.Earth.01.%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95.HR-HDTV.AC3.960X528.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.mkv|998975412|cd24991bb3210b270156576c4876ef64|h=ntrplgbi4jzk6rhqhveqoyecxx6nfxiq|/%20" target="_blank" rel="external">第一集</a><br><a href="ed2k://|file|%5B%E8%A1%8C%E6%98%9F%E5%9C%B0%E7%90%8302%5D.Planet.Earth.02.%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95.HR-HDTV.AC3.960X528.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.mkv|1006495160|2d74749d73de3a6510186a3112e1130a|h=cqlmfmilhyipyot7s5wpehasbdjjvlfd|/%20" target="_blank" rel="external">第二集</a><br><a href="ed2k://|file|%5B%E8%A1%8C%E6%98%9F%E5%9C%B0%E7%90%8303%5D.Planet.Earth.03.%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95.HR-HDTV.AC3.960X528.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.mkv|999102809|5db35d5591c92a3b5d80b6dcbffd9d72|h=b6f5t5jtnwehq7pmsbfjoohnltcgso5m|/%20" target="_blank" rel="external">第三集</a><br><a href="ed2k://|file|%5B%E8%A1%8C%E6%98%9F%E5%9C%B0%E7%90%8304%5D.Planet.Earth.04.%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95.HR-HDTV.AC3.960X528.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.mkv|999118732|29c6275de49faeb068a85baa7eaffcb2|h=j5xr6qlkkelfr76te4df7sride26qh24|/%20" target="_blank" rel="external">第四集</a><br><a href="ed2k://|file|%5B%E8%A1%8C%E6%98%9F%E5%9C%B0%E7%90%8305%5D.Planet.Earth.05.%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95.HR-HDTV.AC3.960X528.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.mkv|1006555512|402fdec03c404145f118f6830f5b0c8f|h=koaewrnxbs74me3dnynge6y6ohwllmvb|/%20" target="_blank" rel="external">第五集</a><br><a href="ed2k://|file|%5B%E8%A1%8C%E6%98%9F%E5%9C%B0%E7%90%8306%5D.Planet.Earth.06.%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95.HR-HDTV.AC3.960X528.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.mkv|999074319|7a27f1b9646585054a80729c8055b258|h=kf3a3i24evsgm34l6atwg7hdnaup2g3d|/%20" target="_blank" rel="external">第六集</a><br><a href="ed2k://|file|%5B%E8%A1%8C%E6%98%9F%E5%9C%B0%E7%90%8307%5D.Planet.Earth.07.%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95.HR-HDTV.AC3.960X528.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.mkv|999175302|d5fab1283e1873337e43e52b7c4e9396|h=bmsfh3diffj4ydjo6kkmfvbcgzzg255y|/%20" target="_blank" rel="external">第七集</a><br><a href="ed2k://|file|%5B%E8%A1%8C%E6%98%9F%E5%9C%B0%E7%90%8308%5D.Planet.Earth.08.%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95.HR-HDTV.AC3.960X528.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.mkv|1006370847|1973be54a704cb9fd6430c2aab1a0699|h=avbqzzdbmndzqibeehkxtyygp6b55blg|/%20" target="_blank" rel="external">第八集</a><br><a href="ed2k://|file|%5B%E8%A1%8C%E6%98%9F%E5%9C%B0%E7%90%8309%5D.Planet.Earth.09.%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95.HR-HDTV.AC3.960X528.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.mkv|998931813|5bbb7785ac26c7f4b28f7dfb92508d28|h=6ca2dtsgc4pqhmndr7t73agc534c3hg3|/%20" target="_blank" rel="external">第九集</a><br><a href="ed2k://|file|%5B%E8%A1%8C%E6%98%9F%E5%9C%B0%E7%90%8310%5D.Planet.Earth.10.%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95.HR-HDTV.AC3.960X528.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.mkv|999050396|7721c08ccfa202f384291473afbe1a37|h=snuzsnsqpz4mbpcymy6426ijqtwnsamt|/%20" target="_blank" rel="external">第十集</a><br><a href="ed2k://|file|%5B%E8%A1%8C%E6%98%9F%E5%9C%B0%E7%90%8311%5D.Planet.Earth.11.%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95.HR-HDTV.AC3.960X528.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.mkv|998835608|bb9f6c586ca9b6b69a1ea31729a7ac82|h=47doibafg6pefz4dyjq2ahsmxx4nfcfi|/" target="_blank" rel="external">第十一集</a></p><h3 id="共11集"><a href="#共11集" class="headerlink" title="共11集"></a>共11集</h3>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> 高分电影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高分电影 </tag>
            
            <tag> 地球脉动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django项目中jquery初探</title>
      <link href="/2017/01/05/jquery-in-django-project/"/>
      <url>/2017/01/05/jquery-in-django-project/</url>
      
        <content type="html"><![CDATA[<h1 id="django项目中jquery初探"><a href="#django项目中jquery初探" class="headerlink" title="django项目中jquery初探"></a>django项目中jquery初探</h1><blockquote><p>之前一直关注后端的技术与功能，今天在考虑自动化平台执行时，突然发现，前后端交互这块是个强需求，我想要的效果是，前端只需要点击，即可出结果，不用刷新页面。这样就不可避免的用到了ajax技术，那最简单的就是使用jquery框架了，这里简单的应用，记录一下。<br><a id="more"></a></p></blockquote><p>目前要做一个表格，点击按钮请求表格中的接口，并把相关数据通过ajax方式传输，<br>从而达到不用刷新页面显示请求结果的目地。</p><h3 id="视图view-py"><a href="#视图view-py" class="headerlink" title="视图view.py"></a>视图view.py</h3><blockquote><p>获取模板传过来的url做为参数，对url进行处理后，包装数据回传给模板，显示。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">req_func</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    请求方法</span></div><div class="line"><span class="string">    :param request:</span></div><div class="line"><span class="string">    :return:</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</div><div class="line">        url = request.GET[<span class="string">"url"</span>].strip()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            res = requests.get(url=url, timeout=<span class="number">10</span>)</div><div class="line">            code = res.status_code</div><div class="line">            time = res.elapsed.total_seconds()</div><div class="line">            <span class="keyword">if</span> <span class="string">"application/json"</span> <span class="keyword">in</span> res.headers.get(<span class="string">'Content-Type'</span>):</div><div class="line">                content = res.json()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                content = <span class="string">"not json type"</span></div><div class="line">            result = &#123;<span class="string">"code"</span>: code, <span class="string">"time"</span>: time, <span class="string">"content"</span>: json.dumps(content, indent=<span class="number">4</span>)&#125;</div><div class="line">            <span class="keyword">return</span> JsonResponse(result)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">return</span> HttpResponse(e)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><blockquote><p>模板中使用jquery的get方法，将数据组装后传，调用后端方法，进行请求，并接收回传结果并显示。<br>我是通过对id后面的数值判断拿的参数值，应该还有其他的方法，后期再研究一下。</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> "base/head.html" %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; title &#125;&#125;</span><span class="xml"> detail</span></div><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> env %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; env &#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> script %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="undefined"></span></span></div><div class="line"><span class="xml">        $(document).ready(function () &#123;</span></div><div class="line"><span class="xml">            $("button").click(function () &#123;</span></div><div class="line"><span class="xml">                </span><span class="comment">&#123;#                alert($(this).attr("id").slice(3));#&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">                var nowid = $(this).attr("id").slice(3);</span></div><div class="line"><span class="xml">                $.get("</span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> "interface:reqfunc" %&#125;</span><span class="xml">",</span></div><div class="line"><span class="xml">                        &#123;</span></div><div class="line"><span class="xml">                            url: $("#comurl" + nowid).text(),</span></div><div class="line"><span class="xml">                        &#125;,</span></div><div class="line"><span class="xml">                        function (ret) &#123;</span></div><div class="line"><span class="xml">                            $("#code" + nowid).text(ret.code);</span></div><div class="line"><span class="xml">                            $("#time" + nowid).text(ret.time + " S");</span></div><div class="line"><span class="xml">                            $("#content" + nowid).text(ret.content);</span></div><div class="line"><span class="xml">                        &#125;);</span></div><div class="line"><span class="xml">            &#125;);</span></div><div class="line"><span class="xml">            $("#hidden").click(function () &#123;</span></div><div class="line"><span class="xml">                $("#cont").toggle(speed, callback);</span></div><div class="line"><span class="xml">            &#125;)</span></div><div class="line"><span class="xml">        &#125;);</span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; url.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>num<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>接口<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>code<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>time<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>run<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></div><div class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> i <span class="keyword">in</span> params %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span></div><div class="line"><span class="xml">                        id="comurl</span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="xml">"&gt;</span><span class="template-variable">&#123;&#123; url.schame &#125;&#125;</span><span class="xml"></span><span class="template-variable">&#123;&#123; url.domain &#125;&#125;</span><span class="xml"></span><span class="template-variable">&#123;&#123; url.version.version &#125;&#125;</span><span class="xml"></span><span class="template-variable">&#123;&#123; url.path &#125;&#125;</span><span class="xml">?</span><span class="template-variable">&#123;&#123; i.query &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"code</span></span></span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"label label-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"time</span></span></span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"label label-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"run</span></span></span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>run<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"cont"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span></div><div class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></div><div class="line"><span class="xml">                                        </span><span class="template-tag">&#123;% <span class="name"><span class="name">autoescape</span></span> off %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">                                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"content</span></span></span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line"><span class="xml">                                        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endautoescape</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"hidden"</span>&gt;</span>hidden<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line"><span class="xml">                                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></div><div class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></div><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><blockquote><p>需要将视图层的数据做url指向</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml">url(r'^reqfunc/$', views.req_func, name="reqfunc"),</span></div></pre></td></tr></table></figure><p>目前就这些，参考资料后补。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu下使用Thunderbird连接Exchange邮件服务器</title>
      <link href="/2017/01/03/ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8Thunderbird%E8%BF%9E%E6%8E%A5Exchange%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2017/01/03/ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8Thunderbird%E8%BF%9E%E6%8E%A5Exchange%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu下使用Thunderbird连接Exchange邮件服务器"><a href="#ubuntu下使用Thunderbird连接Exchange邮件服务器" class="headerlink" title="ubuntu下使用Thunderbird连接Exchange邮件服务器"></a>ubuntu下使用Thunderbird连接Exchange邮件服务器</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司为了加强安全性，故邮件服务器改为了exchange，这样一来，需要修改下自己邮件客户端及配置；<br>exchange的设置跟普通的126,163又有些区别，这里记录一下，也方便ubuntu的用户。</p><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><a id="more"></a><p>插件下载地址：<a href="https://addons.mozilla.org/zh-CN/thunderbird/addon/exquilla-exchange-web-services/" target="_blank" rel="external">exquilla</a></p><p>插件安装和firefox浏览器一样，非常方便<br>免费使用60天</p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>60天肯定是不够用的，从网上找了个破解脚本，给力！</p><p>脚本下载：<a href="http://image.candymami.com/generater_license.py" target="_blank" rel="external">下载</a></p><h3 id="破解方法，引用文章"><a href="#破解方法，引用文章" class="headerlink" title="破解方法，引用文章"></a>破解方法，引用文章</h3><blockquote><p>可以看到，注册码被用逗号分成了四个部分：</p><ol><li>第一部分是注册类型，EX0是免费给的试用类型，我不知道EX1、EX2是什么情况，但试了下，EX1是可以用的</li><li>第二部分是邮件，<em>@</em>是免费给的60天试用的，这里要填有效的Exchange邮箱，可以在选项里Valid Emails里看到</li><li>第三部分是license过期日期。</li><li>第四部分是校验码，分别是前三个部分再加上356B4B5C算出来的MD5值。</li></ol><p>例如，注册类型EX1、Exchange邮箱i@ssfighter.com，到期日期2015-01-18，可以计算出MD5值为：</p><p>MD5(EX1,i@ssfighter.com,2015-01-18,356B4B5C)=<br>5253dbb7d2b5a6e152974b2003025ba9</p><p>用计算出的MD5值作为注册码的最后一部分即可注册成功。</p></blockquote><p>参考文章：<a href="http://blog.ssfighter.com/2015/01/exquilla-31-0-crack/" target="_blank" rel="external">破解方法</a></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="面包屑"><a href="#面包屑" class="headerlink" title="面包屑"></a>面包屑</h3><blockquote><p>工具 &gt;&gt; ExQuilla for Microsoft Exchange &gt;&gt; ExQuilla license options</p></blockquote><h3 id="如图"><a href="#如图" class="headerlink" title="如图"></a>如图</h3><p><img src="http://image.candymami.com/2017-01-03%2011-19-20%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE1.png" alt="设置"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> Thunderbird </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django中使用自定义context processor实现模板全局变量</title>
      <link href="/2016/12/30/django-use-custom-context-processor-achieve-template-global-variables/"/>
      <url>/2016/12/30/django-use-custom-context-processor-achieve-template-global-variables/</url>
      
        <content type="html"><![CDATA[<h1 id="django中使用自定义context-processor实现模板全局变量"><a href="#django中使用自定义context-processor实现模板全局变量" class="headerlink" title="django中使用自定义context processor实现模板全局变量"></a>django中使用自定义context processor实现模板全局变量</h1><h2 id="在视图中定义全局变量方法"><a href="#在视图中定义全局变量方法" class="headerlink" title="在视图中定义全局变量方法"></a>在视图中定义全局变量方法</h2><a id="more"></a><h3 id="在每个页面显示google指向的ip"><a href="#在每个页面显示google指向的ip" class="headerlink" title="在每个页面显示google指向的ip"></a>在每个页面显示google指向的ip</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">context_proc</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="string">"""获取google的ip指向，每个页面都需要显示"""</span></div><div class="line">    env = socket.getaddrinfo(<span class="string">"www.google.com"</span>, <span class="string">"http"</span>)[<span class="number">0</span>][<span class="number">4</span>][<span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">    <span class="string">"env"</span>: env,</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="如果有多个全局变量要显示，在return中添加即可"><a href="#如果有多个全局变量要显示，在return中添加即可" class="headerlink" title="如果有多个全局变量要显示，在return中添加即可"></a>如果有多个全局变量要显示，在return中添加即可</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line"><span class="string">"evn"</span>: evn,</div><div class="line"><span class="string">"host"</span>: host,</div><div class="line"><span class="string">"user"</span>: request.user,</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="将全局变量方法添加至setting中的Templates"><a href="#将全局变量方法添加至setting中的Templates" class="headerlink" title="将全局变量方法添加至setting中的Templates"></a>将全局变量方法添加至setting中的Templates</h2><h3 id="添加位置"><a href="#添加位置" class="headerlink" title="添加位置"></a>添加位置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">TEMPLATES = [</div><div class="line">    &#123;</div><div class="line">        <span class="string">'BACKEND'</span>: <span class="string">"..."</span>,</div><div class="line">        <span class="string">"..."</span>: <span class="string">"..."</span>,</div><div class="line">        <span class="string">"OPTIONS"</span>: &#123;</div><div class="line">            <span class="string">"context_processors"</span>: [</div><div class="line">                <span class="string">"..."</span>,</div><div class="line">                <span class="string">"views.context_proc"</span>,</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure><h2 id="在模板中引用即可"><a href="#在模板中引用即可" class="headerlink" title="在模板中引用即可"></a>在模板中引用即可</h2><h3 id="head-html"><a href="#head-html" class="headerlink" title="head.html"></a>head.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;% block env %&#125;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% block env %&#125;</div><div class="line">&#123;&#123; env &#125;&#125;</div><div class="line">&#123;% endblock %&#125;&#125;</div></pre></td></tr></table></figure><h2 id="关于setting-py"><a href="#关于setting-py" class="headerlink" title="关于setting.py"></a>关于setting.py</h2><p>setting中的各种设置参数都是对global_settings的覆写<br>可以引用后进行覆写</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> global_settings</div></pre></td></tr></table></figure><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p>一般位于<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python根目录/site-package/django/conf/global_setting.py</div></pre></td></tr></table></figure></p><h3 id="覆写"><a href="#覆写" class="headerlink" title="覆写"></a>覆写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALLOWED_HOSTS = []</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python安装PIL模块</title>
      <link href="/2016/12/29/python-install-PIL-module/"/>
      <url>/2016/12/29/python-install-PIL-module/</url>
      
        <content type="html"><![CDATA[<h1 id="python安装PIL模块"><a href="#python安装PIL模块" class="headerlink" title="python安装PIL模块"></a>python安装PIL模块</h1><blockquote><p>因为要获取图片的信息，所以需要PIL模块来解析</p></blockquote><p><a href="http://effbot.org/imagingbook/" target="_blank" rel="external">官方教程</a><br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -I --no-cache-dir -v Pillow</div></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div></pre></td></tr></table></figure><h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="comment"># 打开</span></div><div class="line">ima = Image.open(<span class="string">"test.png"</span>)</div><div class="line"><span class="comment"># 获取尺寸\类型等</span></div><div class="line"><span class="keyword">print</span> ima.format, ima.size, ima.mode</div><div class="line"><span class="comment">#Out[19]: PNG (400, 300) RGB</span></div></pre></td></tr></table></figure><h3 id="加载网络图片"><a href="#加载网络图片" class="headerlink" title="加载网络图片"></a>加载网络图片</h3><p>使用StringIO模块将文件写入内存，即伪装成file<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> StringIO</div><div class="line"><span class="keyword">import</span> requests</div><div class="line">res = requests.get(url=<span class="string">"http://car0.autoimg.cn/logo/brand/100/130549643705032710.jpg"</span>)</div><div class="line">resBuff = StringIO.StringIO(res.content)</div><div class="line">ima = Image.open(resBuff)</div><div class="line">ima.size</div><div class="line"><span class="comment">#Out[19]: (100, 100)</span></div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量删除redis keys</title>
      <link href="/2016/12/28/batch-delete-redis-key/"/>
      <url>/2016/12/28/batch-delete-redis-key/</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.candymami.com/17-5-12/1777863-file_1494579468916_12846.png" alt="redis"></p><h1 id="redis基本用法"><a href="#redis基本用法" class="headerlink" title="redis基本用法"></a>redis基本用法</h1><h2 id="连接redis库"><a href="#连接redis库" class="headerlink" title="连接redis库"></a>连接redis库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 127.0.0.1 -p 6070 -a password</div></pre></td></tr></table></figure><h2 id="选定数据库"><a href="#选定数据库" class="headerlink" title="选定数据库"></a>选定数据库</h2><p>默认数据库为0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select 0</div></pre></td></tr></table></figure></p><a id="more"></a><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="单条查询"><a href="#单条查询" class="headerlink" title="单条查询"></a>单条查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keys &quot;key&quot;</div></pre></td></tr></table></figure><h3 id="多条查询"><a href="#多条查询" class="headerlink" title="多条查询"></a>多条查询</h3><p>使用通配符*<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keys &quot;key*&quot;</div></pre></td></tr></table></figure></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="单独删除key"><a href="#单独删除key" class="headerlink" title="单独删除key"></a>单独删除key</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">del keys</div></pre></td></tr></table></figure><h3 id="批量删除keys"><a href="#批量删除keys" class="headerlink" title="批量删除keys"></a>批量删除keys</h3><p>利用linux中的xargs参数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">redis-cli keys "mobile*" | xargs redis-cli del</div><div class="line">//如果redis-cli没有设置成系统变量，需要指定redis-cli的完整路径</div><div class="line">//如：/opt/redis/redis-cli keys "*" | xargs /opt/redis/redis-cli del</div></pre></td></tr></table></figure></p><p>如果更改了redis端口，则需要指定端口-p<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 127.0.0.1 -p 6070 keys "mobile*" | xargs redis-cli -h 127.0.0.1 -p 6070 del</div></pre></td></tr></table></figure></p><p>如果要指定redis库，则使用-n<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//下面的命令指定数据序号为0，即默认数据库</div><div class="line">redis-cli -h 127.0.0.1 -p 6070 keys "mobile*" -n 0 | xargs redis-cli -h 127.0.0.1 -p 6070 -n 0 del</div></pre></td></tr></table></figure></p><h3 id="全部删除"><a href="#全部删除" class="headerlink" title="全部删除"></a>全部删除</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//删除当前数据库中的所有Key</div><div class="line">flushdb</div><div class="line"></div><div class="line">//删除所有数据库中的key</div><div class="line">flushall</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 常用工具</title>
      <link href="/2016/12/28/ubuntu-commonly-used-tools/"/>
      <url>/2016/12/28/ubuntu-commonly-used-tools/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu常用工具"><a href="#Ubuntu常用工具" class="headerlink" title="Ubuntu常用工具"></a>Ubuntu常用工具</h1><blockquote><p>收集了ubuntu下常用的小工具</p></blockquote><a id="more"></a><h3 id="版本控制软件GUI版"><a href="#版本控制软件GUI版" class="headerlink" title="版本控制软件GUI版"></a>版本控制软件GUI版</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>按照wiki安装，rabbitvcs<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-add-repository universe</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install rabbitvcs-nautilus</div></pre></td></tr></table></figure></p></blockquote><p><a href="http://wiki.rabbitvcs.org/wiki/install/ubuntu" target="_blank" rel="external">WIKI</a></p><h4 id="安装完毕重启"><a href="#安装完毕重启" class="headerlink" title="安装完毕重启"></a>安装完毕重启</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nautilus -q</div></pre></td></tr></table></figure><h4 id="安装完成效果图"><a href="#安装完成效果图" class="headerlink" title="安装完成效果图"></a>安装完成效果图</h4><p><img src="http://image.candymami.com/16-12-28/59784456-file_1482905990308_3716.png" alt="效果图1"></p><blockquote><p>以下引用<br><a href="http://kuanghy.github.io/2016/09/01/linux-softwares" target="_blank" rel="external">旷世的忧伤博客</a></p></blockquote><h3 id="Transmission"><a href="#Transmission" class="headerlink" title="Transmission"></a>Transmission</h3><p>Transmission 是一种 BitTorrent 客户端，特点是一个跨平台的后端和其上的简洁的用户界面。BT 种子一种“.torrent”文件，装有BT（BitTorrent）下载必须的文件信息，作用相当于HTTP下载里的URL链接</p><h3 id="gimp"><a href="#gimp" class="headerlink" title="gimp"></a>gimp</h3><p>图形处理</p><h3 id="steam"><a href="#steam" class="headerlink" title="steam"></a>steam</h3><p>游戏客户端</p><h3 id="bleachbit"><a href="#bleachbit" class="headerlink" title="bleachbit"></a>bleachbit</h3><p>系统记录清理工具</p><h3 id="xdman"><a href="#xdman" class="headerlink" title="xdman"></a>xdman</h3><p>Xtreme Download Manager, 下载管理器</p><h3 id="preload"><a href="#preload" class="headerlink" title="preload"></a>preload</h3><p>Preload 是一个自适应预读守护进程。它监控用户运行的应用程序，并且分析这些数据，预测用户可能运行的程序，并读取这些程序的二进制文件及其依赖文件到系统内存，以达到加速启动的时间。Preload 将在后台静静运行。如果你想改变 Preload 的行为，你可以编辑它的配置文件 /etc/preload.conf。</p><h3 id="apt-fast"><a href="#apt-fast" class="headerlink" title="apt-fast"></a>apt-fast</h3><p>Apt-fast 是一款替代 apt-get 提升下载速度的软件，安装软件时，通过增加线程使下载软件速度加快。 Apt-fast 已经更新到1.6.4版本，引入配置“对话框”，在其安装过程中，一步步对话框选择设置，每个用户的配置选项，从而改善和清晰化 Apt-fast的初始配置过程。</p><h3 id="AppGrid"><a href="#AppGrid" class="headerlink" title="AppGrid"></a>AppGrid</h3><p>一个优秀的Ubuntu软件中心替代品</p><h3 id="diffuse"><a href="#diffuse" class="headerlink" title="diffuse"></a>diffuse</h3><p>文件比较工具</p><h3 id="ReText"><a href="#ReText" class="headerlink" title="ReText"></a>ReText</h3><p>markdown 文档编辑器</p><h3 id="配置数学公式："><a href="#配置数学公式：" class="headerlink" title="配置数学公式："></a>配置数学公式：</h3><p>有时候需要在文档中添加一些数学公式，比如时间复杂度什么的O(N2)，其实，我发现Github官网的页面是不支持的，不知道是不是Github有自己的数学公式输入格式。</p><p>在Retext下想使用，首先应该先安装MathJax</p><p><code>sudo apt-get install libjs-mathjax</code><br>安装好后，打开ReText的设置界面，在Markdown extensions框里添加字段：mathjax，重启ReText，输入公式，如 N32 ，OK！</p><p>添加语法高亮：<br>ReText支持语法高亮，但需要在在Markdown extensions框里添加字段：codehilite，同时，需要下载安装高亮支持模块python-pygments：</p><p><code>sudo apt-get install python-pygments</code><br>这个方法来自与ReText的扩展说明, 文档里的扩展功能添加进ReText的Markdown extensions时，都必须该成小写字母，否则无效！同时，两个扩展之间用英文逗号分割。</p><h3 id="Remarkable"><a href="#Remarkable" class="headerlink" title="Remarkable"></a>Remarkable</h3><p>Remarkable, Linux 下的 markdown 文档编辑器。</p><h3 id="brackets"><a href="#brackets" class="headerlink" title="brackets"></a>brackets</h3><p>Web 前端编辑器</p><h3 id="terminology"><a href="#terminology" class="headerlink" title="terminology"></a>terminology</h3><p>万能的终端工具</p><h3 id="terminator"><a href="#terminator" class="headerlink" title="terminator"></a>terminator</h3><p>一个不错的终端工具</p><h3 id="terminix"><a href="#terminix" class="headerlink" title="terminix"></a>terminix</h3><p>GTK3 终端模拟器</p><h3 id="TermKit"><a href="#TermKit" class="headerlink" title="TermKit"></a>TermKit</h3><p>TermKit 是由 Steven Wittens 为 MacOS X 编写的一个很有趣的项目，可以称之为下一代的富媒体终端。</p><h3 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h3><p>Tmux 是一个优秀的终端复用软件。使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机。</p><h3 id="nmon"><a href="#nmon" class="headerlink" title="nmon"></a>nmon</h3><p>Nmon（nigel’s monitor 的简写）是一个显示系统性能信息的工具,可以显示与 netwrok，cpu, memory 和磁盘使用情况的信息。</p><h3 id="ncdu"><a href="#ncdu" class="headerlink" title="ncdu"></a>ncdu</h3><p>是一个支持光标的 du 程序，这个命令是用来分析各种目录占用的磁盘空间。按 n 则通过文件名来排序，按 s 则按文件大小来排序（默认的）。</p><h3 id="dstat"><a href="#dstat" class="headerlink" title="dstat"></a>dstat</h3><p>一种灵活的组合工具，它可用于监控内存，进程，网络和磁盘性能，它可以用来取代 ifstat, iostat, dmstat 等。</p><h3 id="slurm"><a href="#slurm" class="headerlink" title="slurm"></a>slurm</h3><p>一个网卡带宽监控命令行实用程序，它会自动生成 ASCII 图形输出。安装:</p><p><code>apt-get install slurm</code><br>使用：</p><p><code>slurm -i &lt;网卡名称&gt;</code></p><h3 id="ranwhen-py"><a href="#ranwhen-py" class="headerlink" title="ranwhen.py"></a>ranwhen.py</h3><p>一种基于 Python 的终端工具，它可以用来以图形方式显示系统活动状态</p><h3 id="plymouth-manager"><a href="#plymouth-manager" class="headerlink" title="plymouth-manager"></a>plymouth-manager</h3><p>修改开机登录界面。可以美化你Ubuntu的启动主题Plymouth，下载：<a href="https://launchpad.net/plymouth-manager/+download" target="_blank" rel="external">https://launchpad.net/plymouth-manager/+download</a></p><h3 id="kazam"><a href="#kazam" class="headerlink" title="kazam"></a>kazam</h3><p>屏幕录制软件</p><h3 id="firebug"><a href="#firebug" class="headerlink" title="firebug"></a>firebug</h3><p>火狐插件，Web开发者调试工具</p><h3 id="okular"><a href="#okular" class="headerlink" title="okular"></a>okular</h3><p>阅读器，可用于阅读pdf，也可用于阅读epub电子书。</p><h3 id="ranger"><a href="#ranger" class="headerlink" title="ranger"></a>ranger</h3><p>基于终端的文件浏览器</p><h3 id="lolcat"><a href="#lolcat" class="headerlink" title="lolcat"></a>lolcat</h3><p><code>输入彩色文本，例如 cat “hello world”    lolcat</code></p><h3 id="cmatrix"><a href="#cmatrix" class="headerlink" title="cmatrix"></a>cmatrix</h3><p>终端打印矩阵</p><h3 id="Weather-Indicator-Applet-天气预报"><a href="#Weather-Indicator-Applet-天气预报" class="headerlink" title="Weather Indicator Applet (天气预报)"></a>Weather Indicator Applet (天气预报)</h3><p>安装命令：</p><p><code>sudo apt-get install indicator-weather</code></p><h3 id="ClassicMenu"><a href="#ClassicMenu" class="headerlink" title="ClassicMenu"></a>ClassicMenu</h3><p>经典的 GNOME2 菜单, 安装命令：</p><p><code>sudo apt-add-repository ppa:diesch/testing</code></p><p><code>sudo apt-get update</code></p><p><code>sudo apt-get install classicmenu-indicator</code></p><h3 id="Caffeine（咖啡因）"><a href="#Caffeine（咖啡因）" class="headerlink" title="Caffeine（咖啡因）"></a>Caffeine（咖啡因）</h3><p>你怎样确保你的电脑不会在放一部精彩的电影中途突然休眠呢？Caffeine 会帮助你解决这个问题。当然，你并不需要为你的电脑泡一杯咖啡。你只需要安装一个轻量级的指示器 —— Caffeine。只要当前你是全屏模式，它就会禁用你的屏幕保护程序、锁屏程序，让你的电脑不会因为没有在任务中而进入睡眠模式。</p><p><code>sudo add-apt-repository ppa:caffeine-developers/ppa</code></p><p><code>sudo apt-get update</code></p><p><code>sudo apt-get install caffeine</code></p><p><code>sudo apt-get install libappindicator3-1 gir1.2-appindicator3-0.1</code></p><h3 id="gparted"><a href="#gparted" class="headerlink" title="gparted"></a>gparted</h3><p>格式化、分区工具</p><h3 id="cheat"><a href="#cheat" class="headerlink" title="cheat"></a>cheat</h3><p>Linux 命令备忘清单，<a href="https://github.com/chrisallenlane/cheat" target="_blank" rel="external">https://github.com/chrisallenlane/cheat</a></p><h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h3><p>htop 是一个更加先进的交互式的实时监控工具。htop 与 top 命令非常相似，但是他有一些非常丰富的功能，如用户友好界面管理进程、快捷键、横向和纵向进程等更多的。htop 是一个第三方工具并不包括在 Linux 系统中，你需要使用包管理工具进行安装。</p><h3 id="Tickeys"><a href="#Tickeys" class="headerlink" title="Tickeys"></a>Tickeys</h3><p>Tickeys是一款很强大的键盘音效软件。Tickeys 自带多种声音效果方案，有打字机、冒泡、机械键盘、剑气等。每天都听着键盘声音是不是很烦闷，现在有了这款神器你就可以瞬间帮助自己的键盘加上逼格特效。<a href="https://github.com/BillBillBillBill/Tickeys-linux/" target="_blank" rel="external">https://github.com/BillBillBillBill/Tickeys-linux/</a></p><h3 id="festival"><a href="#festival" class="headerlink" title="festival"></a>festival</h3><p>语音合成软件,安装使用参考:<a href="https://linuxtoy.org/archives/festival_on_ubuntu.html" target="_blank" rel="external">https://linuxtoy.org/archives/festival_on_ubuntu.html</a></p><h3 id="autossh"><a href="#autossh" class="headerlink" title="autossh"></a>autossh</h3><p>自动重连 ssh</p><h3 id="SysPeek"><a href="#SysPeek" class="headerlink" title="SysPeek"></a>SysPeek</h3><p>系统指示器, 安装：</p><p><code>sudo add-apt-repository ppa:nilarimogard/webupd8</code><br><code>sudo apt-get update</code><br><code>sudo apt-get install syspeek</code></p><h3 id="lnav"><a href="#lnav" class="headerlink" title="lnav"></a>lnav</h3><p>lnav 工具是在终端界面看日志的神器</p><h3 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h3><p>命令行翻墙代理， 配置文件 /etc/proxychains.conf</p><h3 id="Touchpad-Indicator-触摸板开关"><a href="#Touchpad-Indicator-触摸板开关" class="headerlink" title="Touchpad Indicator (触摸板开关)"></a>Touchpad Indicator (触摸板开关)</h3><p><code>sudo add-apt-repository ppa:atareao/atareao</code><br><code>sudo apt-get update</code><br><code>sudo apt-get install touchpad-indicator</code></p><h3 id="Keylock-Application-Indicator-（显示大写键状态）"><a href="#Keylock-Application-Indicator-（显示大写键状态）" class="headerlink" title="Keylock Application Indicator （显示大写键状态）"></a>Keylock Application Indicator （显示大写键状态）</h3><p><code>sudo add-apt-repository ppa:tsbarnes/indicator-keylock</code><br><code>sudo apt-get update</code><br><code>sudo apt-get install indicator-keylock</code></p><h3 id="apparmor"><a href="#apparmor" class="headerlink" title="apparmor"></a>apparmor</h3><p>Linux 进程权限控制</p><h3 id="Fabric"><a href="#Fabric" class="headerlink" title="Fabric"></a>Fabric</h3><p>Fabric 是一个用 Python 编写的命令行工具库，它可以帮助系统管理员高效地执行某些任务，比如通过 SSH 到多台机器上执行某些命令，远程布署应用等。</p><h3 id="Dia"><a href="#Dia" class="headerlink" title="Dia"></a>Dia</h3><p>跨平台的流程图绘制程序, 基于GTK的图形（diagram）绘制程序，适用于Linux, Unix和Windows, 下载：<a href="https://sourceforge.net/projects/dia-installer/" target="_blank" rel="external">https://sourceforge.net/projects/dia-installer/</a></p><h3 id="Taskwarrior"><a href="#Taskwarrior" class="headerlink" title="Taskwarrior"></a>Taskwarrior</h3><p>TASKWARRIOR 是一个很棒的命令行 TODO 工具。Ubuntu安装：</p><p><code>sudo apt-get install task</code><br>Mac 安装：</p><p><code>brew install task</code></p><h3 id="Python-Sphinx"><a href="#Python-Sphinx" class="headerlink" title="Python Sphinx"></a>Python Sphinx</h3><p>Sphinx 是一个非常棒的文档的工具，它采用 reStructuredText 标记语言编写文档，然后可以将文档导出成 html、pdf 等格式。中文参考文档。</p><p>安装：</p><p><code>pip install sphinx</code></p><h3 id="ACK"><a href="#ACK" class="headerlink" title="ACK"></a>ACK</h3><p>ACK 比 grep 更好的搜索工具。</p><h3 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h3><p>Electron 框架的前身是 Atom Shell，可以让你写使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。它是基于io.js 和 Chromium 开源项目，并用于在 Atom 编辑器中。Electron 是开源的，由 GitHub 维护，有一个活跃的社区。最重要的是，Electron 应用服务构建和运行在 Mac，Windows 和 Linux。</p><h3 id="Speedtest"><a href="#Speedtest" class="headerlink" title="Speedtest"></a>Speedtest</h3><p>带宽测试工具, 安装:</p><p><code>pip install speedtest-cli</code><br>也可以直接访问网页版: Speedtest.net</p><h3 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h3><p>将文件按行并列显示：</p><p><code>paste test.txt test2.txt test3.txt</code></p><h3 id="expand"><a href="#expand" class="headerlink" title="expand"></a>expand</h3><p>将文件的制表符（TAB）转换为空白字符（space），将结果显示到标准输出设备。-t 参数可以指定制表符的参数。示例：</p><p><code>expand -t 4 test.txt &gt; test1.txt</code></p><h3 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h3><p>charles<br>Fiddler<br>wireshark<br>mitmproxy</p><h3 id="pwgen"><a href="#pwgen" class="headerlink" title="pwgen"></a>pwgen</h3><p>一个生成随机、无特殊含义但可以正常拼读的密码。安装：</p><p><code>sudo apt-get install pwgen</code><br>生成14位不含大写字母的密码：</p><p><code>pwgen -A 14</code></p><p>参数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-c 或 --capitalize 生成的密码中至少包含一个大写字母</div><div class="line">-A 或 --no-capitalize 生成的密码中不含大写字母</div><div class="line">-n 或 --numerals 生成的密码中至少包含一个数字</div><div class="line">-0 或 --no-numerals 生成的密码中不含数字</div><div class="line">-y 或 --symbols 生成的密码中至少包含一个特殊字符</div><div class="line">-s 或 --secure 生成一个完全随机的密码</div><div class="line">-B 或 --ambiguous 生成的密码中不含易混淆字符</div><div class="line">-h 或 --<span class="built_in">help</span> 输出帮助信息</div><div class="line">-H 或 --sha1=path/to/file[<span class="comment">#seed] 使用指定文件的 sha1 哈希值作为随机生成器</span></div><div class="line">-C 按列输出生成的密码</div><div class="line">-1 不按列输出生成的密码</div><div class="line">-v 或 --no-vowels 不使用任何元音，以免意外生成让人讨厌的单词</div></pre></td></tr></table></figure></p><h3 id="Zeal"><a href="#Zeal" class="headerlink" title="Zeal"></a>Zeal</h3><p>Zeal 是一个简单的离线 API 文档浏览器，仿照 Dash（一个 OSX 应用） 写成，能在 Linux 和 Windows 上使用。<br>Linux 下安装和使用可以参考: <a href="http://xmodulo.com/browse-search-api-documentation-offline-linux.html" target="_blank" rel="external">http://xmodulo.com/browse-search-api-documentation-offline-linux.html</a></p><h3 id="ack"><a href="#ack" class="headerlink" title="ack"></a>ack</h3><p>Ack 是比 grep 更快的文本搜索工具</p><h3 id="Ag"><a href="#Ag" class="headerlink" title="Ag"></a>Ag</h3><p>Ag 是比 grep、ack 更快的搜索工具</p><h3 id="ccat"><a href="#ccat" class="headerlink" title="ccat"></a>ccat</h3><p>Ccat 是 cat 的着色版本，可以对输出文本进行语法高亮</p><h3 id="Insomnia"><a href="#Insomnia" class="headerlink" title="Insomnia"></a>Insomnia</h3><p>Insomnia 跨平台的、免费的 REST 客户端</p><hr><blockquote><p>星期二, 14. 十一月 2017 02:03下午 更新</p></blockquote><h3 id="cairo-dock"><a href="#cairo-dock" class="headerlink" title="cairo-dock"></a>cairo-dock</h3><p>一款炫酷的启动面板：Cairo Dock</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:cairo-dock-team/ppa</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install cairo-dock cairo-dock-plug-ins</div></pre></td></tr></table></figure><p><a href="http://glx-dock.org/" target="_blank" rel="external">glx-dock.org</a><br><img src="http://image.candymami.com/17-11-14/24222208.jpg" alt="cairo-dock"></p><h3 id="f-lux"><a href="#f-lux" class="headerlink" title="f.lux"></a>f.lux</h3><p>屏幕去蓝光</p><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:nathan-renniewaldock/flux</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install fluxgui</div></pre></td></tr></table></figure><p><a href="https://justgetflux.com/" target="_blank" rel="external">f.lux</a><br><img src="http://image.candymami.com/17-11-14/90305063.jpg" alt="f.lux"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 常用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit7: The Sampler</title>
      <link href="/2016/12/21/Unit7-The-Sampler/"/>
      <url>/2016/12/21/Unit7-The-Sampler/</url>
      
        <content type="html"><![CDATA[<h1 id="Unit-Seven-The-Sampler"><a href="#Unit-Seven-The-Sampler" class="headerlink" title="Unit Seven: The Sampler"></a>Unit Seven: The Sampler</h1><a id="more"></a><p>The author finds out that good intentions alone are not enough when<br>his attempt to be kind to an old man leaves them both feeling worse than<br>before.</p><p><strong>find out</strong></p><p>I have often wondered whether some people, who had no intention of making a purchase,<br>would take advantage of this privilege.</p><p>我经常会奇怪，<br>One day I asked this question of shop girl, and I learned it was indeed the case.</p><p>有一天我问了店员女孩这个问题，<br>“Now there’s one old gentleman, for instance,” she told me, “ he comes here<br>almost every week and samples each one of the puddings, though he never buys<br>anything, and I suspect he never will. I remember him from last year before<br>that, too. Well, let him come if he wants it, and welcome to it. And what’s more<br>, I hope there are a lot more stores where he can go and get his share. He looks as<br>if he needed it all right, and I suppose they can afford it .”</p><p>She was still speaking when an elderly gentleman limped up to the counter and<br>began looking closely at the row of puddings with great interest.</p><p>“Why, that’s the very gentleman I’ve been telling you about,” whispered the shop girl.”<br>Just watch him now. “And then turning to him:” Would you like to sample them, sir? Here’s<br>spoon for you to use.”</p><p>The elderly gentleman, who was poorly but neatly dressed, accepted the spoon and began eagerly<br>to sample one after another of the puddings, only braking off occasionally to wipe his<br>red eyes with a large torn handkerchief.</p><p>“This is quite good.”</p><p>“This is not bad either, but a little too heavy.”</p><p>All the time it was quite evident that he sincerely believed that he might eventually buy one<br>of these puddings, and I am positive that he did not for a moment feel that he was in any way cheating<br>the store. Poor old chap! Probably he had come down in the world and this sampling was all that was<br>left him from the time when he could afford to come and select his favorite pudding.</p><p>Amidst the crowd of happy, prosperous looking Christmas shoppers, the little black figure of the of<br>man seemed pitiful and out of place, and in a burst of benevolence, I went up to him and said:<br>“Pardon me, sir, will you do me a favor? Let me purchase you one of these puddings. It would give me<br>such pleasure.”</p><p>He jumped back as if he had been stung, and the blood rushed into his wrinkled face.</p><p>“Excuse me,” he said, with more dignity than I would have thought possible</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> english </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口自动化，用例分析</title>
      <link href="/2016/12/20/Interface-automation-and-use-case-analysis/"/>
      <url>/2016/12/20/Interface-automation-and-use-case-analysis/</url>
      
        <content type="html"><![CDATA[<h1 id="用例分析"><a href="#用例分析" class="headerlink" title="用例分析"></a>用例分析</h1><a id="more"></a><h2 id="基础用例"><a href="#基础用例" class="headerlink" title="基础用例"></a>基础用例</h2><h3 id="request-params"><a href="#request-params" class="headerlink" title="request params"></a>request params</h3><h4 id="可选项"><a href="#可选项" class="headerlink" title="可选项"></a>可选项</h4><p>针对入参中的参数，对可选参数与必选参数进行组合请求，关注结果；</p><h4 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h4><p>传入参数值包含大量非正常数据，包括特殊字符，无意义串</p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>待补充</p><h3 id="response-data"><a href="#response-data" class="headerlink" title="response data"></a>response data</h3><h4 id="timespend"><a href="#timespend" class="headerlink" title="timespend"></a>timespend</h4><p>请求接口的用时，可做为参考</p><h4 id="对比-diff"><a href="#对比-diff" class="headerlink" title="对比(diff)"></a>对比(diff)</h4><p>对返回结果中，选取一级key值和二级key值，与正确返回值中的对应项进行对比；<br>确保无随意的增删字段产生</p><h4 id="检查项"><a href="#检查项" class="headerlink" title="检查项"></a>检查项</h4><p>根据业务中的统一规则，对返回数据中的必要项目进行检查：<br>包括：</p><table><thead><tr><th>功能</th><th>结果</th></tr></thead><tbody><tr><td>status_code</td><td>200</td></tr><tr><td>所有key</td><td>小写</td></tr><tr><td>一级key</td><td>标准4个</td></tr><tr><td>returncode</td><td>0</td></tr><tr><td>结果中的url链接</td><td>2××、3××</td></tr></tbody></table><h2 id="业务用例-灰盒测试代码"><a href="#业务用例-灰盒测试代码" class="headerlink" title="业务用例(灰盒测试代码)"></a>业务用例(灰盒测试代码)</h2><h3 id="业务情景的基础用例覆盖"><a href="#业务情景的基础用例覆盖" class="headerlink" title="业务情景的基础用例覆盖"></a>业务情景的基础用例覆盖</h3><p>针对产品需求，对业务逻辑写测试代码，其中有判断条件，基于一定数据环境；</p><h3 id="多数据覆盖"><a href="#多数据覆盖" class="headerlink" title="多数据覆盖"></a>多数据覆盖</h3><p>因无法修改源接口返回数据源（另外，修改起来代价太大，各业务方都有数据），所以<br>尽可能的对线上数据进行遍历操作</p><h4 id="自动生成用例代码"><a href="#自动生成用例代码" class="headerlink" title="自动生成用例代码"></a>自动生成用例代码</h4><p>针对入参为城市、省份、品牌、车型、车系等可控数据，进行大范围\全范围遍历</p><p>通过对<strong>init</strong>的覆写，来继承已完成的测试类；</p><h4 id="自动化生成报告代码"><a href="#自动化生成报告代码" class="headerlink" title="自动化生成报告代码"></a>自动化生成报告代码</h4><p>使用HtmlTestRunner.py生成报告</p><p>但因为如果用上面生成大范围用例，就可能出现大量的测试类，这时候需要将上千个测试类组装<br>到一起进行生成报告</p><h2 id="页面组装"><a href="#页面组装" class="headerlink" title="页面组装"></a>页面组装</h2><p>希望把以上的功能集成至前端页面中，通过点击按钮的方式自动操作</p><h3 id="组织结构设计"><a href="#组织结构设计" class="headerlink" title="组织结构设计"></a>组织结构设计</h3><p>将执行脚本、生成用例脚本、生成报告脚本做目录区分</p><p>对每一次测试执行结果都进行保存</p><h3 id="celery应用"><a href="#celery应用" class="headerlink" title="celery应用"></a>celery应用</h3><p>因为生成报告时间长、无需立即查看报告状态这些特点，可将生成报告做成异步</p><h2 id="线上巡查"><a href="#线上巡查" class="headerlink" title="线上巡查"></a>线上巡查</h2>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化 </tag>
            
            <tag> 用例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016年度总结与复习冲刺阶段</title>
      <link href="/2016/12/19/Summary-of-year-2016/"/>
      <url>/2016/12/19/Summary-of-year-2016/</url>
      
        <content type="html"><![CDATA[<h1 id="2016年终总结与复习汇总，用来记录"><a href="#2016年终总结与复习汇总，用来记录" class="headerlink" title="2016年终总结与复习汇总，用来记录"></a>2016年终总结与复习汇总，用来记录</h1><p><img src="http://image.candymami.com/17-5-9/64847872-file_1494299007302_51eb.jpg" alt=""><br><a id="more"></a></p><h2 id="复习汇总"><a href="#复习汇总" class="headerlink" title="复习汇总"></a>复习汇总</h2><h3 id="deadline"><a href="#deadline" class="headerlink" title="deadline"></a>deadline</h3><table><thead><tr><th style="text-align:right">subject</th><th style="text-align:right">endtime</th></tr></thead><tbody><tr><td style="text-align:right">data structure</td><td style="text-align:right">2017.01.08 am</td></tr><tr><td style="text-align:right">english</td><td style="text-align:right">2017.01.08 pm</td></tr></tbody></table><h3 id="English"><a href="#English" class="headerlink" title="English"></a>English</h3><h4 id="vocabulary"><a href="#vocabulary" class="headerlink" title="vocabulary"></a>vocabulary</h4><p>背单词就靠她了<a href="https://quizlet.com/yangeren" target="_blank" rel="external">Quizlet</a></p><p>自己把单词录入一遍，加深记忆，然后再背；<br>目前后面的几章都没录呢。。。</p><h4 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h4><ol><li>There was a place for everything and everything was always in its place.</li></ol><p><code>样样东西都有个固定的地方，且每个东西总有他合适的地方</code></p><ol><li>I was really amazed at what I saw.</li></ol><p><code>我对我看到的情况感到惊讶</code></p><ol><li>In a certain store where they sell pudding a number of these delicious thiings are laid out in row during the Chrismas season.</li></ol><p><code>有一家出售布丁的商店，每年圣诞节期间都把许多这类美味的食品摆成一排供顾客选购</code></p><ol><li>The elderly gentleman who was poorly but neatly dressed.</li></ol><p><code>这位老先生衣着虽然破旧，但却十分整洁</code></p><ol><li>This is not bad either, but a little too heavy.</li></ol><p><code>这种也不错，可是稍微腻了一点。</code></p><ol><li>And that was the last I saw or heard of the old man.</li></ol><p><code>打这以后我再也没有看到这位老人，也没有听到过有关他的情况。</code></p><ol><li>But appear to be shocked into such deep pleasure that speech had escaped me.</li></ol><p><code>而是看上去惊喜得连话也说不出来了。</code></p><ol><li>It never really worked until the actors managed to cry a few quiet tears.</li></ol><p><code>直到演员们设法哭出几滴无声的眼泪时才真正起到了作用。</code></p><ol><li>Don’t carry on about it.</li></ol><p><code>别大惊小怪了。</code></p><ol><li>We have come to the conclusion.</li></ol><p><code>根据上周发射的卫星所提供的资料。</code></p><h4 id="sentence-pattern"><a href="#sentence-pattern" class="headerlink" title="sentence pattern"></a>sentence pattern</h4><p>把老师特意备注的几种句型的用法总结起来，目前已经总结了<br><a href="http://sugar.yer.pub/2016/12/16/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%99%9A%E6%8B%9F%E8%AF%AD%E6%B0%94%E7%9A%84%E7%94%A8%E6%B3%95%E5%8F%8A%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">虚拟语气</a><br>的用法，其它语法还有待整理。</p><h4 id="期末考试–复习内容"><a href="#期末考试–复习内容" class="headerlink" title="期末考试–复习内容"></a>期末考试–复习内容</h4><ol><li>考试内容及题型</li><li>生词(unit6-10)</li><li>课文（重点句子）(unit6-10)</li><li>课后练习(unit6-10)</li></ol><h5 id="考试内容及题型"><a href="#考试内容及题型" class="headerlink" title="考试内容及题型"></a>考试内容及题型</h5><p>Unit6-unit10<br>题型（第一次考试40分，补考100分）：<br>选择题：20%，20题，共20分<br>完型句子：10%，5题，共10分<br>阅读：10%，2篇，共10分<br>英译汉翻译：20%，10题，共20分</p><h5 id="生词-unit6-10"><a href="#生词-unit6-10" class="headerlink" title="生词(unit6-10)"></a>生词(unit6-10)</h5><p>Unit6:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">efficiency  n.  效率   inefficiency无效率的</div><div class="line">elementary adj. 初等的，初级的     elementary school 小学     middle school中学</div><div class="line">expert n. 专家    be expert at/in doing做。。。在行</div><div class="line">foundation n. （物理的）基础   basis抽象的基础</div><div class="line">found v.成立  founded过去式    Fund n. 资金，基金</div><div class="line">findings n. （调查或研究的）结果</div><div class="line">unfortunately .adv 不幸的是，遗憾的是  misfortune n.不幸    unlikely不太可能</div><div class="line">project n. 项目，方案</div><div class="line">amaze vt. 使大为惊讶，使惊愕  astonished,surprise,wonder（惊奇，向弄明白）</div><div class="line">人+amazed（感到惊讶的）   物+amazing（令人惊讶的）</div><div class="line">relieve .vt 减轻，援助    relive重生   release释放      Reveal 泄露，使显露</div><div class="line">boring .adj 令人厌烦的 （人+boried，物+boring）</div><div class="line">irregular 不规则的，不稳定的</div><div class="line">decrease 减少  increase增加</div><div class="line">suggestion n. 建议     suggest v. 建议+(should)+do原型</div><div class="line">find out 找出，查明，发现</div><div class="line">turn out 结果是，证明是，生产，产出</div><div class="line">carry out执行</div><div class="line">in additon to=besides除…之外,还有（包含在内）</div><div class="line">except 除…之外（同类的，不包含在内）</div><div class="line">except for 除…之外（不同类的，不包含在内）</div><div class="line">result in+结果  lead to+结果</div><div class="line">result from+原因</div><div class="line">keep up with 跟上            put up with 容忍                  come up with  追赶上，找到，发现，提出</div></pre></td></tr></table></figure></p><p>Unit7:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Advantage 利益，好处，优点  disadvantage         Take advantage of 利用</div><div class="line">Elderly .adj 上了年纪的   old的比较级是older  elder本身就是形容词，用于家庭成员间</div><div class="line">Eventually  最终，终于 finally    at last</div><div class="line">少记录一个单词</div><div class="line">Lay out    spread out陈列</div><div class="line">in a row    成一长行</div><div class="line">to one&apos;s taste   合...口味，中...的意</div><div class="line">take advantage of   利用</div><div class="line">and what&apos;s more    and more importantly 而且，更重要的是</div><div class="line">all right      确实，无疑地</div><div class="line">break off  中止，中断   take off起飞</div><div class="line">break into 破门而入</div><div class="line">break out （战争等）突然发生，爆发</div><div class="line">come down (in the world) 落泊，潦倒；失势</div><div class="line">out of place   不适当的；不相称的</div><div class="line">do sb. a favo(u)r     给某人以恩惠；帮某人忙</div><div class="line">mistake...for    把...错认为</div><div class="line">pull（take） out  抽出，取出</div><div class="line">count out     逐一数出</div><div class="line">long for   +sb/sth/doing渴望、想念</div><div class="line">long for sb to do盼望某人做某事</div><div class="line">long to+do原型  渴望、想念</div></pre></td></tr></table></figure></p><p>Unit8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Astonish vt. 使大为惊讶</div><div class="line">Reveal 泄露，使显露</div><div class="line">Avoid 防止，避免</div><div class="line">Compose 撰写，创作    be compose of由……组成</div><div class="line">Confidence n.信心，把握，自信</div><div class="line">In search of寻找</div><div class="line">Rob(sb) of(sth)剥夺，抢劫</div><div class="line">Come upon 偶尔遇见（或发现）</div><div class="line">Come true 实现，成真</div><div class="line">Hold back 抑制，控制</div></pre></td></tr></table></figure></p><p>Unit9<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Conference 记者招待会</div><div class="line">Technology 技术</div><div class="line">Conclusion n. 结论    conclude v.</div><div class="line">Deadly 致命的</div><div class="line">Survive vi. 幸存，活下来  survival n.</div><div class="line">Pollute vt. 污染  pollution n.</div><div class="line">Emit  vt. send out 散发（give off），射出   emission n.</div><div class="line">Fund n. 资金，基金</div><div class="line">（be） known as 以。。。闻名，通常名叫</div><div class="line">Name after 以。。。名字命名</div><div class="line">Base on/upon 以。。。为基础，把。。。基于</div><div class="line">Be composed of 由。。。组成</div></pre></td></tr></table></figure></p><p><strong>Unit10</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Tighten v. （使）变/绷紧</div><div class="line">Dream of 向往，渴望</div><div class="line">Take over 占用，接管</div></pre></td></tr></table></figure></p><h5 id="课文（重点句子）-unit6-10"><a href="#课文（重点句子）-unit6-10" class="headerlink" title="课文（重点句子）(unit6-10)"></a>课文（重点句子）(unit6-10)</h5><p>Unit6:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Industrial Engineer工业(管理)工程师</div><div class="line">She means that I have always wanted everything to be well organized(有组织的) and neat(整洁的) 她的意思是说，我一贯希望把样样东西都安排得井井有条，整整齐齐</div><div class="line">everything was always in its place（in one‘s place适当的地方）样样东西总是放在适当的地方</div><div class="line">I was really amazed（惊讶） at what I saw.我对所见的感到非常地惊讶</div><div class="line">Most curious of all（最惊奇的是）, there was no quality control whatsoever.最为奇怪的是，厂里竟然没有任何质量控制</div></pre></td></tr></table></figure></p><p>Unit7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In a certain store（店） where they sell puddings布丁, a number of these delicious things are laid out in a row during the Christmas season(圣诞季).</div><div class="line">有一家出售布丁的商店，每年圣诞节期间都把许多这类美味的食品摆成一排供顾客选购</div><div class="line">The elderly上了年纪的 gentleman, who was poorly（破旧） but neatly dressed 这位老先生衣着虽然破旧，但却整洁</div><div class="line">This is not bad either（也不错）, but a little too heavy（油腻） 这种也不错，可是稍微腻了一点</div><div class="line">And that was the last I saw or heard of the old man。打（从）这以后我再也没有看到这位老人，也没有听到过有关他的情况</div></pre></td></tr></table></figure></p><p>Unit8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Speech(演讲，说话) had escaped（逃跑） me.连话也说不出来了（说不出话）</div><div class="line">It never really worked(起作用) until the actors（演员） managed to（设法做成某事） cry a few quiet tear（无声的眼泪） 直到演员们设法哭出几滴无声的眼泪时才真正起到作用</div><div class="line">All right now,don’t carry on about it.It’s only a bicycle.&quot;好了，别大惊小怪了(没什么大不了的)。只不过是一辆自行车</div></pre></td></tr></table></figure></p><p>Unit9<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">We have come to得出 the conclusion(结论),based on last week’s satellite landing. 根据上周发射的卫星所提供的资料，我们已经得出结论</div><div class="line">For one thing首先,Earth’s surface表面 in the area of Manhattan曼哈顿 is composed of由。。组成 solid坚固的 concrete混凝土 and nothing can grow there.</div><div class="line">首先，曼哈顿地区的地球表面均由坚固的混凝土构成，那里什么东西也无法生长</div></pre></td></tr></table></figure></p><p>Unit10（没有学习课文内容）</p><h5 id="课后练习-unit6-10"><a href="#课后练习-unit6-10" class="headerlink" title="课后练习(unit6-10)"></a>课后练习(unit6-10)</h5><p>Unit6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Every one of them agreed to his proposal(建议) except her.(同类，除。。之外)</div><div class="line">The overcat is ready except for the buttons.(不同类，除。。之外)</div><div class="line">1) 据报道，那条铁路曾因洪水而停止修建。It was reported that the building of the railway had been held up by a flood.</div><div class="line">4) 我很想买这本英文词典，遗憾的是我身上带的钱不够。I&apos;d like very much to buy the English dictionary. Unfortunately, I haven&apos;t got enough money on me.</div></pre></td></tr></table></figure></p><p>Unit7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">This broken hammer（榔头） is no use any more.The hammer is unless.</div><div class="line">The shop girl has hope that she will get a raise(加薪).She is hopeful of a raise.</div><div class="line">He talks/talked about Florida as if（好像，似乎） he had been there.</div><div class="line">He orders me about as if he were my boss.</div><div class="line">萨姆买不起他极想要的那种照相机，因为那相机太贵了。Sam could not afford (to buy) the camera he longed for because it was too expensive.</div><div class="line">他是个富人家的儿子，不过看上去已经家道中落了。He is the son of a wealthy family, but he seems to have come down in the world.</div><div class="line">我怀疑这家工厂什么质量控制也没有。经过一周的观察，我发现情况果真如此。</div><div class="line">I suspected there was no quality control whatsoever in the factory. After making observations for a week I found this was indeed the case.</div></pre></td></tr></table></figure></p><p>Unit8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">The poor old man spent hist last days almost entirely alone(完全单身一人)</div><div class="line">The twins look exactly alike(看上去完全一样)  and insist on wearing similar clothes(穿一样的衣裳)</div><div class="line">It is such a good chance（或so good a chance） that we mustn&apos;t miss it.</div><div class="line">我很幸运，在我年轻的时候就学会了许多不同的技能。I am lucky to have acquired（获得,取得,学到） a wide range of skills when I was young.</div></pre></td></tr></table></figure></p><p>Unit9<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">人+spend（花费时间）    人+pay（花费/付金钱）     物+cost（值）</div><div class="line">The earlier the better,as far as I am concerned(对我来说)</div><div class="line">在美国，许多父母在孩子出生之前就为他们的教育留出一笔专款。Many parents in the United States set aside(留出) a fund for their children&apos;s education before they are born.</div><div class="line">我已了解清楚，她的结论是以事实为根据的。I have made sure that her conclusion is based on facts.</div><div class="line">他病了一个月左右，这使他在学习上耽误了很多。He was ill for about a month, which has really set him back（耽误） in his studies.</div></pre></td></tr></table></figure></p><p>Unit10<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">The girl insisted(坚持) that he (should) join them.</div><div class="line">就是在那间斗室里，他们勤奋地工作着，憧憬着美好的未来。It was in that small room that they worked diligently and dreamed of better days to come.</div></pre></td></tr></table></figure></p><h3 id="data-structure"><a href="#data-structure" class="headerlink" title="data structure"></a>data structure</h3><p>数据结构需要对讲过的主要的几种数据结构进行实践</p><h4 id="binary-tree"><a href="#binary-tree" class="headerlink" title="binary tree"></a>binary tree</h4><h4 id="Huffman-tree"><a href="#Huffman-tree" class="headerlink" title="Huffman tree"></a>Huffman tree</h4><h3 id="年终总结"><a href="#年终总结" class="headerlink" title="年终总结"></a>年终总结</h3><h4 id="about-study"><a href="#about-study" class="headerlink" title="about study"></a>about study</h4><h4 id="about-work"><a href="#about-work" class="headerlink" title="about work"></a>about work</h4>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语中虚拟语气的用法及解析</title>
      <link href="/2016/12/16/Usage-of-subjunctive-mood-in-English/"/>
      <url>/2016/12/16/Usage-of-subjunctive-mood-in-English/</url>
      
        <content type="html"><![CDATA[<p>整理自教学笔记和网络<br><a id="more"></a></p><h2 id="虚拟语气"><a href="#虚拟语气" class="headerlink" title="虚拟语气"></a>虚拟语气</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>虚拟语气用来表示假想，而不表示客观存在的事实，所说的是一个条件，不一定是事实，或与事实相反。</p><p>虚拟语气通过谓语动词的特殊形式来表示。</p><p>英语中的语气分为陈述语气、祈使语气、<code>虚拟语气</code>三类。</p><p>虚拟语气表示说话者所说的话并非事实，或难以实现的，甚至表达相反的概念。</p><p>另外表示主观愿望或表达某种强烈的感情时，也用虚拟语气。</p><h3 id="if引导的虚拟语气"><a href="#if引导的虚拟语气" class="headerlink" title="if引导的虚拟语气"></a>if引导的虚拟语气</h3><h4 id="条件句中的虚拟语气"><a href="#条件句中的虚拟语气" class="headerlink" title="条件句中的虚拟语气"></a>条件句中的虚拟语气</h4><p>从句中提出一种与客观现实不相符或根本不可能存在的条件，主句会产生的一种不可能获得的结果。</p><p>条件句中的虚拟语气根据不同的时间有三种不同的形式。</p><h5 id="将来时的条件句中的虚拟语气，如："><a href="#将来时的条件句中的虚拟语气，如：" class="headerlink" title="将来时的条件句中的虚拟语气，如："></a>将来时的条件句中的虚拟语气，如：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">If he should go to Qing Hua University he would make full use of his time.</div><div class="line">如果他要上清华大学的话，他就会充分利用他的时间了。</div><div class="line"></div><div class="line">If he were to come here he would tell us about it.</div><div class="line">如果他要来的话，他会通知我们一声。</div></pre></td></tr></table></figure><h5 id="现在时的条件句中的虚拟语气，如："><a href="#现在时的条件句中的虚拟语气，如：" class="headerlink" title="现在时的条件句中的虚拟语气，如："></a>现在时的条件句中的虚拟语气，如：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">If he were free he would help us.</div><div class="line">要是他有空的话，它会帮助我们的。</div><div class="line"></div><div class="line">If he studied at this school he would know you well.</div><div class="line">如果他在这所学校学习的话，它会对你很熟悉。</div></pre></td></tr></table></figure><h5 id="过去时的条件句中的虚拟语气，如："><a href="#过去时的条件句中的虚拟语气，如：" class="headerlink" title="过去时的条件句中的虚拟语气，如："></a>过去时的条件句中的虚拟语气，如：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">If I had seen the film I would have told you about it.</div><div class="line">我如果看过这场电影，我会把电影内容告诉你了。</div><div class="line"></div><div class="line">If I had got there earlier I would have met Mr. Li.</div><div class="line">如果我早点到那儿，我就会会到了李先生。</div></pre></td></tr></table></figure><h4 id="条件句中的虚拟语气需要注意的问题"><a href="#条件句中的虚拟语气需要注意的问题" class="headerlink" title="条件句中的虚拟语气需要注意的问题"></a>条件句中的虚拟语气需要注意的问题</h4><h5 id="was-和-were"><a href="#was-和-were" class="headerlink" title="was 和 were"></a>was 和 were</h5><p>当从句的主语为第三人称单数时，谓语动词若是系动词be时，可用 was 代替 were;<br>但在倒装虚拟结构及 if I were you 、 as it were 中，只能用 were。<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Were I ten years younger I would study abroad.</div><div class="line">要是我还年轻十岁的话，我会去国外学习。</div><div class="line"></div><div class="line">If I were you I would try my best to grasp the chance.</div><div class="line">要是我是你的话，我要尽力抓住这次机会。</div></pre></td></tr></table></figure></p><h5 id="非同时发生"><a href="#非同时发生" class="headerlink" title="非同时发生"></a>非同时发生</h5><p>有时，虚拟条件句中，主、从句的动作若不是同时发生时，须区别对待。</p><h6 id="与正在发生的事实不符"><a href="#与正在发生的事实不符" class="headerlink" title="与正在发生的事实不符"></a>与正在发生的事实不符</h6><p>从句的动作与过去事实相反，而主句的动作与现在或现在正在发生的事实不符。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">If I had worked hard at school I would be an engineer too.</div><div class="line">如果我在学校学习刻苦的话，我现在也会使工程师了</div><div class="line"></div><div class="line">If they had informed us we would not come here now.</div><div class="line">如果他们通知过我们的话，我们现在就不会来这里了。</div></pre></td></tr></table></figure></p><h6 id="与过去事实不符"><a href="#与过去事实不符" class="headerlink" title="与过去事实不符"></a>与过去事实不符</h6><p>从句的动作与现在事实相反，而主句的动作与过去事实不符。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">If he were free today we would have sent him to Beijing.</div><div class="line">如果他今天有空的话，我们会已经派他去北京了。</div><div class="line"></div><div class="line">If he knew her he would have greeted her.</div><div class="line">要是他认识她的话，他肯定会去问候她了。</div></pre></td></tr></table></figure></p><h6 id="与正在发生的事实相反"><a href="#与正在发生的事实相反" class="headerlink" title="与正在发生的事实相反"></a>与正在发生的事实相反</h6><p>从句的动作与过去发生的情况相反，而主句的动作与现在正在发生的情况相反。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">If it had not been raining too much the crops would be growing much better.</div><div class="line">如果天不下太多的雨的话，庄家会长得更好。</div><div class="line"></div><div class="line">If he had been working hard he would be working in the office now.</div><div class="line">要是他工作一直努力的话，他现在已进了办公室了。</div></pre></td></tr></table></figure></p><h5 id="含有特定谓语时，if可省略"><a href="#含有特定谓语时，if可省略" class="headerlink" title="含有特定谓语时，if可省略"></a>含有特定谓语时，if可省略</h5><p>当虚拟条件句的谓语动词含有 were should had 时，if 可省略，而将 were should had等词置于句首。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Should he agree to go there we would send him there.</div><div class="line">要是他答应去的话，我们就派他去。</div><div class="line"></div><div class="line">Were she here she would agree with us.</div><div class="line">如果她在这儿的话，她会同意我们的。</div><div class="line"></div><div class="line">Had he learnt about computers we would have hired him to work here.</div><div class="line">如果她懂一些电脑知识的话，我们会已经聘用他来这里工作了</div></pre></td></tr></table></figure></p><h5 id="需由上下文判断语境"><a href="#需由上下文判断语境" class="headerlink" title="需由上下文判断语境"></a>需由上下文判断语境</h5><p>有时，句子没有直接给出假设情况的条件，而须通过上下文或其他方式来判断。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">I would have come to see you but I was too busy.</div><div class="line">我本该来看你了，然而我太忙了。</div><div class="line"></div><div class="line">But for his help we would be working now.</div><div class="line">要不是他的帮助，我们还会在工作呢。</div><div class="line"></div><div class="line">Without your instruction I would not have made such great progress.</div><div class="line">要是没有你的指导，我不会取得如此大的进步。</div></pre></td></tr></table></figure></p><h5 id="省略主或从句之一"><a href="#省略主或从句之一" class="headerlink" title="省略主或从句之一"></a>省略主或从句之一</h5><p>有时，虚拟条件句中，主、从句可以省略其中的一个，来表示说话人的一种强烈的感情。</p><h6 id="省略从句"><a href="#省略从句" class="headerlink" title="省略从句"></a>省略从句</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">He would have finished it.</div><div class="line">他本该完成了。</div><div class="line"></div><div class="line">You could have passed this exam.</div><div class="line">你应该会通过这次考试了。</div></pre></td></tr></table></figure><h6 id="省略主句"><a href="#省略主句" class="headerlink" title="省略主句"></a>省略主句</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">If I were at home now.</div><div class="line">要是我现在在家里该多好啊。</div><div class="line"></div><div class="line">If only I had got it.</div><div class="line">要是我得到它了该多好啊。</div></pre></td></tr></table></figure><h3 id="其他状语从句的虚拟语气"><a href="#其他状语从句的虚拟语气" class="headerlink" title="其他状语从句的虚拟语气"></a>其他状语从句的虚拟语气</h3><h4 id="目的状语从句中的虚拟语气"><a href="#目的状语从句中的虚拟语气" class="headerlink" title="目的状语从句中的虚拟语气"></a>目的状语从句中的虚拟语气</h4><h5 id="should-动词原型"><a href="#should-动词原型" class="headerlink" title="should + 动词原型"></a>should + 动词原型</h5><p>在 for fear that \ in case \ lest 引导的目的状语从句中，若用虚拟语气时，<br>从句谓语为： should + 动词原形。并且 should 不能省略<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">She examined the door again for fear that a thief should come in.</div><div class="line">她又把门检查了一遍，以防盗贼的进入。</div><div class="line"></div><div class="line">He started out earlier lest he should be late.</div><div class="line">他很早就出发了以防迟到。</div></pre></td></tr></table></figure></p><p>#####<br>在 so that \ in order that 所引导的目的状语从句中，<br>从句中的谓语为：can / may / could / might / will / would / should + 动词原形。</p><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">He goes closer to the speaker so that he can hear him clearer.</div><div class="line">他走近说话的人以便能挺得更清楚。</div><div class="line"></div><div class="line">He read the letter carefully in order that he should not miss a word.</div><div class="line">他把信读得很仔细以便不漏掉一个单词。</div></pre></td></tr></table></figure></p><blockquote><p>引用</p><p><a href="http://blog.sina.com.cn/s/blog_14a9f05cc0102wlja.html" target="_blank" rel="external">英语中if虚拟语气的用法解析</a></p><p><a href="http://baike.baidu.com/view/26751.htm" target="_blank" rel="external">虚拟语气-百度百科</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> english </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
            <tag> 虚拟语气 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据结构之二叉树(Binary tree)</title>
      <link href="/2016/12/16/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91-Binary-tree/"/>
      <url>/2016/12/16/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91-Binary-tree/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构之二叉树"><a href="#数据结构之二叉树" class="headerlink" title="数据结构之二叉树"></a>数据结构之二叉树</h1><p>定义，参考自：<a href="https://zh.wikipedia.org/zh/二叉树" target="_blank" rel="external">维基百科-二叉树</a></p><p>特性：二元树是一个有根树，并且每个节点最多有2个子节点。非空的二叉树，若树叶总数为 n0，分支度为2的总数为 n2，则 n0 = n2 + 1。</p><p>如图：</p><p><img src="http://image.candymami.com/16-12-16/27272502-file_1481867029975_ef8b.jpg" alt="二叉树"><br><a id="more"></a></p><h2 id="二叉树的实现"><a href="#二叉树的实现" class="headerlink" title="二叉树的实现"></a>二叉树的实现</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python设计模式之单例模式(singleton pattern)</title>
      <link href="/2016/12/16/python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-singleton-pattern/"/>
      <url>/2016/12/16/python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-singleton-pattern/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的排序操作</title>
      <link href="/2016/12/15/python%E4%B8%AD%E7%9A%84%E6%8E%92%E5%BA%8F%E6%93%8D%E4%BD%9C/"/>
      <url>/2016/12/15/python%E4%B8%AD%E7%9A%84%E6%8E%92%E5%BA%8F%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="详细介绍python中的排序方法-sort-sorted"><a href="#详细介绍python中的排序方法-sort-sorted" class="headerlink" title="详细介绍python中的排序方法(sort, sorted)"></a>详细介绍python中的排序方法(sort, sorted)</h1><blockquote><p>排序操作在日常工作中会经常用到，这里把python的各类排序方法来具体说明</p></blockquote><a id="more"></a><p>本文整理自<a href="https://mozillazg.com/2013/03/python-sorting-how-to.html" target="_blank" rel="external">mozillazg’s Blog</a></p><p>英文原文为：<a href="https://wiki.python.org/moin/HowTo/Sorting/" target="_blank" rel="external">HowTo/Sorting</a>，可阅读原文</p><p>Python 内置的<code>sort()</code>方法可以实现对列表的原地排序功能。<br>内置的<code>sorted()</code>函数则不会修改原列表，而是生成一个经过排序的新列表。</p><p>下面总结一些常用的排序方法。</p><h3 id="基本排序"><a href="#基本排序" class="headerlink" title="基本排序"></a>基本排序</h3><h3 id="可选参数及高级用法"><a href="#可选参数及高级用法" class="headerlink" title="可选参数及高级用法"></a>可选参数及高级用法</h3><h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h4><h4 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h4><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><h4 id="平衡（Stability）排序和复杂排序"><a href="#平衡（Stability）排序和复杂排序" class="headerlink" title="平衡（Stability）排序和复杂排序"></a>平衡（Stability）排序和复杂排序</h4><h4 id="根据多个参数无固定顺序排序"><a href="#根据多个参数无固定顺序排序" class="headerlink" title="根据多个参数无固定顺序排序"></a>根据多个参数无固定顺序排序</h4><h3 id="以前的实现方法"><a href="#以前的实现方法" class="headerlink" title="以前的实现方法"></a>以前的实现方法</h3><h4 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h4><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 排序 </tag>
            
            <tag> sort </tag>
            
            <tag> sorted </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单递归</title>
      <link href="/2016/12/14/%E7%AE%80%E5%8D%95%E9%80%92%E5%BD%92/"/>
      <url>/2016/12/14/%E7%AE%80%E5%8D%95%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="一些简单功能的递归实现"><a href="#一些简单功能的递归实现" class="headerlink" title="一些简单功能的递归实现"></a>一些简单功能的递归实现</h1><h2 id="递归的实现原理"><a href="#递归的实现原理" class="headerlink" title="递归的实现原理"></a>递归的实现原理</h2><a id="more"></a><h2 id="计算列表长度，不限深度"><a href="#计算列表长度，不限深度" class="headerlink" title="计算列表长度，不限深度"></a>计算列表长度，不限深度</h2><p>如：有列表如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)],[(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>), (<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>)]]</div></pre></td></tr></table></figure></p><p>实现方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_length</span><span class="params">(data)</span>:</span></div><div class="line">    length = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</div><div class="line">        <span class="keyword">if</span> type(i) == list:</div><div class="line">            length += get_length(i)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            length += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> length</div></pre></td></tr></table></figure></p><h2 id="通过递归找出json中value值为链接"><a href="#通过递归找出json中value值为链接" class="headerlink" title="通过递归找出json中value值为链接"></a>通过递归找出json中value值为链接</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python风格指南</title>
      <link href="/2016/12/13/python%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
      <url>/2016/12/13/python%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p>有一个好的代码风格并且遵循规范还是很有必要的，这决定了你的代码能被多少人读懂。</p></blockquote><p><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/" target="_blank" rel="external">python风格规范</a><br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 风格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M站UI自动化过程</title>
      <link href="/2016/12/13/M-station-UI-automation-process/"/>
      <url>/2016/12/13/M-station-UI-automation-process/</url>
      
        <content type="html"><![CDATA[<h1 id="M站UI自动化过程"><a href="#M站UI自动化过程" class="headerlink" title="M站UI自动化过程"></a>M站UI自动化过程</h1><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">官网下载，linux与apple免安装</div></pre></td></tr></table></figure><h4 id="创建沙盒环境"><a href="#创建沙盒环境" class="headerlink" title="创建沙盒环境"></a>创建沙盒环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtualenv myvenv</div></pre></td></tr></table></figure><a id="more"></a><h4 id="切换沙盒环境"><a href="#切换沙盒环境" class="headerlink" title="切换沙盒环境"></a>切换沙盒环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source myvenv/bin/activate</div></pre></td></tr></table></figure><h4 id="安装selenium包"><a href="#安装selenium包" class="headerlink" title="安装selenium包"></a>安装selenium包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install selenium</div></pre></td></tr></table></figure><h4 id="下载chromedriver，用来支持webdriver调用chrome"><a href="#下载chromedriver，用来支持webdriver调用chrome" class="headerlink" title="下载chromedriver，用来支持webdriver调用chrome"></a>下载chromedriver，用来支持webdriver调用chrome</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://chromedriver.storage.googleapis.com/2.22/chromedriver_linux64.zip</div></pre></td></tr></table></figure><h4 id="将chromedriver路径加入环境变量"><a href="#将chromedriver路径加入环境变量" class="headerlink" title="将chromedriver路径加入环境变量"></a>将chromedriver路径加入环境变量</h4><blockquote><p>windows和linux方式有所不同，请自行google。</p></blockquote><p><em>若不使用chrome的emulate devices，则不用执行关于selenium-server的步骤</em></p><h4 id="下载selenium-server服务，做remote服务，可启动chrome的mobile形式"><a href="#下载selenium-server服务，做remote服务，可启动chrome的mobile形式" class="headerlink" title="下载selenium-server服务，做remote服务，可启动chrome的mobile形式"></a>下载selenium-server服务，做remote服务，可启动chrome的mobile形式</h4><p>地址如下<br><a href="http://selenium-release.storage.googleapis.com/2.53/selenium-server-standalone-2.53.1.jar" target="_blank" rel="external">selenium-server</a></p><h3 id="remote服务启动"><a href="#remote服务启动" class="headerlink" title="remote服务启动"></a>remote服务启动</h3><h4 id="启动selenium-server服务"><a href="#启动selenium-server服务" class="headerlink" title="启动selenium-server服务"></a>启动selenium-server服务</h4><p>两种形式：</p><h5 id="通过脚本启动"><a href="#通过脚本启动" class="headerlink" title="通过脚本启动"></a>通过脚本启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gnome-terminal -t "title-name"gnome-terminal -x bash -c "/usr/bin/java -jar /home/hanz/download/selenium-server-standalone-2.53.1.jar; exec bash;"</div></pre></td></tr></table></figure><h5 id="直接终端启动"><a href="#直接终端启动" class="headerlink" title="直接终端启动"></a>直接终端启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/java -jar /home/hanz/download/selenium-server-standalone-2.53.1.jar</div></pre></td></tr></table></figure><h4 id="脚本中启动chrome-mobile-emulation"><a href="#脚本中启动chrome-mobile-emulation" class="headerlink" title="脚本中启动chrome_mobile_emulation"></a>脚本中启动chrome_mobile_emulation</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mobile_emulation = &#123;<span class="string">"deviceName"</span>: <span class="string">"Google Nexus 5"</span>&#125;</div><div class="line">chrome_options = webdriver.ChromeOptions()</div><div class="line">chrome_options.add_experimental_option(<span class="string">"mobileEmulation"</span>, mobile_emulation)</div><div class="line">self.driver = webdriver.Remote(command_executor=<span class="string">'http://127.0.0.1:4444/wd/hub'</span>,</div><div class="line">                               desired_capabilities=chrome_options.to_capabilities())</div></pre></td></tr></table></figure><h3 id="selenium-基本语法"><a href="#selenium-基本语法" class="headerlink" title="selenium 基本语法"></a>selenium 基本语法</h3><h4 id="网上有成熟的各路教程，请参考，在最后我附了一些简明的教程链接"><a href="#网上有成熟的各路教程，请参考，在最后我附了一些简明的教程链接" class="headerlink" title="网上有成熟的各路教程，请参考，在最后我附了一些简明的教程链接"></a>网上有成熟的各路教程，请参考，在最后我附了一些简明的教程链接</h4><h4 id="webdriver常用方法"><a href="#webdriver常用方法" class="headerlink" title="webdriver常用方法"></a>webdriver常用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'add_cookie'</span>, 在当前的会话添加一个cookie</div><div class="line"></div><div class="line"><span class="string">'application_cache'</span>, 返回一个对象ApplicationCache与浏览器的应用程序缓存交互</div><div class="line"></div><div class="line"><span class="string">'back'</span>, 返回至上一个浏览历史</div><div class="line"></div><div class="line"><span class="string">'capabilities'</span>, remote参数</div><div class="line"></div><div class="line"><span class="string">'close'</span>, 关闭</div><div class="line"></div><div class="line"><span class="string">'command_executor'</span>, remote webdriver参数</div><div class="line"></div><div class="line"><span class="string">'create_options'</span>, chrome webdriver参数</div><div class="line"></div><div class="line"><span class="string">'create_web_element'</span>, 创建具有指定element_id网络元素。</div><div class="line"></div><div class="line"><span class="string">'current_url'</span>, 当前页面的url</div><div class="line"></div><div class="line"><span class="string">'current_window_handle'</span>, 返回当前窗口的句柄</div><div class="line"></div><div class="line"><span class="string">'delete_all_cookies'</span>, 删除所有Cookie会话的范围</div><div class="line"></div><div class="line"><span class="string">'delete_cookie'</span>,删除指定名称的单一的cookie。</div><div class="line"></div><div class="line"><span class="string">'desired_capabilities'</span>, 返回正在使用当前所需功能的驱动程序</div><div class="line"></div><div class="line"><span class="string">'error_handler'</span>, 用于处理错误errorhandler.ErrorHandler对象。</div><div class="line"></div><div class="line"><span class="string">'execute'</span>,  发送到由一个command.CommandExecutor要执行的命令。</div><div class="line"></div><div class="line"><span class="string">'execute_async_script'</span>,  异步执行当前窗口/帧的JavaScript。</div><div class="line"></div><div class="line"><span class="string">'execute_script'</span>, 同步地执行在当前窗口/帧的JavaScript。</div><div class="line"></div><div class="line"><span class="string">'file_detector'</span>,</div><div class="line"></div><div class="line"><span class="string">'file_detector_context'</span>,</div><div class="line"></div><div class="line"><span class="string">'find_element'</span>,</div><div class="line"></div><div class="line"><span class="string">'find_element_by_class_name'</span>,通过查找类名的元素。</div><div class="line"></div><div class="line"><span class="string">'find_element_by_css_selector'</span>,通过查找CSS选择器的元素。</div><div class="line"></div><div class="line"><span class="string">'find_element_by_id'</span>,通过ID查找元素。</div><div class="line"></div><div class="line"><span class="string">'find_element_by_link_text'</span>, 通过查找链接文本的元素。</div><div class="line"></div><div class="line"><span class="string">'find_element_by_name'</span>,通过名称查找元素。</div><div class="line"></div><div class="line"><span class="string">'find_element_by_partial_link_text'</span>,其链接文本的部分匹配查找元素。</div><div class="line"></div><div class="line"><span class="string">'find_element_by_tag_name'</span>,查找按标签名称的元素。</div><div class="line"></div><div class="line"><span class="string">'find_element_by_xpath'</span>,与XPath查找元素。</div><div class="line"></div><div class="line"><span class="string">'find_elements'</span>,</div><div class="line"></div><div class="line"><span class="string">'find_elements_by_class_name'</span>,</div><div class="line"></div><div class="line"><span class="string">'find_elements_by_css_selector'</span>,</div><div class="line"></div><div class="line"><span class="string">'find_elements_by_id'</span>,</div><div class="line"></div><div class="line"><span class="string">'find_elements_by_link_text'</span>,</div><div class="line"></div><div class="line"><span class="string">'find_elements_by_name'</span>,</div><div class="line"></div><div class="line"><span class="string">'find_elements_by_partial_link_text'</span>,</div><div class="line"></div><div class="line"><span class="string">'find_elements_by_tag_name'</span>,</div><div class="line"></div><div class="line"><span class="string">'find_elements_by_xpath'</span>,</div><div class="line"></div><div class="line"><span class="string">'forward'</span>,前进了一步在浏览器历史记录。</div><div class="line"></div><div class="line"><span class="string">'get'</span>, 加载在当前浏览器会话的网页。</div><div class="line"></div><div class="line"><span class="string">'get_cookie'</span>,按名称获取一个Cookie。如果找到，无如果不返回cookie。</div><div class="line"></div><div class="line"><span class="string">'get_cookies'</span>,返回一组词典，对应的cookie在当前会话中可见。</div><div class="line"></div><div class="line"><span class="string">'get_log'</span>,获取日志对于给定的日志类型</div><div class="line"></div><div class="line"><span class="string">'get_screenshot_as_base64'</span>,获取当前窗口的截图为Base64编码的字符串 这是在以HTML嵌入的图像是有用的。</div><div class="line"></div><div class="line"><span class="string">'get_screenshot_as_file'</span>,获取当前窗口的截图。如果返回FALSE 任何IO错误，否则返回<span class="keyword">True</span>。使用完整路径在你的文件名。</div><div class="line"></div><div class="line"><span class="string">'get_screenshot_as_png'</span>,获取当前窗口的屏幕快照作为二进制数据。</div><div class="line"></div><div class="line"><span class="string">'get_window_position'</span>,获取当前窗口的x，y位置。</div><div class="line"></div><div class="line"><span class="string">'get_window_size'</span>,获取当前窗口的宽度和高度。</div><div class="line"></div><div class="line"><span class="string">'implicitly_wait'</span>,用粘超时隐含等待被发现的元素， 或命令来完成。这种方法只需要调用每个会话一次</div><div class="line"></div><div class="line"><span class="string">'launch_app'</span>,</div><div class="line"></div><div class="line"><span class="string">'log_types'</span>,</div><div class="line"></div><div class="line"><span class="string">'maximize_window'</span>,最大限度地增加了的webdriver使用当前窗口</div><div class="line"></div><div class="line"><span class="string">'mobile'</span>,</div><div class="line"></div><div class="line"><span class="string">'name'</span>,返回此实例中的底层浏览器的名称。</div><div class="line"></div><div class="line"><span class="string">'orientation'</span>,获取设备的当前方位</div><div class="line"></div><div class="line"><span class="string">'page_source'</span>,获取当前页面的源代码。</div><div class="line"></div><div class="line"><span class="string">'quit'</span>, 关闭浏览器并关闭启动ChromeDriver时启动的ChromeDriver可执行</div><div class="line"></div><div class="line"><span class="string">'refresh'</span>, 刷新当前页面</div><div class="line"></div><div class="line"><span class="string">'save_screenshot'</span>,获取当前窗口的截图。如果返回FALSE 任何IO错误，否则返回<span class="keyword">True</span>。使用完整路径在你的文件名。</div><div class="line"></div><div class="line"><span class="string">'service'</span>,</div><div class="line"></div><div class="line"><span class="string">'session_id'</span>,浏览器会话的字符串ID开始，这个控制的webdriver。</div><div class="line"></div><div class="line"><span class="string">'set_page_load_timeout'</span>,设置的时间量，以等待一个页面加载完成 之前抛出一个错误。</div><div class="line"></div><div class="line"><span class="string">'set_script_timeout'</span>,</div><div class="line"></div><div class="line"><span class="string">'set_window_position'</span>,设置当前窗口的x，y位置。 （window.moveTo）</div><div class="line"></div><div class="line"><span class="string">'set_window_size'</span>,设置当前窗口的宽度和高度。 （window.resizeTo）</div><div class="line"></div><div class="line"><span class="string">'start_client'</span>,开始一个新的会话之前调用。这种方法可能会被改写定义自定义启动行为。</div><div class="line"></div><div class="line"><span class="string">'start_session'</span>,创建具有所需功能的一个新的会话。</div><div class="line"></div><div class="line"><span class="string">'stop_client'</span>,执行quit命令后调用。这种方法可能会被改写定义自定义关机行为。</div><div class="line"></div><div class="line"><span class="string">'switch_to'</span>,</div><div class="line"></div><div class="line"><span class="string">'switch_to_active_element'</span>,</div><div class="line"></div><div class="line"><span class="string">'switch_to_alert'</span>,切换当前活动的alert窗口</div><div class="line"></div><div class="line"><span class="string">'switch_to_default_content'</span>,</div><div class="line"></div><div class="line"><span class="string">'switch_to_frame'</span>,切换至当前活动的frame元素</div><div class="line"></div><div class="line"><span class="string">'switch_to_window'</span>,切换至当前活动的浏览器窗口</div><div class="line"></div><div class="line"><span class="string">'title'</span>,返回当前页面的标题。</div><div class="line"></div><div class="line"><span class="string">'window_handles'</span>返回当前会话中的所有窗口的句柄。</div></pre></td></tr></table></figure><h4 id="推荐文档"><a href="#推荐文档" class="headerlink" title="推荐文档"></a>推荐文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">英文:</div><div class="line">http://selenium-python.readthedocs.io/getting-started.html</div><div class="line"></div><div class="line">中文，我参与了翻译过程:</div><div class="line">http://selenium-python-zh.readthedocs.io/en/latest/</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> selenium </tag>
            
            <tag> Remote </tag>
            
            <tag> UI自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于python环境的各类环境搭建</title>
      <link href="/2016/12/12/%E5%9F%BA%E4%BA%8Epython%E7%8E%AF%E5%A2%83%E7%9A%84%E5%90%84%E7%B1%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2016/12/12/%E5%9F%BA%E4%BA%8Epython%E7%8E%AF%E5%A2%83%E7%9A%84%E5%90%84%E7%B1%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="基于python环境的各类环境搭建"><a href="#基于python环境的各类环境搭建" class="headerlink" title="基于python环境的各类环境搭建"></a>基于python环境的各类环境搭建</h1><h2 id="—服务类—"><a href="#—服务类—" class="headerlink" title="—服务类—"></a>—服务类—</h2><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">功能</th><th style="text-align:left">作用</th><th style="text-align:left">状态</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">django跑起来</td><td style="text-align:left">站点</td><td style="text-align:left">完成</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">gunicorn跑起来</td><td style="text-align:left">内部分发服务</td><td style="text-align:left">完成</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">nginx跑起来</td><td style="text-align:left">静态外部服务器</td><td style="text-align:left">完成</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">supervisor跑起来</td><td style="text-align:left">任务监控</td><td style="text-align:left">完成</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">celery跑起来</td><td style="text-align:left">定时任务</td><td style="text-align:left">未完成</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">redis跑起来</td><td style="text-align:left">nosql快速缓存</td><td style="text-align:left">未完成</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr></tbody></table><p>|1|jenkins走起|testcase定时任务及结果|完成|</p><a id="more"></a><h2 id="—页面类—"><a href="#—页面类—" class="headerlink" title="—页面类—"></a>—页面类—</h2><table><thead><tr><th style="text-align:left">序号</th><th>功能</th><th>作用</th><th>状态</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td>前台页面做起来</td><td>把后台功能及数据展示做到前台页面上</td><td>部分完成</td></tr><tr><td style="text-align:left">2</td><td>前台样式用起来</td><td>前台样式使用通用bootstrap样式包</td><td>未完成</td></tr><tr><td style="text-align:left">3</td><td>—</td><td>—</td><td>—</td></tr></tbody></table><h3 id="1-django跑起来"><a href="#1-django跑起来" class="headerlink" title="1. django跑起来"></a>1. django跑起来</h3><p>引用：</p><p>官方文档</p><h4 id="用到的功能："><a href="#用到的功能：" class="headerlink" title="用到的功能："></a>用到的功能：</h4><p>模板分页：</p><p><a href="https://mozillazg.com/2013/01/django-pagination-by-use-paginator.html" target="_blank" rel="external">https://mozillazg.com/2013/01/django-pagination-by-use-paginator.html</a></p><p><a href="http://python.usyiyi.cn/django/topics/pagination.html" target="_blank" rel="external">http://python.usyiyi.cn/django/topics/pagination.html</a></p><h3 id="2-gunicorn跑起来"><a href="#2-gunicorn跑起来" class="headerlink" title="2. gunicorn跑起来"></a>2. gunicorn跑起来</h3><p>引用：</p><p><a href="http://foofish.net/blog/18/django-deploy" target="_blank" rel="external">http://foofish.net/blog/18/django-deploy</a></p><p><a href="http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/" target="_blank" rel="external">http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/</a></p><h4 id="gunicorn超时时间设置"><a href="#gunicorn超时时间设置" class="headerlink" title="gunicorn超时时间设置"></a>gunicorn超时时间设置</h4><p>引用：</p><p><a href="http://stackoverflow.com/questions/6816215/gunicorn-nginx-timeout-problem" target="_blank" rel="external">http://stackoverflow.com/questions/6816215/gunicorn-nginx-timeout-problem</a></p><p>脚本文件bin/gunicorn_start.sh</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">NUM_WORKERS=<span class="number">3</span></div><div class="line">TIMEOUT=<span class="number">120</span></div><div class="line"></div><div class="line"><span class="keyword">exec</span> gunicorn $&#123;DJANGO_WSGI_MODULE&#125;:application \</div><div class="line">--name $NAME \</div><div class="line">--workers $NUM_WORKERS \</div><div class="line">--timeout $TIMEOUT \</div><div class="line">--log-level=debug \</div><div class="line">--bind=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9000</span> \</div><div class="line">--pid=$PIDFILE</div></pre></td></tr></table></figure><h3 id="3-nginx跑起来"><a href="#3-nginx跑起来" class="headerlink" title="3. nginx跑起来"></a>3. nginx跑起来</h3><p>引用：</p><p><a href="http://blog.csdn.net/qq_24861509/article/details/45727983" target="_blank" rel="external">http://blog.csdn.net/qq_24861509/article/details/45727983</a></p><p><a href="http://www.111cn.net/sys/linux/79751.htm" target="_blank" rel="external">http://www.111cn.net/sys/linux/79751.htm</a></p><h3 id="4-supervisor跑起来"><a href="#4-supervisor跑起来" class="headerlink" title="4. supervisor跑起来"></a>4. supervisor跑起来</h3><ul><li>安装</li></ul><p><code>sudo apt-get install supervisor</code></p><ul><li>启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">service supervisor start/restart/stop</div><div class="line"></div><div class="line">/etc/init.d/supervisor start/restart/stop</div></pre></td></tr></table></figure><ul><li>配置文件位置</li></ul><p><code>/etc/supervisor/supervisord.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">; supervisor config file</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">[unix_http_server]</div><div class="line"></div><div class="line">#file=/var/run/supervisor.sock   ; (the path to the socket file)</div><div class="line"></div><div class="line">file=/tmp/supervisor.sock;</div><div class="line"></div><div class="line">chmod=0700                       ; sockef file mode (default 0700)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">[supervisord]</div><div class="line"></div><div class="line">logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)</div><div class="line"></div><div class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</div><div class="line"></div><div class="line">childlogdir=/var/log/supervisor            ; (&apos;AUTO&apos; child log dir, default $TEMP)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">; the below section must remain in the config file for RPC</div><div class="line"></div><div class="line">; (supervisorctl/web interface) to work, additional interfaces may be</div><div class="line"></div><div class="line">; added by defining them in separate rpcinterface: sections</div><div class="line"></div><div class="line">[rpcinterface:supervisor]</div><div class="line"></div><div class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">[supervisorctl]</div><div class="line"></div><div class="line">#serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket</div><div class="line"></div><div class="line">serverurl=unix:///tmp/supervisor.sock ;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">; The [include] section can just contain the &quot;files&quot; setting.  This</div><div class="line"></div><div class="line">; setting can list multiple files (separated by whitespace or</div><div class="line"></div><div class="line">; newlines).  It can also contain wildcards.  The filenames are</div><div class="line"></div><div class="line">; interpreted as relative to this file.  Included files *cannot*</div><div class="line"></div><div class="line">; include files themselves.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">[include]</div><div class="line"></div><div class="line">files = /etc/supervisor/conf.d/*.conf</div></pre></td></tr></table></figure><ul><li>增加任务</li></ul><p><code>/etc/supervisor/conf.d/autohome_celery.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[program:autohome_celery]</div><div class="line"></div><div class="line">directory = /home/hanz/workspace/PycharmProjects/autohome_data_site</div><div class="line"></div><div class="line">command = /home/hanz/workspace/my-venv2.7/bin/python manage.py celery worker -c 6 -l debug</div><div class="line"></div><div class="line">autostart=true</div><div class="line"></div><div class="line">autorestart=true</div><div class="line"></div><div class="line">startsecs=3</div><div class="line"></div><div class="line">user = hanz                                                          ;</div><div class="line"></div><div class="line">stdout_logfile = /home/hanz/workspace/PycharmProjects/autohome_data_site/logs/autohome_celery.log</div><div class="line"></div><div class="line">redirect_stderr = true</div></pre></td></tr></table></figure><ul><li>添加web显示页面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[inet_http_server]         ; inet (TCP) server disabled by default</div><div class="line"></div><div class="line">port=9001        ; (ip_address:port specifier, *:port for all iface)</div><div class="line"></div><div class="line">username=admin             ; (default is no username (open server))</div><div class="line"></div><div class="line">password=123               ; (default is no password (open server))</div></pre></td></tr></table></figure><p>引用：</p><p><a href="http://www.cnblogs.com/gsblog/p/3730293.html" target="_blank" rel="external">http://www.cnblogs.com/gsblog/p/3730293.html</a></p><p><a href="http://www.cnblogs.com/yjf512/archive/2012/03/05/2380496.html" target="_blank" rel="external">http://www.cnblogs.com/yjf512/archive/2012/03/05/2380496.html</a></p><p><a href="http://www.cnblogs.com/maseng/p/4670473.html" target="_blank" rel="external">http://www.cnblogs.com/maseng/p/4670473.html</a></p><p><a href="http://liyangliang.me/posts/2015/06/using-supervisor/" target="_blank" rel="external">http://liyangliang.me/posts/2015/06/using-supervisor/</a></p><h3 id="5-celery跑起来"><a href="#5-celery跑起来" class="headerlink" title="5. celery跑起来"></a>5. celery跑起来</h3><ul><li>独立celery+python脚本</li></ul><ul><li>django-celery替代celery，在django项目中的使用方法</li></ul><ul><li>监控界面：flower</li></ul><ol><li>安装：</li></ol><p><code>pip install flower</code></p><ol><li>使用方法：</li></ol><p>运行服务打开<a href="http://localhost:5555：" target="_blank" rel="external">http://localhost:5555：</a></p><p><code>flower --port=5555</code></p><p>或者从celery运行：</p><p><code>celery flower --address=127.0.0.1 --port=5555</code></p><p>Broker URL 和其他配置选项能够通过一个标准的celery选项：</p><p><code>celery flower --broker=amqp://guest:guest@localhost:5672//</code></p><p>在setting中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">djcelery.setup_loader()</div><div class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></div><div class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379/8'</span></div><div class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/9'</span></div><div class="line">CELERYBEAT_SCHEDULER = <span class="string">'djcelery.schedulers.DatabaseScheduler'</span></div><div class="line">CELERY_IMPORTS = (<span class="string">"apps.app1.tasks"</span>, <span class="string">"autohome.views"</span>)</div></pre></td></tr></table></figure><p>想要使用任务 ，一定要imports对应的py文件，修改后需要重启celery服务</p><p>引用：</p><p><a href="http://flower-docs-cn.readthedocs.io/zh/latest/install.html" target="_blank" rel="external">http://flower-docs-cn.readthedocs.io/zh/latest/install.html</a></p><p>-</p><p>引用：</p><blockquote><p><a href="http://www.celeryproject.org/" target="_blank" rel="external">http://www.celeryproject.org/</a><br><a href="http://www.liaoxuefeng.com/article/00137760323922531a8582c08814fb09e9930cede45e3cc000" target="_blank" rel="external">http://www.liaoxuefeng.com/article/00137760323922531a8582c08814fb09e9930cede45e3cc000</a><br><a href="http://www.jianshu.com/p/1840035cb510" target="_blank" rel="external">http://www.jianshu.com/p/1840035cb510</a><br><a href="http://www.dongwm.com/archives/how-to-use-celery/" target="_blank" rel="external">http://www.dongwm.com/archives/how-to-use-celery/</a><br><a href="http://liuzxc.github.io/blog/celery/" target="_blank" rel="external">http://liuzxc.github.io/blog/celery/</a><br><a href="http://opslinux.com/2015/09/22/celery%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E8%B7%B5/" target="_blank" rel="external">http://opslinux.com/2015/09/22/celery%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E8%B7%B5/</a><br><a href="http://blog.csdn.net/vintage_1/article/details/47664297" target="_blank" rel="external">http://blog.csdn.net/vintage_1/article/details/47664297</a></p></blockquote><p>django celery</p><blockquote><p><a href="http://blog.csdn.net/vintage_1/article/details/47664297" target="_blank" rel="external">http://blog.csdn.net/vintage_1/article/details/47664297</a><br><a href="http://maslino.website/post/celery-documentation-django.html" target="_blank" rel="external">http://maslino.website/post/celery-documentation-django.html</a></p></blockquote><h3 id="6-jenkins走起"><a href="#6-jenkins走起" class="headerlink" title="6. jenkins走起"></a>6. jenkins走起</h3><ul><li>jenkins 邮件配置</li></ul><p>引用：</p><blockquote><p><a href="http://www.cnblogs.com/amosli/p/3549918.html" target="_blank" rel="external">http://www.cnblogs.com/amosli/p/3549918.html</a><br><a href="http://www.cnblogs.com/GGHHLL/p/jenkins.html" target="_blank" rel="external">http://www.cnblogs.com/GGHHLL/p/jenkins.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> celery </tag>
            
            <tag> gunicorn </tag>
            
            <tag> supervisor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux免密码认证配置</title>
      <link href="/2016/12/12/Server-password-free-certification/"/>
      <url>/2016/12/12/Server-password-free-certification/</url>
      
        <content type="html"><![CDATA[<h1 id="服务器免密码认证"><a href="#服务器免密码认证" class="headerlink" title="服务器免密码认证"></a>服务器免密码认证</h1><hr><blockquote><p>配置过程很简单，但每次都忘记一些细节，故做个笔记</p></blockquote><a id="more"></a><h3 id="单向免密码登陆"><a href="#单向免密码登陆" class="headerlink" title="单向免密码登陆"></a>单向免密码登陆</h3><p>服务器A，PC机B。</p><h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><p>一般情况下，linux系统都会在你的目录下<code>~/</code>有<code>.ssh</code>文件夹，如果没有，则需要生成：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen</div></pre></td></tr></table></figure></p><p>如果不需要特殊配置，直接一路yes就可以了<br>这时候再去看，就已经有了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls ~/.ssh</div><div class="line"></div><div class="line">id_rsa  id_rsa.pub  known_hosts</div></pre></td></tr></table></figure></p><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><h5 id="在目标服务器新建认证文件"><a href="#在目标服务器新建认证文件" class="headerlink" title="在目标服务器新建认证文件"></a>在目标服务器新建认证文件</h5><p>在需要免密码的服务器上，即A服务器中的<code>~/.ssh/</code>下新建文件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div><div class="line">touch authorized_keys</div></pre></td></tr></table></figure></p><h5 id="获取公钥"><a href="#获取公钥" class="headerlink" title="获取公钥"></a>获取公钥</h5><p>将操作机pc中的公钥<code>id_rsa.pub</code>取出来：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p><h5 id="完成认证"><a href="#完成认证" class="headerlink" title="完成认证"></a>完成认证</h5><p>将打印出来的<code>id_rsa.pub</code>中的内容粘贴至服务器A的authorized_keys中，保存即可。</p><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><p>如果需要认证多台机器，可以自行将以上过程做成小脚本，我懒，没做。。。</p><p><a href="http://kuanghy.github.io/2016/09/01/linux-softwares" target="_blank" rel="external">linux下小工具参考</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> rsa认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的文件读取</title>
      <link href="/2016/12/11/python%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
      <url>/2016/12/11/python%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="深入python中文件读取的各类方法"><a href="#深入python中文件读取的各类方法" class="headerlink" title="深入python中文件读取的各类方法"></a>深入python中文件读取的各类方法</h1><blockquote><p>参考<a href="http://www.pythondoc.com/pythontutorial3/index.html" target="_blank" rel="external">文档</a></p></blockquote><h2 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h2><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 文件 </tag>
            
            <tag> 读写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>居住证办理</title>
      <link href="/2016/12/11/%E5%B1%85%E4%BD%8F%E8%AF%81%E5%8A%9E%E7%90%86/"/>
      <url>/2016/12/11/%E5%B1%85%E4%BD%8F%E8%AF%81%E5%8A%9E%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="居住证办理（原暂住证）"><a href="#居住证办理（原暂住证）" class="headerlink" title="居住证办理（原暂住证）"></a>居住证办理（原暂住证）</h1><p><a href="https://bjjzzpt.com/" target="_blank" rel="external">办理居住证传送门</a></p><p>今天周六，一大早就起来去预约的网点办理居住证，毕竟是去衙门口办事儿，不早点估计办不完。<br><a id="more"></a></p><h2 id="准备的材料"><a href="#准备的材料" class="headerlink" title="准备的材料"></a>准备的材料</h2><blockquote><p>对于材料的准备，前期准备还是挺充分的，网上也有相关的提示。<br>虽说有了申请网站，而且各种<br>提示相对于之前来说也很全面，但距离商业类的服务站点，还是差了不少。</p></blockquote><p>以网上预约办理居住证，条件选的是5年社保，说说需要准备哪些：</p><h3 id="身份证"><a href="#身份证" class="headerlink" title="身份证"></a>身份证</h3><p>没什么可说的，身份证必备，能证明真身的利器。</p><h3 id="半年内的社保个人权益记录"><a href="#半年内的社保个人权益记录" class="headerlink" title="半年内的社保个人权益记录"></a>半年内的社保个人权益记录</h3><p>去北京市社会保障服务平台申请，<a href="http://www.bjrbj.gov.cn/csibiz/home/" target="_blank" rel="external">传送门</a></p><p>登陆后在左树部分，选择个人权益记录 -&gt; 参保人缴费信息定制，从当前能选的最大月份往前推6个月即可。<br>时间选好点击提交请求，即可。</p><p>一般情况下，当天提交第二天才能出结果。</p><p>结果出来后打印这张单子。</p><h3 id="房租租赁合同（如果有房本，直接拿着房本）"><a href="#房租租赁合同（如果有房本，直接拿着房本）" class="headerlink" title="房租租赁合同（如果有房本，直接拿着房本）"></a>房租租赁合同（如果有房本，直接拿着房本）</h3><p>在有效期内的房屋租赁合同即可，清楚标明甲方乙方和租赁结束日期的。</p><blockquote><p>我办理的时候，还准备了其他的东西，比如照片、公司的劳动合同，保密协议什么的，全都拿着<br>结果是根本也用不上。</p></blockquote><h2 id="寻找办理点"><a href="#寻找办理点" class="headerlink" title="寻找办理点"></a>寻找办理点</h2><p>网约居住证受理网点，不是辖区派出所，一般都是社区的来京人员服务站，如果你不熟悉，还是不太好找的。<br>好在鼻子底下有张嘴，百度到附近，然后问下大爷大妈基本很快就能找到了。</p><h2 id="办理过程"><a href="#办理过程" class="headerlink" title="办理过程"></a>办理过程</h2><p>值得一提的是整个的办理过程，如果你拿着以上的文件，办理过程非常顺畅。</p><h3 id="扫描文件"><a href="#扫描文件" class="headerlink" title="扫描文件"></a>扫描文件</h3><p>会逐个的把你的身份证、权益记录、租房合同都用扫描仪扫描下来，不保留你任何的纸质文件。</p><h3 id="回执单"><a href="#回执单" class="headerlink" title="回执单"></a>回执单</h3><p>扫描完成后，会给你一张回执单，如果你网约的时候选的是EMS邮寄，则待15天左右即可；<br>如果是自取，需要到区域派出所领取。</p><blockquote><p>我就是选的EMS送，多方便啊，省得再请假了，人性化。</p></blockquote><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>北京取消暂住证换居住证，东西我觉得还是那个东西，只不过是换了个叫法而已。<br>如果想在北京买房买车，摇号，小孩上幼儿园，那么还是办一个吧，比较方便；<br>即便是你有工作居住证，也要办一个（据说是政策规定的）</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京工作居住证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>talking about python unittest</title>
      <link href="/2016/12/09/talking-about-python-unittest/"/>
      <url>/2016/12/09/talking-about-python-unittest/</url>
      
        <content type="html"><![CDATA[<h1 id="python-unittest-基础教程分享"><a href="#python-unittest-基础教程分享" class="headerlink" title="python unittest 基础教程分享"></a>python unittest 基础教程分享</h1><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> unittest </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>start-hexo</title>
      <link href="/2016/12/09/start-hexo/"/>
      <url>/2016/12/09/start-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><blockquote><p>系统：ubuntu 16.04 64位</p></blockquote><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure><h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -</div><div class="line"></div><div class="line">sudo apt-get install -y nodejs</div></pre></td></tr></table></figure><blockquote><p>不同系统安装node参见：<a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="external">这里</a></p></blockquote><a id="more"></a><h4 id="安装HEXO"><a href="#安装HEXO" class="headerlink" title="安装HEXO"></a>安装HEXO</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line">npm install hexo --save</div></pre></td></tr></table></figure><blockquote><p>hexo官网很详细，见<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">这里</a></p></blockquote><h2 id="至此，环境基本配置完毕。"><a href="#至此，环境基本配置完毕。" class="headerlink" title="至此，环境基本配置完毕。"></a>至此，环境基本配置完毕。</h2><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init myblog</div></pre></td></tr></table></figure><h2 id="教程参考："><a href="#教程参考：" class="headerlink" title="教程参考："></a>教程参考：</h2><blockquote><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">官方教程</a><br><a href="http://jiji262.github.io/" target="_blank" rel="external">令狐葱</a></p><p><a href="http://zhiho.github.io/2015/09/29/hexo-next/" target="_blank" rel="external">Zhiho’s Blog</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环（迭代器与生成器）的那点事</title>
      <link href="/2016/12/09/python-process-control-cycle-While-and-For/"/>
      <url>/2016/12/09/python-process-control-cycle-While-and-For/</url>
      
        <content type="html"><![CDATA[<h1 id="循环（迭代器与生成器）的那点事"><a href="#循环（迭代器与生成器）的那点事" class="headerlink" title="循环（迭代器与生成器）的那点事"></a>循环（迭代器与生成器）的那点事</h1><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><ul><li>while 执行时的基本流程图</li></ul><p><img src="http://image.candymami.com/while.png" alt="image" title="while流程图"></p><a id="more"></a><blockquote><p>while语句的基本格式</p></blockquote><p>其中<exception>为对参数或表达式取布尔值，即：bool(<exception>)，结果只有两种，True和False</exception></exception></p><p>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> &lt;exception&gt;:</div><div class="line">    &lt;suite&gt;</div><div class="line">    &lt;<span class="keyword">break</span>&gt;</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    &lt;suite&gt;</div></pre></td></tr></table></figure><blockquote><p>tips:</p></blockquote><p>讲述一下bool值：</p><ol><li><p>在数值上下文环境中，True被当作1, False被当作0；如True+2 =&gt; 3, int(True) =&gt; 1</p></li><li><p>其他类型值转换bool值时，除了’’, “”, “”””, 0, (), [], {}, None, 0.0, 0L, 0.0+0.0j, False值为Faluse，其他的都为True；例如：bool(-1) =&gt; True</p></li></ol><hr><ul><li>while表达式中的break，指跳出最近的所在的循环；一般为满足条件后跳出，以防止死循环； </li></ul><p>举例：猜字游戏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        input_seed = raw_input(<span class="string">"please input the seed:"</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            seed = int(input_seed)</div><div class="line">            <span class="keyword">if</span> seed == <span class="number">11</span>:</div><div class="line">                print(<span class="string">"congretulations to you!"</span>)</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">"guess again!"</span>)</div><div class="line">        <span class="keyword">except</span> ValueError:</div><div class="line">            print(<span class="string">"please input int type"</span>)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print(e)</div></pre></td></tr></table></figure><ul><li>else为可选部分，当控制权离开循环而又没有碰到break语句时，就会执行else中的语句；</li></ul><p>[注意：当第一次判断while循环条件时就不满足时，即一次循环也没有执行时，还是会执行else语句的]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></div><div class="line">    keys = <span class="string">"goodjob"</span></div><div class="line">    <span class="keyword">while</span> keys:</div><div class="line">        print(keys)</div><div class="line">        keys = keys[<span class="number">1</span>:]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"done"</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">False</span>:</div><div class="line">        print(<span class="string">"false"</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"the end"</span>)</div></pre></td></tr></table></figure><ul><li>break, continue和pass</li></ul><blockquote><p>break: 跳出最近所在的循环 （指跳出整个循环）</p></blockquote><p>continue: 立即跳到循环的顶端，即跳过本次循环，执行下一次循环</p><p>pass: 占位语句，无实际作用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">10</span></div><div class="line">b = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">if</span> a == <span class="number">1</span>: <span class="keyword">break</span></div><div class="line">    b += <span class="number">1</span></div><div class="line">    print(<span class="string">"b="</span>,b)</div><div class="line">    <span class="keyword">if</span> b == <span class="number">100</span>: <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> a == <span class="number">3</span>: <span class="keyword">continue</span></div><div class="line">    a -= <span class="number">1</span></div><div class="line">    print(<span class="string">"a="</span>,a)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure><hr><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><blockquote><p>for语句的基本格式和一般用法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> &lt;target&gt; <span class="keyword">in</span> &lt;object&gt;:</div><div class="line">    &lt;suite1&gt;</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    &lt;suite2&gt;</div></pre></td></tr></table></figure><blockquote><p>执行方式</p></blockquote><p>当运行for循环时，会将序列对象中的元素逐个赋值给目标，然后为每个元素执行循环主体。</p><hr><ul><li>for循环也有break, continue和else子句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> &lt;target&gt; <span class="keyword">in</span> &lt;object&gt;:</div><div class="line">    &lt;suite1&gt;</div><div class="line">    <span class="keyword">if</span> &lt;test&gt;: <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> &lt;test&gt;: contiune</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    &lt;suite2&gt;</div></pre></td></tr></table></figure><ul><li>基本用法 </li></ul><blockquote><p>求1-10之和，之积</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span><span class="params">()</span>:</span></div><div class="line">    h = <span class="number">0</span></div><div class="line">    j = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">11</span>):</div><div class="line">        h += x</div><div class="line">        j *= x</div><div class="line">    <span class="keyword">print</span> h, j</div></pre></td></tr></table></figure><ul><li>for中的元组赋值</li></ul><p>若对应列表中的元组进行赋值，则可看做对元组的解包运算；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func5</span><span class="params">()</span>:</span></div><div class="line">    T = [(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">6</span>)]</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> T:</div><div class="line">        <span class="keyword">print</span> x</div><div class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> T:</div><div class="line">        print(x,<span class="string">"=&gt;"</span>,y)</div></pre></td></tr></table></figure><ul><li>结合items操作字典</li></ul><p>for 循环中的元组使得用items方法来遍历字典中的键和值变得很方便，而不必再遍历键并手动索引以获取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func6</span><span class="params">()</span>:</span></div><div class="line">    D = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> D:</div><div class="line">        <span class="keyword">print</span> x</div><div class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> D.items():</div><div class="line">        print(x,<span class="string">"=&gt;"</span>,y)</div></pre></td></tr></table></figure><ul><li>多重for循环</li></ul><p>注意：else是第二层循环中的子句，而非if的子句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func7</span><span class="params">()</span>:</span></div><div class="line">    items = [<span class="string">'aaa'</span>,<span class="number">111</span>,(<span class="number">4</span>,<span class="number">5</span>),<span class="number">2.01</span>]</div><div class="line">    tests = [(<span class="number">4</span>,<span class="number">5</span>),<span class="number">3.14</span>]</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> tests:</div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</div><div class="line">            <span class="keyword">if</span> key == item:</div><div class="line">                print(key, <span class="string">"was found"</span>)</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(key, <span class="string">"not found"</span>)</div></pre></td></tr></table></figure><ul><li>常用range搭配，来做循环计数器和索引</li></ul><blockquote><p>range，python2.7为生成list，python3.*与xrange合并，均变为生成可迭代的对象；</p></blockquote><p>简单说区别：生成可迭代对象比生成list速度更快，占用内存更小，在大数据量情况下非常有效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">list(range(<span class="number">-5</span>,<span class="number">5</span>))</div><div class="line">&gt;&gt; [<span class="number">-5</span>, <span class="number">-4</span>, <span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line">list(range(<span class="number">5</span>,<span class="number">-5</span>,<span class="number">-2</span>))</div><div class="line">&gt;&gt; [<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-3</span>]</div></pre></td></tr></table></figure><ul><li>利用range进行索引，可以通过控制range来实现特殊的遍历，例如，可跳过一些元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">S = <span class="string">'abcdefghijklmn'</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(S), <span class="number">2</span>): <span class="keyword">print</span> S[i],</div><div class="line">&gt;&gt; a c e g i k m</div></pre></td></tr></table></figure><blockquote><p>扩展：其他的跳过元素的方式，运用切片技术，如需要可详细了解：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> S[::<span class="number">2</span>]:<span class="keyword">print</span> item,</div><div class="line">&gt;&gt; a c e g i k m</div></pre></td></tr></table></figure><ul><li>并行遍历</li></ul><p>对两组列表进行并行遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func9</span><span class="params">()</span>:</span></div><div class="line">    a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">    b = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</div><div class="line">    c = zip(a,b)</div><div class="line">    <span class="keyword">print</span> type(c)</div><div class="line">    <span class="keyword">print</span> c</div><div class="line">    <span class="keyword">for</span> m, n <span class="keyword">in</span> c:</div><div class="line">        <span class="keyword">print</span> m,<span class="string">"+"</span>,n,<span class="string">"="</span>,m+n</div><div class="line">&gt;&gt;</div><div class="line">&lt;type <span class="string">'list'</span>&gt;</div><div class="line">[(<span class="number">1</span>, <span class="number">11</span>), (<span class="number">2</span>, <span class="number">22</span>), (<span class="number">3</span>, <span class="number">33</span>), (<span class="number">4</span>, <span class="number">44</span>)]</div><div class="line"><span class="number">1</span> + <span class="number">11</span> = <span class="number">12</span></div><div class="line"><span class="number">2</span> + <span class="number">22</span> = <span class="number">24</span></div><div class="line"><span class="number">3</span> + <span class="number">33</span> = <span class="number">36</span></div><div class="line"><span class="number">4</span> + <span class="number">44</span> = <span class="number">48</span></div></pre></td></tr></table></figure><blockquote><p>扩展：zip和range一样，2.×时代生成为list，3.×时代均为可迭代对象；</p></blockquote><hr><ul><li>产生偏移和元素: enumerate</li></ul><p>有时可能会有这种需求，查看迭代的元素所在的位置，可以这样实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func10</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="string">"abcdefg"</span></div><div class="line">    j = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> a:</div><div class="line">        <span class="keyword">print</span> x, <span class="string">"offset is "</span>,j</div><div class="line">        j += <span class="number">1</span></div><div class="line">&gt;&gt;&gt;</div><div class="line">a offset <span class="keyword">is</span>  <span class="number">0</span></div><div class="line">b offset <span class="keyword">is</span>  <span class="number">1</span></div><div class="line">c offset <span class="keyword">is</span>  <span class="number">2</span></div><div class="line">d offset <span class="keyword">is</span>  <span class="number">3</span></div><div class="line">e offset <span class="keyword">is</span>  <span class="number">4</span></div><div class="line">f offset <span class="keyword">is</span>  <span class="number">5</span></div><div class="line">g offset <span class="keyword">is</span>  <span class="number">6</span></div></pre></td></tr></table></figure><p>但内置函数enumerate可以帮我们做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func11</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="string">"abcdefg"</span></div><div class="line">    j = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> m, n <span class="keyword">in</span> enumerate(a):</div><div class="line">        <span class="keyword">print</span> n, <span class="string">"offset is --"</span>, m</div></pre></td></tr></table></figure><h2 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h2><blockquote><p>列表推导式为从序列中创建列表提供了一个简单的方法。</p></blockquote><h3 id="普通创建列表方式"><a href="#普通创建列表方式" class="headerlink" title="普通创建列表方式"></a>普通创建列表方式</h3><p>我们可以像这样创建一个普通的列表，像这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">testlist = []</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    testlist.append(x**<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> testlist</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure></p><p>通过上面的程序可以发现，通过for循环中被创建的名为x的变量在循环完毕后，依然存在。<br>如果想完成上面的功能，且不会产生其他的副作用，可以使用lambda来创建：</p><h3 id="通过lambda表达式来创建"><a href="#通过lambda表达式来创建" class="headerlink" title="通过lambda表达式来创建"></a>通过lambda表达式来创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">testlist = list(map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, range(<span class="number">10</span>)))</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure><p>还有一种更加易读的创建方式：</p><h3 id="通过列表推导创建"><a href="#通过列表推导创建" class="headerlink" title="通过列表推导创建"></a>通过列表推导创建</h3><h4 id="基本列表推导式"><a href="#基本列表推导式" class="headerlink" title="基本列表推导式"></a>基本列表推导式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">testlist = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure><p>这种方式更加易读，且创建起列表来得心应手。<br>下面我们来看看，它是如何来创建的，即它的格式是什么。</p><blockquote><p>列表推导式由包含一个表达式的括号组成，表达式后面跟随一个 for 子句，<br>之后可以有零或多个 for 或 if 子句。结果是一个列表，<br>由表达式依据其后面的 for 和 if 子句上下文计算而来的结果构成。</p></blockquote><p>等同于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">testlist = []</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    testlist.append(x**<span class="number">2</span>)</div><div class="line"></div><div class="line">testlist</div><div class="line"></div><div class="line">&gt;&gt;&gt;[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure></p><h4 id="带控制流程的列表推导"><a href="#带控制流程的列表推导" class="headerlink" title="带控制流程的列表推导"></a>带控制流程的列表推导</h4><p>来具体看个例子：<br>双重循环加判断：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>] <span class="keyword">if</span> x != y ]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">5</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">5</span>)]</div></pre></td></tr></table></figure></p><p>如果看起来太复杂，那么变成常规的语法来看看：<br>上面的等同于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">testlist = []</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]:</div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>]:</div><div class="line">        <span class="keyword">if</span> x != y:</div><div class="line">            testlist.append((x, y))</div><div class="line"></div><div class="line">testlist</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">5</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">5</span>)]</div></pre></td></tr></table></figure></p><p>注意下上面的for 和if语句的顺序。</p><h4 id="嵌套的列表推导式"><a href="#嵌套的列表推导式" class="headerlink" title="嵌套的列表推导式"></a>嵌套的列表推导式</h4><p>列表解析中的第一个表达式可以是任何表达式，包括列表解析。</p><p>再看一个例子：<br>有一个长度为4的列表组成的3×4的矩阵，如果想要交换行列，应如何操作？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">testlist = [</div><div class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</div><div class="line">    [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</div><div class="line">    [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],</div><div class="line">]</div></pre></td></tr></table></figure></p><h5 id="普通方式："><a href="#普通方式：" class="headerlink" title="普通方式："></a>普通方式：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">result = []</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">    bb = []</div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> testlist:</div><div class="line">        bb.append(y[x])</div><div class="line">    result.append(bb)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</div></pre></td></tr></table></figure><h5 id="一层列表推导："><a href="#一层列表推导：" class="headerlink" title="一层列表推导："></a>一层列表推导：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">result = []</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">    result.append([row[i] <span class="keyword">for</span> i <span class="keyword">in</span> testlist])</div><div class="line"></div><div class="line">result</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</div></pre></td></tr></table></figure><h5 id="双层列表推导"><a href="#双层列表推导" class="headerlink" title="双层列表推导"></a>双层列表推导</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[y[x] <span class="keyword">for</span> y <span class="keyword">in</span> testlist] <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>)]</div></pre></td></tr></table></figure><h5 id="内置函数处理"><a href="#内置函数处理" class="headerlink" title="内置函数处理"></a>内置函数处理</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list(zip(*testlist))</div></pre></td></tr></table></figure><p>上次讲过一点zip的功能，这里的*号为参数列表的分拆，等同于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">b = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</div><div class="line">c = [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</div><div class="line">tt = zip(a,b,c)</div><div class="line">result = list(tt)</div></pre></td></tr></table></figure></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>自己偿试将上次的food.py中的循环判断语句，使用列表表达式的方式进行处理</p><p>用自己的话来说一遍：<br>把最终要处理的表达式提在最前面，把循环语句放在后面；循环语句与判断语句按顺序依次排列。<br>每一层中扩号都执行了一次append操作。</p><h2 id="文件迭代器"><a href="#文件迭代器" class="headerlink" title="文件迭代器"></a>文件迭代器</h2><h3 id="文件读取方法大集合"><a href="#文件读取方法大集合" class="headerlink" title="文件读取方法大集合"></a>文件读取方法大集合</h3><ul><li>基本读取文件方法</li></ul><ul><li>with的用法</li></ul><h2 id="生成器-generator"><a href="#生成器-generator" class="headerlink" title="生成器-generator"></a>生成器-generator</h2><p>yield</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 迭代 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
